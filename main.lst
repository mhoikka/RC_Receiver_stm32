
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000018 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 ccEj189K.o
f108f85f l       *ABS*	00000000 BootRAM
08003f08 l       .text	00000000 LoopCopyDataInit
08003f00 l       .text	00000000 CopyDataInit
08003f1c l       .text	00000000 LoopFillZerobss
08003f16 l       .text	00000000 FillZerobss
08003f2e l       .text	00000000 LoopForever
08003f48 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_exti.c
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
08003f58 l     O .text	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 _udivsi3.o
08000dd4 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
08000ee8 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 main.c
20000038 l     O .bss	00000004 TimingDelay
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 stm32f0xx_nucleo.c
00000000 l    df *ABS*	00000000 stm32f0xx_it.c
00000000 l    df *ABS*	00000000 bme280.c
00000000 l    df *ABS*	00000000 Peripheral_Init.c
08003984 l     F .text	00000010 set_nrf24_SPI_CSN.part.0
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
08000c04 g     F .text	00000012 USART_SetGuardTime
08000cdc g     F .text	00000018 USART_SetDEDeassertionTime
0800045c g     F .text	0000001c RCC_HSICmd
08001100 g     F .text	00000012 .hidden __aeabi_dcmple
080004e4 g     F .text	00000018 RCC_LSEDriveConfig
08000a48 g     F .text	00000020 USART_MSBFirstCmd
08000538 g     F .text	00000024 RCC_PLLCmd
080007f4 g     F .text	00000018 RCC_AHBPeriphResetCmd
08000378 g     F .text	00000022 GPIO_PinAFConfig
08001eac g     F .text	00000088 .hidden __eqdf2
080008b0 g     F .text	0000000c RCC_ClearITPendingBit
08003150 g     F .text	00000034 send_string
08000348 g     F .text	0000000e GPIO_ReadOutputDataBit
08000c40 g     F .text	00000018 USART_SetAutoRetryCount
08003f48  w    F .text	00000002 TIM1_CC_IRQHandler
080032e6 g     F .text	00000002 HardFault_Handler
08003f48  w    F .text	00000002 ADC1_COMP_IRQHandler
08003330 g     F .text	0000003a bme280_get_regs
080032ec g     F .text	00000008 SysTick_Handler
08000594 g     F .text	0000000c RCC_MCOConfig
080039bc g     F .text	0000006c display_sensor_reading
08003f48  w    F .text	00000002 PVD_IRQHandler
20000014 g     O .data	00000001 SETUP_AW
08000624 g     F .text	00000018 RCC_CECCLKConfig
08003fcc g       .text	00000000 _sidata
080032ea g     F .text	00000002 PendSV_Handler
080032e4 g     F .text	00000002 NMI_Handler
20000098 g       .bss	00000000 __exidx_end
080030d8 g     F .text	00000016 reverse
08003f48  w    F .text	00000002 I2C1_IRQHandler
0800083c g     F .text	00000018 RCC_ITConfig
08001f34 g     F .text	000000e0 .hidden __gtdf2
080009f4 g     F .text	00000012 USART_DirectionModeCmd
08003994 g     F .text	00000028 get_sensor_reading
08000c18 g     F .text	00000014 USART_SmartCardCmd
08000d74 g     F .text	0000000e USART_GetFlagStatus
08000adc g     F .text	00000010 USART_SetReceiverTimeOut
08003fcc g       .text	00000000 _etext
20000018 g       .bss	00000000 _sbss
20000034 g     O .bss	00000001 BlinkSpeed
080005a0 g     F .text	00000014 RCC_SYSCLKConfig
080010d0 g     F .text	00000010 .hidden __aeabi_cdcmple
08000b9c g     F .text	00000014 USART_MuteModeWakeUpConfig
080000c4 g     F .text	00000020 EXTI_DeInit
0800040c g     F .text	0000003c RCC_WaitForHSEStartUp
08003184 g     F .text	00000014 send_stringln
2000000e g     O .data	00000001 WRITE_COMMAND
08000b68 g     F .text	00000012 USART_SetAddress
08000b44 g     F .text	00000014 USART_AutoBaudRateConfig
08000aec g     F .text	00000010 USART_SetPrescaler
20000000 g     O .data	00000004 BUTTON_PORT
08000788 g     F .text	00000024 RCC_BackupResetCmd
08000a28 g     F .text	00000020 USART_OneBitMethodCmd
08002f98 g     F .text	0000008c memcpy
080010c0 g     F .text	00000020 .hidden __aeabi_cdrcmple
08002014 g     F .text	000000dc .hidden __ltdf2
08000570 g     F .text	00000024 RCC_ClockSecuritySystemCmd
08000888 g     F .text	00000014 RCC_ClearFlag
08003a28 g     F .text	00000038 return_sensor_reading
08000b60 g     F .text	00000008 USART_ReceiveData
20000012 g     O .data	00000001 RX_ADDR_P0
080003fc g     F .text	00000010 RCC_HSEConfig
08000dd4 g     F .text	0000010a .hidden __udivsi3
080007c4 g     F .text	00000018 RCC_APB2PeriphClockCmd
0800113c g     F .text	0000003c .hidden __fixunsdfsi
08000254 g     F .text	000000a8 GPIO_Init
08000518 g     F .text	00000020 RCC_PLLConfig
080005f0 g     F .text	00000034 RCC_ADCCLKConfig
080030ee g     F .text	00000060 itoa
08002e6c g     F .text	00000048 .hidden __aeabi_ui2d
20000000 g       .data	00000000 _sdata
08003f48  w    F .text	00000002 SPI1_IRQHandler
080009e0 g     F .text	00000014 USART_Cmd
08000c7c g     F .text	00000014 USART_IrDACmd
08000374 g     F .text	00000004 GPIO_Write
08003f48  w    F .text	00000002 TIM6_DAC_IRQHandler
08000358 g     F .text	00000006 GPIO_ReadOutputData
08003c38 g     F .text	00000040 nrf24_write_register
080004c4 g     F .text	00000020 RCC_LSEConfig
080010ec g     F .text	00000012 .hidden __aeabi_dcmplt
08000dc8 g     F .text	0000000a USART_ClearITPendingBit
08000764 g     F .text	00000024 RCC_RTCCLKCmd
080018a8 g     F .text	00000604 .hidden __aeabi_ddiv
080007dc g     F .text	00000018 RCC_APB1PeriphClockCmd
0800089c g     F .text	00000014 RCC_GetITStatus
20000098 g       .bss	00000000 __exidx_start
080020f0 g     F .text	00000598 .hidden __aeabi_dmul
08003024 g     F .text	00000048 __libc_init_array
080007ac g     F .text	00000018 RCC_AHBPeriphClockCmd
20000040 g     O .bss	00000018 bme280_datastruct
08003f48  w    F .text	00000002 EXTI2_3_IRQHandler
08000b7c g     F .text	00000020 USART_MuteModeCmd
08000a08 g     F .text	00000020 USART_OverSampling8Cmd
2000000c g     O .data	00000001 WRITE_PAYLOAD_NOACK
08003fb4 g     F .text	00000000 _init
08003f48  w    F .text	00000002 I2C2_IRQHandler
0800306c g     F .text	00000040 System_Clock_Init
08003d94 g     F .text	000000c8 transmitBytesNRF
08003f48  w    F .text	00000002 TIM17_IRQHandler
080001a4 g     F .text	0000000c EXTI_ClearITPendingBit
08003f48  w    F .text	00000002 RTC_IRQHandler
20000098 g       .bss	00000000 _ebss
08000d88 g     F .text	0000003e USART_GetITStatus
08003ef8  w    F .text	00000038 Reset_Handler
08000340 g     F .text	00000006 GPIO_ReadInputData
08000bc0 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08000854 g     F .text	00000034 RCC_GetFlagStatus
08000bb0 g     F .text	00000010 USART_AddressDetectionConfig
20000058 g     O .bss	00000040 bme280_initparam
08003cd4 g     F .text	00000074 nrf24_write_TX_payload
08000360 g     F .text	00000004 GPIO_SetBits
08000168 g     F .text	00000014 EXTI_GetFlagStatus
08001178 g     F .text	00000730 .hidden __aeabi_dadd
080005b4 g     F .text	00000010 RCC_GetSYSCLKSource
08002014 g     F .text	000000dc .hidden __ledf2
08000368 g     F .text	0000000c GPIO_WriteBit
08000ee8 g     F .text	00000000 .hidden __aeabi_idiv
08003aa8 g     F .text	00000048 Servo_Peripherals_Init
0800066c g     F .text	000000e8 RCC_GetClocksFreq
08001114 g     F .text	00000012 .hidden __aeabi_dcmpgt
08002eb4 g     F .text	0000003c .hidden __clzsi2
08003f48  w    F .text	00000002 TIM16_IRQHandler
08000158 g     F .text	00000010 EXTI_GenerateSWInterrupt
08000900 g     F .text	0000009c USART_Init
20000004 g     O .data	00000004 GPIO_PORT
08003f48  w    F .text	00000002 TIM3_IRQHandler
08003f48  w    F .text	00000002 RCC_IRQHandler
080032f4 g     F .text	0000003c EXTI4_15_IRQHandler
08001128 g     F .text	00000012 .hidden __aeabi_dcmpge
20000018 g       .bss	00000000 _bss
08003f48  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000c90 g     F .text	00000020 USART_DECmd
08002688 g     F .text	00000710 .hidden __aeabi_dsub
08003f48 g       .text	00000002 Default_Handler
08000bf0 g     F .text	00000014 USART_HalfDuplexCmd
0800017c g     F .text	0000000c EXTI_ClearFlag
08000754 g     F .text	00000010 RCC_RTCCLKConfig
2000003c g     O .bss	00000001 CONFIG
08003f48  w    F .text	00000002 CEC_IRQHandler
0800048c g     F .text	0000001c RCC_HSI14Cmd
08003f48  w    F .text	00000002 TIM14_IRQHandler
08000d1c g     F .text	00000030 USART_ITConfig
08003f48  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
080000e4 g     F .text	00000064 EXTI_Init
08000a68 g     F .text	00000020 USART_DataInvCmd
20000015 g     O .data	00000001 ENAA
20000010 g     O .data	00000001 TX_ADDR
08000a9c g     F .text	00000020 USART_SWAPPinCmd
08000364 g     F .text	00000004 GPIO_ResetBits
08002e10 g     F .text	0000005c .hidden __aeabi_i2d
08000c6c g     F .text	00000010 USART_IrDAConfig
08003f48  w    F .text	00000002 TIM15_IRQHandler
08000afc g     F .text	00000014 USART_STOPModeCmd
08003f48  w    F .text	00000002 EXTI0_1_IRQHandler
08000cb0 g     F .text	00000014 USART_DEPolarityConfig
080010bc  w    F .text	00000002 .hidden __aeabi_ldiv0
080004a8 g     F .text	0000001c RCC_HSI14ADCRequestCmd
080038a0 g     F .text	00000078 bme280_get_sensor_data
08000d60 g     F .text	00000014 USART_OverrunDetectionConfig
080008bc g     F .text	00000044 USART_DeInit
2000000b g     O .data	00000001 STATUS_REG
08000188 g     F .text	0000001c EXTI_GetITStatus
08003f48  w    F .text	00000002 SPI2_IRQHandler
2000000f g     O .data	00000001 FEATURE
08002ef0 g     F .text	000000a6 memset
08000448 g     F .text	00000014 RCC_AdjustHSICalibrationValue
08003198 g     F .text	0000006c main
080009b4 g     F .text	00000020 USART_ClockInit
08000dd4 g     F .text	00000000 .hidden __aeabi_uidiv
080032e8 g     F .text	00000002 SVC_Handler
08000148 g     F .text	0000000e EXTI_StructInit
08000ee8 g     F .text	000001cc .hidden __divsi3
08003c1c g     F .text	0000001a set_nrf24_SPI_CSN
08003c78 g     F .text	0000005c nrf24_multiwrite_register
08003e5c g     F .text	0000009c transmit
08000d84 g     F .text	00000004 USART_ClearFlag
08003204 g     F .text	000000b4 SystemInit
08000478 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
080001b0 g     F .text	000000a4 GPIO_DeInit
08001eac g     F .text	00000088 .hidden __nedf2
08003fc0 g     F .text	00000000 _fini
0800039c g     F .text	00000060 RCC_DeInit
08003a60 g     F .text	00000048 HBridge_Peripherals_Init
08003918 g     F .text	0000006c delay_microseconds
08000b10 g     F .text	00000014 USART_StopModeWakeUpSourceConfig
08003f48  w    F .text	00000002 TS_IRQHandler
08003af0 g     F .text	00000060 DriveServoControl
08003f48  w    F .text	00000002 WWDG_IRQHandler
08000824 g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
0800055c g     F .text	00000014 RCC_PREDIV1Config
080030ac g     F .text	00000018 Delay
080032cc g     F .text	00000018 STM_EVAL_PBGetState
08003f48  w    F .text	00000002 TIM2_IRQHandler
20000009 g     O .data	00000001 ACK
0800113c g     F .text	0000003c .hidden __aeabi_d2uiz
080002fc g     F .text	00000010 GPIO_StructInit
08003f48  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
080032b8 g     F .text	00000014 STM_EVAL_LEDToggle
20000013 g     O .data	00000001 RF_SETUP
08000d4c g     F .text	00000014 USART_RequestCmd
20002000 g       *ABS*	00000000 _estack
08000b58 g     F .text	00000008 USART_SendData
08000ee0 g     F .text	00000008 .hidden __aeabi_uidivmod
08003b50 g     F .text	000000cc DriveACMotorVoltageController
080010e0 g     F .text	0000000c .hidden __aeabi_dcmpeq
20000018 g       .data	00000000 _edata
0800099c g     F .text	00000016 USART_StructInit
08000abc g     F .text	00000020 USART_ReceiverTimeOutCmd
20000011 g     O .data	00000001 RX_PW_P0
08003f48  w    F .text	00000002 USART2_IRQHandler
08000c2c g     F .text	00000014 USART_SmartCardNACKCmd
08000c58 g     F .text	00000012 USART_SetBlockLength
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000bd0 g     F .text	00000020 USART_LINCmd
08002d98 g     F .text	00000078 .hidden __aeabi_d2iz
20000018 g     O .bss	0000001c RCC_Clocks
08000654 g     F .text	00000018 RCC_USARTCLKConfig
08000a88 g     F .text	00000012 USART_InvPinCmd
080030c4 g     F .text	00000014 TimingDelay_Decrement
080010bc  w    F .text	00000002 .hidden __aeabi_idiv0
0800063c g     F .text	00000018 RCC_I2CCLKConfig
080005d8 g     F .text	00000018 RCC_PCLKConfig
08003f48  w    F .text	00000002 FLASH_IRQHandler
20000008 g     O .data	00000001 ADDRESS_LEN
2000000d g     O .data	00000001 WRITE_PAYLOAD_COMMAND
0800030c g     F .text	00000024 GPIO_PinLockConfig
08003f48  w    F .text	00000002 USART1_IRQHandler
080004fc g     F .text	0000001c RCC_LSICmd
080010d0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08001f34 g     F .text	000000e0 .hidden __gedf2
080009d4 g     F .text	0000000c USART_ClockStructInit
0800080c g     F .text	00000018 RCC_APB2PeriphResetCmd
08000b24 g     F .text	00000020 USART_AutoBaudRateCmd
08003f48  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
0800336c g     F .text	00000534 bme280_compensate_data
08003d78 g     F .text	0000001c set_nrf24_SPI_CE
080010b4 g     F .text	00000008 .hidden __aeabi_idivmod
08000330 g     F .text	0000000e GPIO_ReadInputDataBit
08000cf4 g     F .text	00000012 USART_DMACmd
08000cc4 g     F .text	00000018 USART_SetDEAssertionTime
2000000a g     O .data	00000001 FLUSH_TX
080005c4 g     F .text	00000014 RCC_HCLKConfig
08003d48 g     F .text	00000030 nrf24_clear_TX
08000d08 g     F .text	00000014 USART_DMAReceptionErrorConfig



Disassembly of section .text:

080000c4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x0F940000;
 80000c4:	4b04      	ldr	r3, [pc, #16]	@ (80000d8 <EXTI_DeInit+0x14>)
 80000c6:	4a05      	ldr	r2, [pc, #20]	@ (80000dc <EXTI_DeInit+0x18>)
 80000c8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80000ca:	2200      	movs	r2, #0
 80000cc:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80000ce:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80000d0:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x006BFFFF;
 80000d2:	4a03      	ldr	r2, [pc, #12]	@ (80000e0 <EXTI_DeInit+0x1c>)
 80000d4:	615a      	str	r2, [r3, #20]
}
 80000d6:	4770      	bx	lr
 80000d8:	40010400 	.word	0x40010400
 80000dc:	0f940000 	.word	0x0f940000
 80000e0:	006bffff 	.word	0x006bffff

080000e4 <EXTI_Init>:
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;

    tmp += EXTI_InitStruct->EXTI_Mode;
 80000e4:	4b17      	ldr	r3, [pc, #92]	@ (8000144 <EXTI_Init+0x60>)
{
 80000e6:	b530      	push	{r4, r5, lr}
    tmp += EXTI_InitStruct->EXTI_Mode;
 80000e8:	469c      	mov	ip, r3
 80000ea:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80000ec:	6804      	ldr	r4, [r0, #0]
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80000ee:	7983      	ldrb	r3, [r0, #6]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80000f0:	43e1      	mvns	r1, r4
    tmp += EXTI_InitStruct->EXTI_Mode;
 80000f2:	4462      	add	r2, ip
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80000f4:	2b00      	cmp	r3, #0
 80000f6:	d01a      	beq.n	800012e <EXTI_Init+0x4a>
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80000f8:	4663      	mov	r3, ip
 80000fa:	681d      	ldr	r5, [r3, #0]
 80000fc:	400d      	ands	r5, r1
 80000fe:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000100:	685d      	ldr	r5, [r3, #4]
 8000102:	4029      	ands	r1, r5
 8000104:	6059      	str	r1, [r3, #4]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000106:	6811      	ldr	r1, [r2, #0]
 8000108:	4321      	orrs	r1, r4
 800010a:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800010c:	6899      	ldr	r1, [r3, #8]
 800010e:	6802      	ldr	r2, [r0, #0]
 8000110:	4391      	bics	r1, r2
 8000112:	6099      	str	r1, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000114:	68d9      	ldr	r1, [r3, #12]
 8000116:	4391      	bics	r1, r2
 8000118:	60d9      	str	r1, [r3, #12]

    /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800011a:	7941      	ldrb	r1, [r0, #5]
 800011c:	2910      	cmp	r1, #16
 800011e:	d00a      	beq.n	8000136 <EXTI_Init+0x52>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000120:	4b08      	ldr	r3, [pc, #32]	@ (8000144 <EXTI_Init+0x60>)
 8000122:	469c      	mov	ip, r3
 8000124:	4461      	add	r1, ip

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000126:	680b      	ldr	r3, [r1, #0]
 8000128:	431a      	orrs	r2, r3
 800012a:	600a      	str	r2, [r1, #0]
 800012c:	e002      	b.n	8000134 <EXTI_Init+0x50>
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800012e:	6813      	ldr	r3, [r2, #0]
 8000130:	4019      	ands	r1, r3
 8000132:	6011      	str	r1, [r2, #0]
  }
}
 8000134:	bd30      	pop	{r4, r5, pc}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000136:	6899      	ldr	r1, [r3, #8]
 8000138:	4311      	orrs	r1, r2
 800013a:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800013c:	68d9      	ldr	r1, [r3, #12]
 800013e:	430a      	orrs	r2, r1
 8000140:	60da      	str	r2, [r3, #12]
 8000142:	e7f7      	b.n	8000134 <EXTI_Init+0x50>
 8000144:	40010400 	.word	0x40010400

08000148 <EXTI_StructInit>:
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000148:	22c0      	movs	r2, #192	@ 0xc0
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800014a:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800014c:	0112      	lsls	r2, r2, #4
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800014e:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000150:	8082      	strh	r2, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000152:	7183      	strb	r3, [r0, #6]
}
 8000154:	4770      	bx	lr
 8000156:	46c0      	nop			@ (mov r8, r8)

08000158 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
 8000158:	4a02      	ldr	r2, [pc, #8]	@ (8000164 <EXTI_GenerateSWInterrupt+0xc>)
 800015a:	6913      	ldr	r3, [r2, #16]
 800015c:	4303      	orrs	r3, r0
 800015e:	6113      	str	r3, [r2, #16]
}
 8000160:	4770      	bx	lr
 8000162:	46c0      	nop			@ (mov r8, r8)
 8000164:	40010400 	.word	0x40010400

08000168 <EXTI_GetFlagStatus>:
{
   FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000168:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <EXTI_GetFlagStatus+0x10>)
 800016a:	695b      	ldr	r3, [r3, #20]
 800016c:	4018      	ands	r0, r3
 800016e:	1e43      	subs	r3, r0, #1
 8000170:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8000172:	b2c0      	uxtb	r0, r0
}
 8000174:	4770      	bx	lr
 8000176:	46c0      	nop			@ (mov r8, r8)
 8000178:	40010400 	.word	0x40010400

0800017c <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
 800017c:	4b01      	ldr	r3, [pc, #4]	@ (8000184 <EXTI_ClearFlag+0x8>)
 800017e:	6158      	str	r0, [r3, #20]
}
 8000180:	4770      	bx	lr
 8000182:	46c0      	nop			@ (mov r8, r8)
 8000184:	40010400 	.word	0x40010400

08000188 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be (0..27).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000188:	0003      	movs	r3, r0
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
 800018a:	4a05      	ldr	r2, [pc, #20]	@ (80001a0 <EXTI_GetITStatus+0x18>)
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800018c:	2000      	movs	r0, #0
  enablestatus =  EXTI->IMR & EXTI_Line;
 800018e:	6811      	ldr	r1, [r2, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000190:	6952      	ldr	r2, [r2, #20]
 8000192:	4213      	tst	r3, r2
 8000194:	d003      	beq.n	800019e <EXTI_GetITStatus+0x16>
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000196:	400b      	ands	r3, r1
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000198:	1e5a      	subs	r2, r3, #1
 800019a:	4193      	sbcs	r3, r2
 800019c:	b2d8      	uxtb	r0, r3
  }
  return bitstatus;
  
}
 800019e:	4770      	bx	lr
 80001a0:	40010400 	.word	0x40010400

080001a4 <EXTI_ClearITPendingBit>:
  * @brief  Clears the EXTI's line pending bits.
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..27).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
 80001a4:	4b01      	ldr	r3, [pc, #4]	@ (80001ac <EXTI_ClearITPendingBit+0x8>)
 80001a6:	6158      	str	r0, [r3, #20]
 80001a8:	4770      	bx	lr
 80001aa:	46c0      	nop			@ (mov r8, r8)
 80001ac:	40010400 	.word	0x40010400

080001b0 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80001b0:	2390      	movs	r3, #144	@ 0x90
{
 80001b2:	b510      	push	{r4, lr}
  if(GPIOx == GPIOA)
 80001b4:	05db      	lsls	r3, r3, #23
 80001b6:	4298      	cmp	r0, r3
 80001b8:	d017      	beq.n	80001ea <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80001ba:	4b22      	ldr	r3, [pc, #136]	@ (8000244 <GPIO_DeInit+0x94>)
 80001bc:	4298      	cmp	r0, r3
 80001be:	d01f      	beq.n	8000200 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80001c0:	4b21      	ldr	r3, [pc, #132]	@ (8000248 <GPIO_DeInit+0x98>)
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d027      	beq.n	8000216 <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80001c6:	4b21      	ldr	r3, [pc, #132]	@ (800024c <GPIO_DeInit+0x9c>)
 80001c8:	4298      	cmp	r0, r3
 80001ca:	d003      	beq.n	80001d4 <GPIO_DeInit+0x24>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80001cc:	4b20      	ldr	r3, [pc, #128]	@ (8000250 <GPIO_DeInit+0xa0>)
 80001ce:	4298      	cmp	r0, r3
 80001d0:	d02c      	beq.n	800022c <GPIO_DeInit+0x7c>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80001d2:	bd10      	pop	{r4, pc}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 80001d4:	2080      	movs	r0, #128	@ 0x80
 80001d6:	2101      	movs	r1, #1
 80001d8:	0340      	lsls	r0, r0, #13
 80001da:	f000 fb0b 	bl	80007f4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 80001de:	2080      	movs	r0, #128	@ 0x80
 80001e0:	2100      	movs	r1, #0
 80001e2:	0340      	lsls	r0, r0, #13
 80001e4:	f000 fb06 	bl	80007f4 <RCC_AHBPeriphResetCmd>
 80001e8:	e7f3      	b.n	80001d2 <GPIO_DeInit+0x22>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80001ea:	2080      	movs	r0, #128	@ 0x80
 80001ec:	2101      	movs	r1, #1
 80001ee:	0280      	lsls	r0, r0, #10
 80001f0:	f000 fb00 	bl	80007f4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 80001f4:	2080      	movs	r0, #128	@ 0x80
 80001f6:	2100      	movs	r1, #0
 80001f8:	0280      	lsls	r0, r0, #10
 80001fa:	f000 fafb 	bl	80007f4 <RCC_AHBPeriphResetCmd>
 80001fe:	e7e8      	b.n	80001d2 <GPIO_DeInit+0x22>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000200:	2080      	movs	r0, #128	@ 0x80
 8000202:	2101      	movs	r1, #1
 8000204:	02c0      	lsls	r0, r0, #11
 8000206:	f000 faf5 	bl	80007f4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800020a:	2080      	movs	r0, #128	@ 0x80
 800020c:	2100      	movs	r1, #0
 800020e:	02c0      	lsls	r0, r0, #11
 8000210:	f000 faf0 	bl	80007f4 <RCC_AHBPeriphResetCmd>
 8000214:	e7dd      	b.n	80001d2 <GPIO_DeInit+0x22>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000216:	2080      	movs	r0, #128	@ 0x80
 8000218:	2101      	movs	r1, #1
 800021a:	0300      	lsls	r0, r0, #12
 800021c:	f000 faea 	bl	80007f4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000220:	2080      	movs	r0, #128	@ 0x80
 8000222:	2100      	movs	r1, #0
 8000224:	0300      	lsls	r0, r0, #12
 8000226:	f000 fae5 	bl	80007f4 <RCC_AHBPeriphResetCmd>
 800022a:	e7d2      	b.n	80001d2 <GPIO_DeInit+0x22>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800022c:	2080      	movs	r0, #128	@ 0x80
 800022e:	2101      	movs	r1, #1
 8000230:	03c0      	lsls	r0, r0, #15
 8000232:	f000 fadf 	bl	80007f4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8000236:	2080      	movs	r0, #128	@ 0x80
 8000238:	2100      	movs	r1, #0
 800023a:	03c0      	lsls	r0, r0, #15
 800023c:	f000 fada 	bl	80007f4 <RCC_AHBPeriphResetCmd>
}
 8000240:	e7c7      	b.n	80001d2 <GPIO_DeInit+0x22>
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	48000400 	.word	0x48000400
 8000248:	48000800 	.word	0x48000800
 800024c:	48000c00 	.word	0x48000c00
 8000250:	48001400 	.word	0x48001400

08000254 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	46de      	mov	lr, fp
 8000258:	4645      	mov	r5, r8
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 800025e:	2401      	movs	r4, #1
{
 8000260:	b5e0      	push	{r5, r6, r7, lr}

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	680b      	ldr	r3, [r1, #0]
    pos = ((uint32_t)0x01) << pinpos;
 8000264:	46a3      	mov	fp, r4
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000266:	3402      	adds	r4, #2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000268:	469c      	mov	ip, r3
 800026a:	2200      	movs	r2, #0
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800026c:	2300      	movs	r3, #0
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800026e:	46a0      	mov	r8, r4
{
 8000270:	b083      	sub	sp, #12
 8000272:	e003      	b.n	800027c <GPIO_Init+0x28>
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000274:	3301      	adds	r3, #1
 8000276:	3202      	adds	r2, #2
 8000278:	2b10      	cmp	r3, #16
 800027a:	d038      	beq.n	80002ee <GPIO_Init+0x9a>
    pos = ((uint32_t)0x01) << pinpos;
 800027c:	465c      	mov	r4, fp
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800027e:	4665      	mov	r5, ip
    pos = ((uint32_t)0x01) << pinpos;
 8000280:	409c      	lsls	r4, r3
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000282:	4025      	ands	r5, r4
    if (currentpin == pos)
 8000284:	42ac      	cmp	r4, r5
 8000286:	d1f5      	bne.n	8000274 <GPIO_Init+0x20>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000288:	4646      	mov	r6, r8
 800028a:	4096      	lsls	r6, r2
 800028c:	43f7      	mvns	r7, r6
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800028e:	790d      	ldrb	r5, [r1, #4]
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000290:	9701      	str	r7, [sp, #4]
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000292:	1e6e      	subs	r6, r5, #1
 8000294:	2e01      	cmp	r6, #1
 8000296:	d814      	bhi.n	80002c2 <GPIO_Init+0x6e>
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000298:	6886      	ldr	r6, [r0, #8]
 800029a:	403e      	ands	r6, r7
 800029c:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800029e:	6886      	ldr	r6, [r0, #8]
 80002a0:	46b2      	mov	sl, r6
 80002a2:	794e      	ldrb	r6, [r1, #5]
 80002a4:	4096      	lsls	r6, r2
 80002a6:	46b1      	mov	r9, r6
 80002a8:	4656      	mov	r6, sl
 80002aa:	464f      	mov	r7, r9
 80002ac:	433e      	orrs	r6, r7
 80002ae:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002b0:	8886      	ldrh	r6, [r0, #4]
 80002b2:	43a6      	bics	r6, r4
 80002b4:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002b6:	798e      	ldrb	r6, [r1, #6]
 80002b8:	8884      	ldrh	r4, [r0, #4]
 80002ba:	409e      	lsls	r6, r3
 80002bc:	4334      	orrs	r4, r6
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002c2:	4095      	lsls	r5, r2
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	6804      	ldr	r4, [r0, #0]
 80002c6:	9e01      	ldr	r6, [sp, #4]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002c8:	3301      	adds	r3, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ca:	4026      	ands	r6, r4
 80002cc:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002ce:	6804      	ldr	r4, [r0, #0]
 80002d0:	4325      	orrs	r5, r4
 80002d2:	6005      	str	r5, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002d4:	4645      	mov	r5, r8
 80002d6:	4095      	lsls	r5, r2
 80002d8:	68c4      	ldr	r4, [r0, #12]
 80002da:	43ac      	bics	r4, r5
 80002dc:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002de:	79cc      	ldrb	r4, [r1, #7]
 80002e0:	68c5      	ldr	r5, [r0, #12]
 80002e2:	4094      	lsls	r4, r2
 80002e4:	432c      	orrs	r4, r5
 80002e6:	60c4      	str	r4, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002e8:	3202      	adds	r2, #2
 80002ea:	2b10      	cmp	r3, #16
 80002ec:	d1c6      	bne.n	800027c <GPIO_Init+0x28>
    }
  }
}
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002fc <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80002fc:	4b02      	ldr	r3, [pc, #8]	@ (8000308 <GPIO_StructInit+0xc>)
 80002fe:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	6043      	str	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
}
 8000306:	4770      	bx	lr
 8000308:	0000ffff 	.word	0x0000ffff

0800030c <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 800030c:	2380      	movs	r3, #128	@ 0x80
{
 800030e:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000310:	025b      	lsls	r3, r3, #9
 8000312:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	430b      	orrs	r3, r1
 8000318:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800031a:	9b01      	ldr	r3, [sp, #4]
 800031c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800031e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000320:	9b01      	ldr	r3, [sp, #4]
 8000322:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000324:	69c3      	ldr	r3, [r0, #28]
 8000326:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000328:	69c3      	ldr	r3, [r0, #28]
 800032a:	9301      	str	r3, [sp, #4]
}
 800032c:	b002      	add	sp, #8
 800032e:	4770      	bx	lr

08000330 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000330:	8a03      	ldrh	r3, [r0, #16]
 8000332:	4019      	ands	r1, r3
 8000334:	0008      	movs	r0, r1
 8000336:	1e43      	subs	r3, r0, #1
 8000338:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 800033a:	b2c0      	uxtb	r0, r0
}
 800033c:	4770      	bx	lr
 800033e:	46c0      	nop			@ (mov r8, r8)

08000340 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000340:	8a00      	ldrh	r0, [r0, #16]
 8000342:	b280      	uxth	r0, r0
}
 8000344:	4770      	bx	lr
 8000346:	46c0      	nop			@ (mov r8, r8)

08000348 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000348:	8a83      	ldrh	r3, [r0, #20]
 800034a:	4019      	ands	r1, r3
 800034c:	0008      	movs	r0, r1
 800034e:	1e43      	subs	r3, r0, #1
 8000350:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000352:	b2c0      	uxtb	r0, r0
}
 8000354:	4770      	bx	lr
 8000356:	46c0      	nop			@ (mov r8, r8)

08000358 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000358:	8a80      	ldrh	r0, [r0, #20]
 800035a:	b280      	uxth	r0, r0
}
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			@ (mov r8, r8)

08000360 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000360:	6181      	str	r1, [r0, #24]
}
 8000362:	4770      	bx	lr

08000364 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000364:	8501      	strh	r1, [r0, #40]	@ 0x28
}
 8000366:	4770      	bx	lr

08000368 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000368:	2a00      	cmp	r2, #0
 800036a:	d001      	beq.n	8000370 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800036c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800036e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000370:	8501      	strh	r1, [r0, #40]	@ 0x28
}
 8000372:	e7fc      	b.n	800036e <GPIO_WriteBit+0x6>

08000374 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000374:	8281      	strh	r1, [r0, #20]
}
 8000376:	4770      	bx	lr

08000378 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000378:	2307      	movs	r3, #7
{
 800037a:	b510      	push	{r4, lr}
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800037c:	240f      	movs	r4, #15
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800037e:	400b      	ands	r3, r1
 8000380:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000382:	409c      	lsls	r4, r3
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000384:	409a      	lsls	r2, r3
 8000386:	08c9      	lsrs	r1, r1, #3
 8000388:	0089      	lsls	r1, r1, #2
 800038a:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800038c:	6a01      	ldr	r1, [r0, #32]
 800038e:	43a1      	bics	r1, r4
 8000390:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000392:	6a01      	ldr	r1, [r0, #32]
 8000394:	430a      	orrs	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000396:	6202      	str	r2, [r0, #32]
}
 8000398:	bd10      	pop	{r4, pc}
 800039a:	46c0      	nop			@ (mov r8, r8)

0800039c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800039c:	2101      	movs	r1, #1
 800039e:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <RCC_DeInit+0x48>)

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80003a0:	4811      	ldr	r0, [pc, #68]	@ (80003e8 <RCC_DeInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80003a8:	685a      	ldr	r2, [r3, #4]
 80003aa:	4002      	ands	r2, r0
 80003ac:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	480e      	ldr	r0, [pc, #56]	@ (80003ec <RCC_DeInit+0x50>)
 80003b2:	4002      	ands	r2, r0
 80003b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	480d      	ldr	r0, [pc, #52]	@ (80003f0 <RCC_DeInit+0x54>)
 80003ba:	4002      	ands	r2, r0
 80003bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <RCC_DeInit+0x58>)
 80003c2:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80003c4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80003c6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80003c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003ca:	4382      	bics	r2, r0
 80003cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80003ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003d0:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <RCC_DeInit+0x5c>)
 80003d2:	4002      	ands	r2, r0
 80003d4:	631a      	str	r2, [r3, #48]	@ 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80003d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003d8:	438a      	bics	r2, r1
 80003da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
}
 80003e0:	4770      	bx	lr
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000
 80003e8:	f8ffb80c 	.word	0xf8ffb80c
 80003ec:	fef6ffff 	.word	0xfef6ffff
 80003f0:	fffbffff 	.word	0xfffbffff
 80003f4:	ffc0ffff 	.word	0xffc0ffff
 80003f8:	fffffeac 	.word	0xfffffeac

080003fc <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80003fc:	2200      	movs	r2, #0
 80003fe:	4b02      	ldr	r3, [pc, #8]	@ (8000408 <RCC_HSEConfig+0xc>)
 8000400:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8000402:	7018      	strb	r0, [r3, #0]

}
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	40021002 	.word	0x40021002

0800040c <RCC_WaitForHSEStartUp>:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 800040c:	2300      	movs	r3, #0
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800040e:	2280      	movs	r2, #128	@ 0x80
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000410:	20a0      	movs	r0, #160	@ 0xa0
{
 8000412:	b082      	sub	sp, #8
    statusreg = RCC->CR;
 8000414:	490b      	ldr	r1, [pc, #44]	@ (8000444 <RCC_WaitForHSEStartUp+0x38>)
  __IO uint32_t StartUpCounter = 0;
 8000416:	9301      	str	r3, [sp, #4]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000418:	0292      	lsls	r2, r2, #10
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800041a:	00c0      	lsls	r0, r0, #3
    statusreg = RCC->CR;
 800041c:	680b      	ldr	r3, [r1, #0]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800041e:	4213      	tst	r3, r2
 8000420:	d009      	beq.n	8000436 <RCC_WaitForHSEStartUp+0x2a>
    StartUpCounter++;  
 8000422:	9b01      	ldr	r3, [sp, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000428:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CR;
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <RCC_WaitForHSEStartUp+0x38>)
 800042c:	6818      	ldr	r0, [r3, #0]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800042e:	0380      	lsls	r0, r0, #14
  return (status);
 8000430:	0fc0      	lsrs	r0, r0, #31
}
 8000432:	b002      	add	sp, #8
 8000434:	4770      	bx	lr
    StartUpCounter++;  
 8000436:	9b01      	ldr	r3, [sp, #4]
 8000438:	3301      	adds	r3, #1
 800043a:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	4283      	cmp	r3, r0
 8000440:	d1ec      	bne.n	800041c <RCC_WaitForHSEStartUp+0x10>
 8000442:	e7f2      	b.n	800042a <RCC_WaitForHSEStartUp+0x1e>
 8000444:	40021000 	.word	0x40021000

08000448 <RCC_AdjustHSICalibrationValue>:
  tmpreg &= ~RCC_CR_HSITRIM;
 8000448:	21f8      	movs	r1, #248	@ 0xf8
  tmpreg = RCC->CR;
 800044a:	4a03      	ldr	r2, [pc, #12]	@ (8000458 <RCC_AdjustHSICalibrationValue+0x10>)
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800044c:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR;
 800044e:	6813      	ldr	r3, [r2, #0]
  tmpreg &= ~RCC_CR_HSITRIM;
 8000450:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000452:	4318      	orrs	r0, r3
  RCC->CR = tmpreg;
 8000454:	6010      	str	r0, [r2, #0]
}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <RCC_HSICmd>:
    RCC->CR |= RCC_CR_HSION;
 800045c:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <RCC_HSICmd+0x18>)
 800045e:	2101      	movs	r1, #1
 8000460:	6813      	ldr	r3, [r2, #0]
  if (NewState != DISABLE)
 8000462:	2800      	cmp	r0, #0
 8000464:	d002      	beq.n	800046c <RCC_HSICmd+0x10>
    RCC->CR |= RCC_CR_HSION;
 8000466:	430b      	orrs	r3, r1
 8000468:	6013      	str	r3, [r2, #0]
}
 800046a:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_HSION;
 800046c:	438b      	bics	r3, r1
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	e7fb      	b.n	800046a <RCC_HSICmd+0xe>
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <RCC_AdjustHSI14CalibrationValue>:
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000478:	21f8      	movs	r1, #248	@ 0xf8
  tmpreg = RCC->CR2;
 800047a:	4a03      	ldr	r2, [pc, #12]	@ (8000488 <RCC_AdjustHSI14CalibrationValue+0x10>)
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800047c:	00c0      	lsls	r0, r0, #3
  tmpreg = RCC->CR2;
 800047e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000480:	438b      	bics	r3, r1
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000482:	4318      	orrs	r0, r3
  RCC->CR2 = tmpreg;
 8000484:	6350      	str	r0, [r2, #52]	@ 0x34
}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000

0800048c <RCC_HSI14Cmd>:
    RCC->CR2 |= RCC_CR2_HSI14ON;
 800048c:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <RCC_HSI14Cmd+0x18>)
 800048e:	2101      	movs	r1, #1
 8000490:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  if (NewState != DISABLE)
 8000492:	2800      	cmp	r0, #0
 8000494:	d002      	beq.n	800049c <RCC_HSI14Cmd+0x10>
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000496:	430b      	orrs	r3, r1
 8000498:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800049a:	4770      	bx	lr
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800049c:	438b      	bics	r3, r1
 800049e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80004a0:	e7fb      	b.n	800049a <RCC_HSI14Cmd+0xe>
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <RCC_HSI14ADCRequestCmd>:
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80004a8:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <RCC_HSI14ADCRequestCmd+0x18>)
 80004aa:	2104      	movs	r1, #4
 80004ac:	6b53      	ldr	r3, [r2, #52]	@ 0x34
  if (NewState != DISABLE)
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d002      	beq.n	80004b8 <RCC_HSI14ADCRequestCmd+0x10>
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80004b2:	438b      	bics	r3, r1
 80004b4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80004b6:	4770      	bx	lr
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80004bc:	e7fb      	b.n	80004b6 <RCC_HSI14ADCRequestCmd+0xe>
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000

080004c4 <RCC_LSEConfig>:
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80004c4:	2101      	movs	r1, #1
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <RCC_LSEConfig+0x1c>)
 80004c8:	6a1a      	ldr	r2, [r3, #32]
 80004ca:	438a      	bics	r2, r1
 80004cc:	621a      	str	r2, [r3, #32]
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80004ce:	6a1a      	ldr	r2, [r3, #32]
 80004d0:	3103      	adds	r1, #3
 80004d2:	438a      	bics	r2, r1
 80004d4:	621a      	str	r2, [r3, #32]
  RCC->BDCR |= RCC_LSE;
 80004d6:	6a1a      	ldr	r2, [r3, #32]
 80004d8:	4302      	orrs	r2, r0
 80004da:	621a      	str	r2, [r3, #32]
}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <RCC_LSEDriveConfig>:
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80004e4:	2118      	movs	r1, #24
 80004e6:	4b04      	ldr	r3, [pc, #16]	@ (80004f8 <RCC_LSEDriveConfig+0x14>)
 80004e8:	6a1a      	ldr	r2, [r3, #32]
 80004ea:	438a      	bics	r2, r1
 80004ec:	621a      	str	r2, [r3, #32]
  RCC->BDCR |= RCC_LSEDrive;
 80004ee:	6a1a      	ldr	r2, [r3, #32]
 80004f0:	4302      	orrs	r2, r0
 80004f2:	621a      	str	r2, [r3, #32]
}
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	40021000 	.word	0x40021000

080004fc <RCC_LSICmd>:
    RCC->CSR |= RCC_CSR_LSION;
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <RCC_LSICmd+0x18>)
 80004fe:	2101      	movs	r1, #1
 8000500:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  if (NewState != DISABLE)
 8000502:	2800      	cmp	r0, #0
 8000504:	d002      	beq.n	800050c <RCC_LSICmd+0x10>
    RCC->CSR |= RCC_CSR_LSION;
 8000506:	430b      	orrs	r3, r1
 8000508:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800050a:	4770      	bx	lr
    RCC->CSR &= ~RCC_CSR_LSION;
 800050c:	438b      	bics	r3, r1
 800050e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000510:	e7fb      	b.n	800050a <RCC_LSICmd+0xe>
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <RCC_PLLConfig>:
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <RCC_PLLConfig+0x18>)
{
 800051a:	b510      	push	{r4, lr}
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 800051c:	6853      	ldr	r3, [r2, #4]
 800051e:	4c05      	ldr	r4, [pc, #20]	@ (8000534 <RCC_PLLConfig+0x1c>)
 8000520:	4023      	ands	r3, r4
 8000522:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 8000524:	6853      	ldr	r3, [r2, #4]
 8000526:	430b      	orrs	r3, r1
 8000528:	4303      	orrs	r3, r0
 800052a:	6053      	str	r3, [r2, #4]
}
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	40021000 	.word	0x40021000
 8000534:	ffc2ffff 	.word	0xffc2ffff

08000538 <RCC_PLLCmd>:
    RCC->CR |= RCC_CR_PLLON;
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <RCC_PLLCmd+0x1c>)
  if (NewState != DISABLE)
 800053a:	2800      	cmp	r0, #0
 800053c:	d005      	beq.n	800054a <RCC_PLLCmd+0x12>
    RCC->CR |= RCC_CR_PLLON;
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	045b      	lsls	r3, r3, #17
 8000544:	430b      	orrs	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_PLLON;
 800054a:	6813      	ldr	r3, [r2, #0]
 800054c:	4902      	ldr	r1, [pc, #8]	@ (8000558 <RCC_PLLCmd+0x20>)
 800054e:	400b      	ands	r3, r1
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	e7f9      	b.n	8000548 <RCC_PLLCmd+0x10>
 8000554:	40021000 	.word	0x40021000
 8000558:	feffffff 	.word	0xfeffffff

0800055c <RCC_PREDIV1Config>:
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800055c:	210f      	movs	r1, #15
  tmpreg = RCC->CFGR2;
 800055e:	4a03      	ldr	r2, [pc, #12]	@ (800056c <RCC_PREDIV1Config+0x10>)
 8000560:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8000562:	438b      	bics	r3, r1
  tmpreg |= RCC_PREDIV1_Div;
 8000564:	4303      	orrs	r3, r0
  RCC->CFGR2 = tmpreg;
 8000566:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <RCC_ClockSecuritySystemCmd>:
    RCC->CR |= RCC_CR_CSSON;
 8000570:	4a06      	ldr	r2, [pc, #24]	@ (800058c <RCC_ClockSecuritySystemCmd+0x1c>)
  if (NewState != DISABLE)
 8000572:	2800      	cmp	r0, #0
 8000574:	d005      	beq.n	8000582 <RCC_ClockSecuritySystemCmd+0x12>
    RCC->CR |= RCC_CR_CSSON;
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	6811      	ldr	r1, [r2, #0]
 800057a:	031b      	lsls	r3, r3, #12
 800057c:	430b      	orrs	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	4770      	bx	lr
    RCC->CR &= ~RCC_CR_CSSON;
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	4902      	ldr	r1, [pc, #8]	@ (8000590 <RCC_ClockSecuritySystemCmd+0x20>)
 8000586:	400b      	ands	r3, r1
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	e7f9      	b.n	8000580 <RCC_ClockSecuritySystemCmd+0x10>
 800058c:	40021000 	.word	0x40021000
 8000590:	fff7ffff 	.word	0xfff7ffff

08000594 <RCC_MCOConfig>:
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8000594:	4b01      	ldr	r3, [pc, #4]	@ (800059c <RCC_MCOConfig+0x8>)
 8000596:	7018      	strb	r0, [r3, #0]
}
 8000598:	4770      	bx	lr
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	40021007 	.word	0x40021007

080005a0 <RCC_SYSCLKConfig>:
  tmpreg &= ~RCC_CFGR_SW;
 80005a0:	2103      	movs	r1, #3
  tmpreg = RCC->CFGR;
 80005a2:	4a03      	ldr	r2, [pc, #12]	@ (80005b0 <RCC_SYSCLKConfig+0x10>)
 80005a4:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_SW;
 80005a6:	438b      	bics	r3, r1
  tmpreg |= RCC_SYSCLKSource;
 80005a8:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80005aa:	6053      	str	r3, [r2, #4]
}
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000

080005b4 <RCC_GetSYSCLKSource>:
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80005b4:	200c      	movs	r0, #12
 80005b6:	4b02      	ldr	r3, [pc, #8]	@ (80005c0 <RCC_GetSYSCLKSource+0xc>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	4018      	ands	r0, r3
}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <RCC_HCLKConfig>:
  tmpreg &= ~RCC_CFGR_HPRE;
 80005c4:	21f0      	movs	r1, #240	@ 0xf0
  tmpreg = RCC->CFGR;
 80005c6:	4a03      	ldr	r2, [pc, #12]	@ (80005d4 <RCC_HCLKConfig+0x10>)
 80005c8:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_HPRE;
 80005ca:	438b      	bics	r3, r1
  tmpreg |= RCC_SYSCLK;
 80005cc:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80005ce:	6053      	str	r3, [r2, #4]
}
 80005d0:	4770      	bx	lr
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <RCC_PCLKConfig>:
  tmpreg = RCC->CFGR;
 80005d8:	4a03      	ldr	r2, [pc, #12]	@ (80005e8 <RCC_PCLKConfig+0x10>)
  tmpreg &= ~RCC_CFGR_PPRE;
 80005da:	4904      	ldr	r1, [pc, #16]	@ (80005ec <RCC_PCLKConfig+0x14>)
  tmpreg = RCC->CFGR;
 80005dc:	6853      	ldr	r3, [r2, #4]
  tmpreg &= ~RCC_CFGR_PPRE;
 80005de:	400b      	ands	r3, r1
  tmpreg |= RCC_HCLK;
 80005e0:	4303      	orrs	r3, r0
  RCC->CFGR = tmpreg;
 80005e2:	6053      	str	r3, [r2, #4]
}
 80005e4:	4770      	bx	lr
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000
 80005ec:	fffff8ff 	.word	0xfffff8ff

080005f0 <RCC_ADCCLKConfig>:
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <RCC_ADCCLKConfig+0x28>)
 80005f2:	490a      	ldr	r1, [pc, #40]	@ (800061c <RCC_ADCCLKConfig+0x2c>)
 80005f4:	685a      	ldr	r2, [r3, #4]
 80005f6:	400a      	ands	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 80005fa:	6859      	ldr	r1, [r3, #4]
 80005fc:	0402      	lsls	r2, r0, #16
 80005fe:	0c12      	lsrs	r2, r2, #16
 8000600:	430a      	orrs	r2, r1
 8000602:	605a      	str	r2, [r3, #4]
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000606:	4906      	ldr	r1, [pc, #24]	@ (8000620 <RCC_ADCCLKConfig+0x30>)
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000608:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800060a:	400a      	ands	r2, r1
 800060c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 800060e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000610:	4310      	orrs	r0, r2
 8000612:	6318      	str	r0, [r3, #48]	@ 0x30
}
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	40021000 	.word	0x40021000
 800061c:	ffffbfff 	.word	0xffffbfff
 8000620:	fffffeff 	.word	0xfffffeff

08000624 <RCC_CECCLKConfig>:
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <RCC_CECCLKConfig+0x14>)
 8000628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800062a:	438a      	bics	r2, r1
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->CFGR3 |= RCC_CECCLK;
 800062e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000630:	4302      	orrs	r2, r0
 8000632:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000634:	4770      	bx	lr
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	40021000 	.word	0x40021000

0800063c <RCC_I2CCLKConfig>:
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 800063c:	2110      	movs	r1, #16
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <RCC_I2CCLKConfig+0x14>)
 8000640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000642:	438a      	bics	r2, r1
 8000644:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->CFGR3 |= RCC_I2CCLK;
 8000646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000648:	4302      	orrs	r2, r0
 800064a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800064c:	4770      	bx	lr
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <RCC_USARTCLKConfig>:
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8000654:	2103      	movs	r1, #3
 8000656:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <RCC_USARTCLKConfig+0x14>)
 8000658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800065a:	438a      	bics	r2, r1
 800065c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->CFGR3 |= RCC_USARTCLK;
 800065e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000660:	4302      	orrs	r2, r0
 8000662:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	40021000 	.word	0x40021000

0800066c <RCC_GetClocksFreq>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800066c:	230c      	movs	r3, #12
 800066e:	4a34      	ldr	r2, [pc, #208]	@ (8000740 <RCC_GetClocksFreq+0xd4>)
{
 8000670:	b570      	push	{r4, r5, r6, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000672:	6851      	ldr	r1, [r2, #4]
{
 8000674:	0004      	movs	r4, r0
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000676:	400b      	ands	r3, r1
  switch (tmp)
 8000678:	2b08      	cmp	r3, #8
 800067a:	d042      	beq.n	8000702 <RCC_GetClocksFreq+0x96>
 800067c:	4831      	ldr	r0, [pc, #196]	@ (8000744 <RCC_GetClocksFreq+0xd8>)
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800067e:	0002      	movs	r2, r0
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000680:	492f      	ldr	r1, [pc, #188]	@ (8000740 <RCC_GetClocksFreq+0xd4>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000682:	6020      	str	r0, [r4, #0]
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000684:	684b      	ldr	r3, [r1, #4]
  presc = APBAHBPrescTable[tmp]; 
 8000686:	4d30      	ldr	r5, [pc, #192]	@ (8000748 <RCC_GetClocksFreq+0xdc>)
  tmp = tmp >> 4;
 8000688:	061b      	lsls	r3, r3, #24
 800068a:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 800068c:	5ceb      	ldrb	r3, [r5, r3]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800068e:	40da      	lsrs	r2, r3
 8000690:	6062      	str	r2, [r4, #4]
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000692:	684b      	ldr	r3, [r1, #4]
  tmp = tmp >> 8;
 8000694:	055b      	lsls	r3, r3, #21
 8000696:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 8000698:	5ceb      	ldrb	r3, [r5, r3]
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800069a:	40da      	lsrs	r2, r3
 800069c:	60a2      	str	r2, [r4, #8]
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 800069e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	d51b      	bpl.n	80006dc <RCC_GetClocksFreq+0x70>
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80006a4:	6849      	ldr	r1, [r1, #4]
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80006a6:	0893      	lsrs	r3, r2, #2
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80006a8:	0449      	lsls	r1, r1, #17
 80006aa:	d528      	bpl.n	80006fe <RCC_GetClocksFreq+0x92>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80006ac:	2511      	movs	r5, #17
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80006ae:	4924      	ldr	r1, [pc, #144]	@ (8000740 <RCC_GetClocksFreq+0xd4>)
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80006b0:	60e3      	str	r3, [r4, #12]
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80006b2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80006b4:	065b      	lsls	r3, r3, #25
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	43ab      	bics	r3, r5
 80006ba:	4d24      	ldr	r5, [pc, #144]	@ (800074c <RCC_GetClocksFreq+0xe0>)
 80006bc:	46ac      	mov	ip, r5
 80006be:	4463      	add	r3, ip
 80006c0:	6123      	str	r3, [r4, #16]
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80006c2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006c4:	0001      	movs	r1, r0
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80006c6:	06db      	lsls	r3, r3, #27
 80006c8:	d400      	bmi.n	80006cc <RCC_GetClocksFreq+0x60>
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80006ca:	491e      	ldr	r1, [pc, #120]	@ (8000744 <RCC_GetClocksFreq+0xd8>)
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80006cc:	2303      	movs	r3, #3
 80006ce:	6161      	str	r1, [r4, #20]
 80006d0:	491b      	ldr	r1, [pc, #108]	@ (8000740 <RCC_GetClocksFreq+0xd4>)
 80006d2:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 80006d4:	422b      	tst	r3, r5
 80006d6:	d103      	bne.n	80006e0 <RCC_GetClocksFreq+0x74>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80006d8:	61a2      	str	r2, [r4, #24]
}
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <RCC_GetClocksFreq+0xe4>)
 80006de:	e7e5      	b.n	80006ac <RCC_GetClocksFreq+0x40>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80006e0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80006e2:	401a      	ands	r2, r3
 80006e4:	2a01      	cmp	r2, #1
 80006e6:	d01c      	beq.n	8000722 <RCC_GetClocksFreq+0xb6>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80006e8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80006ea:	401a      	ands	r2, r3
 80006ec:	2a02      	cmp	r2, #2
 80006ee:	d022      	beq.n	8000736 <RCC_GetClocksFreq+0xca>
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80006f0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d1f0      	bne.n	80006da <RCC_GetClocksFreq+0x6e>
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <RCC_GetClocksFreq+0xd8>)
 80006fa:	61a3      	str	r3, [r4, #24]
}
 80006fc:	e7ed      	b.n	80006da <RCC_GetClocksFreq+0x6e>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80006fe:	0853      	lsrs	r3, r2, #1
 8000700:	e7d4      	b.n	80006ac <RCC_GetClocksFreq+0x40>
      pllmull = ( pllmull >> 18) + 2;
 8000702:	210f      	movs	r1, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000704:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000706:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000708:	0c80      	lsrs	r0, r0, #18
 800070a:	4008      	ands	r0, r1
 800070c:	1c85      	adds	r5, r0, #2
      if (pllsource == 0x00)
 800070e:	03db      	lsls	r3, r3, #15
 8000710:	d409      	bmi.n	8000726 <RCC_GetClocksFreq+0xba>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000712:	016a      	lsls	r2, r5, #5
 8000714:	1b52      	subs	r2, r2, r5
 8000716:	0193      	lsls	r3, r2, #6
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	195b      	adds	r3, r3, r5
 800071e:	0218      	lsls	r0, r3, #8
 8000720:	e7ad      	b.n	800067e <RCC_GetClocksFreq+0x12>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000722:	61a0      	str	r0, [r4, #24]
 8000724:	e7d9      	b.n	80006da <RCC_GetClocksFreq+0x6e>
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000726:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <RCC_GetClocksFreq+0xd8>)
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800072a:	4019      	ands	r1, r3
 800072c:	3101      	adds	r1, #1
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 800072e:	f000 fb51 	bl	8000dd4 <__udivsi3>
 8000732:	4368      	muls	r0, r5
 8000734:	e7a3      	b.n	800067e <RCC_GetClocksFreq+0x12>
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	61a3      	str	r3, [r4, #24]
 800073c:	e7cd      	b.n	80006da <RCC_GetClocksFreq+0x6e>
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	007a1200 	.word	0x007a1200
 8000748:	08003f58 	.word	0x08003f58
 800074c:	00008012 	.word	0x00008012
 8000750:	00d59f80 	.word	0x00d59f80

08000754 <RCC_RTCCLKConfig>:
  RCC->BDCR |= RCC_RTCCLKSource;
 8000754:	4a02      	ldr	r2, [pc, #8]	@ (8000760 <RCC_RTCCLKConfig+0xc>)
 8000756:	6a13      	ldr	r3, [r2, #32]
 8000758:	4303      	orrs	r3, r0
 800075a:	6213      	str	r3, [r2, #32]
}
 800075c:	4770      	bx	lr
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <RCC_RTCCLKCmd>:
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000764:	4a06      	ldr	r2, [pc, #24]	@ (8000780 <RCC_RTCCLKCmd+0x1c>)
  if (NewState != DISABLE)
 8000766:	2800      	cmp	r0, #0
 8000768:	d005      	beq.n	8000776 <RCC_RTCCLKCmd+0x12>
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800076a:	2380      	movs	r3, #128	@ 0x80
 800076c:	6a11      	ldr	r1, [r2, #32]
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	430b      	orrs	r3, r1
 8000772:	6213      	str	r3, [r2, #32]
}
 8000774:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000776:	6a13      	ldr	r3, [r2, #32]
 8000778:	4902      	ldr	r1, [pc, #8]	@ (8000784 <RCC_RTCCLKCmd+0x20>)
 800077a:	400b      	ands	r3, r1
 800077c:	6213      	str	r3, [r2, #32]
}
 800077e:	e7f9      	b.n	8000774 <RCC_RTCCLKCmd+0x10>
 8000780:	40021000 	.word	0x40021000
 8000784:	ffff7fff 	.word	0xffff7fff

08000788 <RCC_BackupResetCmd>:
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <RCC_BackupResetCmd+0x1c>)
  if (NewState != DISABLE)
 800078a:	2800      	cmp	r0, #0
 800078c:	d005      	beq.n	800079a <RCC_BackupResetCmd+0x12>
    RCC->BDCR |= RCC_BDCR_BDRST;
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	6a11      	ldr	r1, [r2, #32]
 8000792:	025b      	lsls	r3, r3, #9
 8000794:	430b      	orrs	r3, r1
 8000796:	6213      	str	r3, [r2, #32]
}
 8000798:	4770      	bx	lr
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 800079a:	6a13      	ldr	r3, [r2, #32]
 800079c:	4902      	ldr	r1, [pc, #8]	@ (80007a8 <RCC_BackupResetCmd+0x20>)
 800079e:	400b      	ands	r3, r1
 80007a0:	6213      	str	r3, [r2, #32]
}
 80007a2:	e7f9      	b.n	8000798 <RCC_BackupResetCmd+0x10>
 80007a4:	40021000 	.word	0x40021000
 80007a8:	fffeffff 	.word	0xfffeffff

080007ac <RCC_AHBPeriphClockCmd>:
    RCC->AHBENR |= RCC_AHBPeriph;
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <RCC_AHBPeriphClockCmd+0x14>)
 80007ae:	6953      	ldr	r3, [r2, #20]
  if (NewState != DISABLE)
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d002      	beq.n	80007ba <RCC_AHBPeriphClockCmd+0xe>
    RCC->AHBENR |= RCC_AHBPeriph;
 80007b4:	4303      	orrs	r3, r0
 80007b6:	6153      	str	r3, [r2, #20]
}
 80007b8:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80007ba:	4383      	bics	r3, r0
 80007bc:	6153      	str	r3, [r2, #20]
}
 80007be:	e7fb      	b.n	80007b8 <RCC_AHBPeriphClockCmd+0xc>
 80007c0:	40021000 	.word	0x40021000

080007c4 <RCC_APB2PeriphClockCmd>:
    RCC->APB2ENR |= RCC_APB2Periph;
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <RCC_APB2PeriphClockCmd+0x14>)
 80007c6:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d002      	beq.n	80007d2 <RCC_APB2PeriphClockCmd+0xe>
    RCC->APB2ENR |= RCC_APB2Periph;
 80007cc:	4303      	orrs	r3, r0
 80007ce:	6193      	str	r3, [r2, #24]
}
 80007d0:	4770      	bx	lr
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007d2:	4383      	bics	r3, r0
 80007d4:	6193      	str	r3, [r2, #24]
}
 80007d6:	e7fb      	b.n	80007d0 <RCC_APB2PeriphClockCmd+0xc>
 80007d8:	40021000 	.word	0x40021000

080007dc <RCC_APB1PeriphClockCmd>:
    RCC->APB1ENR |= RCC_APB1Periph;
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <RCC_APB1PeriphClockCmd+0x14>)
 80007de:	69d3      	ldr	r3, [r2, #28]
  if (NewState != DISABLE)
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d002      	beq.n	80007ea <RCC_APB1PeriphClockCmd+0xe>
    RCC->APB1ENR |= RCC_APB1Periph;
 80007e4:	4303      	orrs	r3, r0
 80007e6:	61d3      	str	r3, [r2, #28]
}
 80007e8:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007ea:	4383      	bics	r3, r0
 80007ec:	61d3      	str	r3, [r2, #28]
}
 80007ee:	e7fb      	b.n	80007e8 <RCC_APB1PeriphClockCmd+0xc>
 80007f0:	40021000 	.word	0x40021000

080007f4 <RCC_AHBPeriphResetCmd>:
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <RCC_AHBPeriphResetCmd+0x14>)
 80007f6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  if (NewState != DISABLE)
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d002      	beq.n	8000802 <RCC_AHBPeriphResetCmd+0xe>
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007fc:	4303      	orrs	r3, r0
 80007fe:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000800:	4770      	bx	lr
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000802:	4383      	bics	r3, r0
 8000804:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000806:	e7fb      	b.n	8000800 <RCC_AHBPeriphResetCmd+0xc>
 8000808:	40021000 	.word	0x40021000

0800080c <RCC_APB2PeriphResetCmd>:
    RCC->APB2RSTR |= RCC_APB2Periph;
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <RCC_APB2PeriphResetCmd+0x14>)
 800080e:	68d3      	ldr	r3, [r2, #12]
  if (NewState != DISABLE)
 8000810:	2900      	cmp	r1, #0
 8000812:	d002      	beq.n	800081a <RCC_APB2PeriphResetCmd+0xe>
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000814:	4303      	orrs	r3, r0
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	4770      	bx	lr
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800081a:	4383      	bics	r3, r0
 800081c:	60d3      	str	r3, [r2, #12]
}
 800081e:	e7fb      	b.n	8000818 <RCC_APB2PeriphResetCmd+0xc>
 8000820:	40021000 	.word	0x40021000

08000824 <RCC_APB1PeriphResetCmd>:
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <RCC_APB1PeriphResetCmd+0x14>)
 8000826:	6913      	ldr	r3, [r2, #16]
  if (NewState != DISABLE)
 8000828:	2900      	cmp	r1, #0
 800082a:	d002      	beq.n	8000832 <RCC_APB1PeriphResetCmd+0xe>
    RCC->APB1RSTR |= RCC_APB1Periph;
 800082c:	4303      	orrs	r3, r0
 800082e:	6113      	str	r3, [r2, #16]
}
 8000830:	4770      	bx	lr
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000832:	4383      	bics	r3, r0
 8000834:	6113      	str	r3, [r2, #16]
}
 8000836:	e7fb      	b.n	8000830 <RCC_APB1PeriphResetCmd+0xc>
 8000838:	40021000 	.word	0x40021000

0800083c <RCC_ITConfig>:
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <RCC_ITConfig+0x14>)
 800083e:	7813      	ldrb	r3, [r2, #0]
  if (NewState != DISABLE)
 8000840:	2900      	cmp	r1, #0
 8000842:	d002      	beq.n	800084a <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000844:	4303      	orrs	r3, r0
 8000846:	7013      	strb	r3, [r2, #0]
}
 8000848:	4770      	bx	lr
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 800084a:	4383      	bics	r3, r0
 800084c:	7013      	strb	r3, [r2, #0]
}
 800084e:	e7fb      	b.n	8000848 <RCC_ITConfig+0xc>
 8000850:	40021009 	.word	0x40021009

08000854 <RCC_GetFlagStatus>:
  tmp = RCC_FLAG >> 5;
 8000854:	0943      	lsrs	r3, r0, #5
  if (tmp == 0)               /* The flag to check is in CR register */
 8000856:	d107      	bne.n	8000868 <RCC_GetFlagStatus+0x14>
    statusreg = RCC->CR;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <RCC_GetFlagStatus+0x30>)
 800085a:	681a      	ldr	r2, [r3, #0]
  tmp = RCC_FLAG & FLAG_MASK;
 800085c:	231f      	movs	r3, #31
 800085e:	4003      	ands	r3, r0
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000860:	40da      	lsrs	r2, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000862:	2001      	movs	r0, #1
 8000864:	4010      	ands	r0, r2
}
 8000866:	4770      	bx	lr
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000868:	2b01      	cmp	r3, #1
 800086a:	d004      	beq.n	8000876 <RCC_GetFlagStatus+0x22>
  else if (tmp == 2)          /* The flag to check is in CSR register */
 800086c:	2b02      	cmp	r3, #2
 800086e:	d005      	beq.n	800087c <RCC_GetFlagStatus+0x28>
    statusreg = RCC->CR2;
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <RCC_GetFlagStatus+0x30>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000874:	e7f2      	b.n	800085c <RCC_GetFlagStatus+0x8>
    statusreg = RCC->BDCR;
 8000876:	4b03      	ldr	r3, [pc, #12]	@ (8000884 <RCC_GetFlagStatus+0x30>)
 8000878:	6a1a      	ldr	r2, [r3, #32]
 800087a:	e7ef      	b.n	800085c <RCC_GetFlagStatus+0x8>
    statusreg = RCC->CSR;
 800087c:	4b01      	ldr	r3, [pc, #4]	@ (8000884 <RCC_GetFlagStatus+0x30>)
 800087e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000880:	e7ec      	b.n	800085c <RCC_GetFlagStatus+0x8>
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	40021000 	.word	0x40021000

08000888 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	4a03      	ldr	r2, [pc, #12]	@ (8000898 <RCC_ClearFlag+0x10>)
 800088c:	045b      	lsls	r3, r3, #17
 800088e:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8000890:	430b      	orrs	r3, r1
 8000892:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000894:	4770      	bx	lr
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <RCC_GetITStatus+0x10>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4003      	ands	r3, r0
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	4193      	sbcs	r3, r2
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80008a6:	b2d8      	uxtb	r0, r3
}
 80008a8:	4770      	bx	lr
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000

080008b0 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 80008b0:	4b01      	ldr	r3, [pc, #4]	@ (80008b8 <RCC_ClearITPendingBit+0x8>)
 80008b2:	7018      	strb	r0, [r3, #0]
}
 80008b4:	4770      	bx	lr
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	4002100a 	.word	0x4002100a

080008bc <USART_DeInit>:
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <USART_DeInit+0x3c>)
{
 80008be:	b510      	push	{r4, lr}
  if (USARTx == USART1)
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d003      	beq.n	80008cc <USART_DeInit+0x10>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else 
  {
    if  (USARTx == USART2)
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <USART_DeInit+0x40>)
 80008c6:	4298      	cmp	r0, r3
 80008c8:	d00b      	beq.n	80008e2 <USART_DeInit+0x26>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 80008ca:	bd10      	pop	{r4, pc}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80008cc:	2080      	movs	r0, #128	@ 0x80
 80008ce:	2101      	movs	r1, #1
 80008d0:	01c0      	lsls	r0, r0, #7
 80008d2:	f7ff ff9b 	bl	800080c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80008d6:	2080      	movs	r0, #128	@ 0x80
 80008d8:	2100      	movs	r1, #0
 80008da:	01c0      	lsls	r0, r0, #7
 80008dc:	f7ff ff96 	bl	800080c <RCC_APB2PeriphResetCmd>
 80008e0:	e7f3      	b.n	80008ca <USART_DeInit+0xe>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80008e2:	2080      	movs	r0, #128	@ 0x80
 80008e4:	2101      	movs	r1, #1
 80008e6:	0280      	lsls	r0, r0, #10
 80008e8:	f7ff ff9c 	bl	8000824 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80008ec:	2080      	movs	r0, #128	@ 0x80
 80008ee:	2100      	movs	r1, #0
 80008f0:	0280      	lsls	r0, r0, #10
 80008f2:	f7ff ff97 	bl	8000824 <RCC_APB1PeriphResetCmd>
}
 80008f6:	e7e8      	b.n	80008ca <USART_DeInit+0xe>
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40004400 	.word	0x40004400

08000900 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000900:	2201      	movs	r2, #1
{
 8000902:	b530      	push	{r4, r5, lr}
 8000904:	000d      	movs	r5, r1
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000906:	6803      	ldr	r3, [r0, #0]
{
 8000908:	b089      	sub	sp, #36	@ 0x24
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800090a:	4393      	bics	r3, r2
 800090c:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800090e:	6843      	ldr	r3, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000910:	4a1d      	ldr	r2, [pc, #116]	@ (8000988 <USART_Init+0x88>)
{
 8000912:	0004      	movs	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000914:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000916:	688a      	ldr	r2, [r1, #8]
 8000918:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800091a:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800091c:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <USART_Init+0x8c>)
 8000920:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000922:	684b      	ldr	r3, [r1, #4]
 8000924:	68c9      	ldr	r1, [r1, #12]
 8000926:	430b      	orrs	r3, r1
 8000928:	6929      	ldr	r1, [r5, #16]
 800092a:	430b      	orrs	r3, r1
 800092c:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 800092e:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000930:	6883      	ldr	r3, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000932:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <USART_Init+0x90>)
 8000934:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000936:	696a      	ldr	r2, [r5, #20]
 8000938:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800093a:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800093c:	a801      	add	r0, sp, #4
 800093e:	f7ff fe95 	bl	800066c <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <USART_Init+0x94>)
 8000944:	429c      	cmp	r4, r3
 8000946:	d01d      	beq.n	8000984 <USART_Init+0x84>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8000948:	9803      	ldr	r0, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800094a:	6823      	ldr	r3, [r4, #0]
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800094c:	682d      	ldr	r5, [r5, #0]
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800094e:	041b      	lsls	r3, r3, #16
 8000950:	d514      	bpl.n	800097c <USART_Init+0x7c>
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000952:	0029      	movs	r1, r5
 8000954:	0040      	lsls	r0, r0, #1
 8000956:	f000 fac3 	bl	8000ee0 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 800095a:	2300      	movs	r3, #0
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800095c:	086d      	lsrs	r5, r5, #1
    divider++;
 800095e:	42a9      	cmp	r1, r5
 8000960:	415b      	adcs	r3, r3
 8000962:	18c0      	adds	r0, r0, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	d504      	bpl.n	8000974 <USART_Init+0x74>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <USART_Init+0x98>)
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800096c:	0703      	lsls	r3, r0, #28
 800096e:	0f5b      	lsrs	r3, r3, #29
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000970:	4010      	ands	r0, r2
 8000972:	4318      	orrs	r0, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000974:	b280      	uxth	r0, r0
 8000976:	81a0      	strh	r0, [r4, #12]
}
 8000978:	b009      	add	sp, #36	@ 0x24
 800097a:	bd30      	pop	{r4, r5, pc}
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800097c:	0029      	movs	r1, r5
 800097e:	f000 faaf 	bl	8000ee0 <__aeabi_uidivmod>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000982:	e7ea      	b.n	800095a <USART_Init+0x5a>
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000984:	9807      	ldr	r0, [sp, #28]
 8000986:	e7e0      	b.n	800094a <USART_Init+0x4a>
 8000988:	ffffcfff 	.word	0xffffcfff
 800098c:	ffffe9f3 	.word	0xffffe9f3
 8000990:	fffffcff 	.word	0xfffffcff
 8000994:	40013800 	.word	0x40013800
 8000998:	0000fff0 	.word	0x0000fff0

0800099c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800099c:	2396      	movs	r3, #150	@ 0x96
 800099e:	019b      	lsls	r3, r3, #6
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009a0:	220c      	movs	r2, #12
  USART_InitStruct->USART_BaudRate = 9600;
 80009a2:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80009a4:	2300      	movs	r3, #0
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009a6:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80009a8:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80009aa:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80009ac:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80009ae:	6143      	str	r3, [r0, #20]
}
 80009b0:	4770      	bx	lr
 80009b2:	46c0      	nop			@ (mov r8, r8)

080009b4 <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009b4:	6842      	ldr	r2, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <USART_ClockInit+0x1c>)
{
 80009b8:	b510      	push	{r4, lr}
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80009ba:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009bc:	684c      	ldr	r4, [r1, #4]
 80009be:	680b      	ldr	r3, [r1, #0]
 80009c0:	4323      	orrs	r3, r4
 80009c2:	688c      	ldr	r4, [r1, #8]
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80009c4:	68c9      	ldr	r1, [r1, #12]
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009c6:	4323      	orrs	r3, r4
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 80009c8:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009ca:	4313      	orrs	r3, r2
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80009cc:	6043      	str	r3, [r0, #4]
}
 80009ce:	bd10      	pop	{r4, pc}
 80009d0:	fffff0ff 	.word	0xfffff0ff

080009d4 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80009d4:	2300      	movs	r3, #0
 80009d6:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80009d8:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80009da:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80009dc:	60c3      	str	r3, [r0, #12]
}
 80009de:	4770      	bx	lr

080009e0 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009e0:	2201      	movs	r2, #1
 80009e2:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80009e4:	2900      	cmp	r1, #0
 80009e6:	d002      	beq.n	80009ee <USART_Cmd+0xe>
    USARTx->CR1 |= USART_CR1_UE;
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 80009ec:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80009ee:	4393      	bics	r3, r2
 80009f0:	6003      	str	r3, [r0, #0]
}
 80009f2:	e7fb      	b.n	80009ec <USART_Cmd+0xc>

080009f4 <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80009f4:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d002      	beq.n	8000a00 <USART_DirectionModeCmd+0xc>
    USARTx->CR1 |= USART_DirectionMode;
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6003      	str	r3, [r0, #0]
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
  }
}
 80009fe:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8000a00:	438b      	bics	r3, r1
 8000a02:	6003      	str	r3, [r0, #0]
}
 8000a04:	e7fb      	b.n	80009fe <USART_DirectionModeCmd+0xa>
 8000a06:	46c0      	nop			@ (mov r8, r8)

08000a08 <USART_OverSampling8Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d005      	beq.n	8000a18 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	6802      	ldr	r2, [r0, #0]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	4313      	orrs	r3, r2
 8000a14:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
  }
}  
 8000a16:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000a18:	6803      	ldr	r3, [r0, #0]
 8000a1a:	4a02      	ldr	r2, [pc, #8]	@ (8000a24 <USART_OverSampling8Cmd+0x1c>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	6003      	str	r3, [r0, #0]
}  
 8000a20:	e7f9      	b.n	8000a16 <USART_OverSampling8Cmd+0xe>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	ffff7fff 	.word	0xffff7fff

08000a28 <USART_OneBitMethodCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d005      	beq.n	8000a38 <USART_OneBitMethodCmd+0x10>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	6882      	ldr	r2, [r0, #8]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	4313      	orrs	r3, r2
 8000a34:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
  }
}
 8000a36:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000a38:	6883      	ldr	r3, [r0, #8]
 8000a3a:	4a02      	ldr	r2, [pc, #8]	@ (8000a44 <USART_OneBitMethodCmd+0x1c>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	6083      	str	r3, [r0, #8]
}
 8000a40:	e7f9      	b.n	8000a36 <USART_OneBitMethodCmd+0xe>
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	fffff7ff 	.word	0xfffff7ff

08000a48 <USART_MSBFirstCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d005      	beq.n	8000a58 <USART_MSBFirstCmd+0x10>
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	6842      	ldr	r2, [r0, #4]
 8000a50:	031b      	lsls	r3, r3, #12
 8000a52:	4313      	orrs	r3, r2
 8000a54:	6043      	str	r3, [r0, #4]
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
  }
}
 8000a56:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000a58:	6843      	ldr	r3, [r0, #4]
 8000a5a:	4a02      	ldr	r2, [pc, #8]	@ (8000a64 <USART_MSBFirstCmd+0x1c>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	6043      	str	r3, [r0, #4]
}
 8000a60:	e7f9      	b.n	8000a56 <USART_MSBFirstCmd+0xe>
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	fff7ffff 	.word	0xfff7ffff

08000a68 <USART_DataInvCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d005      	beq.n	8000a78 <USART_DataInvCmd+0x10>
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000a6c:	2380      	movs	r3, #128	@ 0x80
 8000a6e:	6842      	ldr	r2, [r0, #4]
 8000a70:	02db      	lsls	r3, r3, #11
 8000a72:	4313      	orrs	r3, r2
 8000a74:	6043      	str	r3, [r0, #4]
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
  }
}
 8000a76:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000a78:	6843      	ldr	r3, [r0, #4]
 8000a7a:	4a02      	ldr	r2, [pc, #8]	@ (8000a84 <USART_DataInvCmd+0x1c>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	6043      	str	r3, [r0, #4]
}
 8000a80:	e7f9      	b.n	8000a76 <USART_DataInvCmd+0xe>
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	fffbffff 	.word	0xfffbffff

08000a88 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000a88:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d002      	beq.n	8000a94 <USART_InvPinCmd+0xc>
    USARTx->CR2 |= USART_InvPin;
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6043      	str	r3, [r0, #4]
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
  }
}
 8000a92:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000a94:	438b      	bics	r3, r1
 8000a96:	6043      	str	r3, [r0, #4]
}
 8000a98:	e7fb      	b.n	8000a92 <USART_InvPinCmd+0xa>
 8000a9a:	46c0      	nop			@ (mov r8, r8)

08000a9c <USART_SWAPPinCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d005      	beq.n	8000aac <USART_SWAPPinCmd+0x10>
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	6842      	ldr	r2, [r0, #4]
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	6043      	str	r3, [r0, #4]
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
  }
}
 8000aaa:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000aac:	6843      	ldr	r3, [r0, #4]
 8000aae:	4a02      	ldr	r2, [pc, #8]	@ (8000ab8 <USART_SWAPPinCmd+0x1c>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	6043      	str	r3, [r0, #4]
}
 8000ab4:	e7f9      	b.n	8000aaa <USART_SWAPPinCmd+0xe>
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	ffff7fff 	.word	0xffff7fff

08000abc <USART_ReceiverTimeOutCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000abc:	2900      	cmp	r1, #0
 8000abe:	d005      	beq.n	8000acc <USART_ReceiverTimeOutCmd+0x10>
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	6842      	ldr	r2, [r0, #4]
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	6043      	str	r3, [r0, #4]
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
  }
}
 8000aca:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000acc:	6843      	ldr	r3, [r0, #4]
 8000ace:	4a02      	ldr	r2, [pc, #8]	@ (8000ad8 <USART_ReceiverTimeOutCmd+0x1c>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	6043      	str	r3, [r0, #4]
}
 8000ad4:	e7f9      	b.n	8000aca <USART_ReceiverTimeOutCmd+0xe>
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	ff7fffff 	.word	0xff7fffff

08000adc <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000adc:	6943      	ldr	r3, [r0, #20]
 8000ade:	0e1b      	lsrs	r3, r3, #24
 8000ae0:	061b      	lsls	r3, r3, #24
 8000ae2:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000ae4:	6943      	ldr	r3, [r0, #20]
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	6143      	str	r3, [r0, #20]
}
 8000aea:	4770      	bx	lr

08000aec <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000aec:	22ff      	movs	r2, #255	@ 0xff
 8000aee:	8a03      	ldrh	r3, [r0, #16]
 8000af0:	4393      	bics	r3, r2
 8000af2:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000af4:	8a03      	ldrh	r3, [r0, #16]
 8000af6:	4319      	orrs	r1, r3
 8000af8:	8201      	strh	r1, [r0, #16]
}
 8000afa:	4770      	bx	lr

08000afc <USART_STOPModeCmd>:
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000afc:	2202      	movs	r2, #2
 8000afe:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000b00:	2900      	cmp	r1, #0
 8000b02:	d002      	beq.n	8000b0a <USART_STOPModeCmd+0xe>
    USARTx->CR1 |= USART_CR1_UESM;
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6003      	str	r3, [r0, #0]
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
  }
}
 8000b08:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000b0a:	4393      	bics	r3, r2
 8000b0c:	6003      	str	r3, [r0, #0]
}
 8000b0e:	e7fb      	b.n	8000b08 <USART_STOPModeCmd+0xc>

08000b10 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8000b10:	6883      	ldr	r3, [r0, #8]
 8000b12:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <USART_StopModeWakeUpSourceConfig+0x10>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8000b18:	6883      	ldr	r3, [r0, #8]
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	6083      	str	r3, [r0, #8]
}
 8000b1e:	4770      	bx	lr
 8000b20:	ffcfffff 	.word	0xffcfffff

08000b24 <USART_AutoBaudRateCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d005      	beq.n	8000b34 <USART_AutoBaudRateCmd+0x10>
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	6842      	ldr	r2, [r0, #4]
 8000b2c:	035b      	lsls	r3, r3, #13
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6043      	str	r3, [r0, #4]
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
  }
}
 8000b32:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000b34:	6843      	ldr	r3, [r0, #4]
 8000b36:	4a02      	ldr	r2, [pc, #8]	@ (8000b40 <USART_AutoBaudRateCmd+0x1c>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	6043      	str	r3, [r0, #4]
}
 8000b3c:	e7f9      	b.n	8000b32 <USART_AutoBaudRateCmd+0xe>
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	ffefffff 	.word	0xffefffff

08000b44 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8000b44:	6843      	ldr	r3, [r0, #4]
 8000b46:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <USART_AutoBaudRateConfig+0x10>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8000b4c:	6843      	ldr	r3, [r0, #4]
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6043      	str	r3, [r0, #4]
}
 8000b52:	4770      	bx	lr
 8000b54:	ff9fffff 	.word	0xff9fffff

08000b58 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000b58:	05c9      	lsls	r1, r1, #23
 8000b5a:	0dc9      	lsrs	r1, r1, #23
 8000b5c:	8501      	strh	r1, [r0, #40]	@ 0x28
}
 8000b5e:	4770      	bx	lr

08000b60 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8000b60:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 8000b62:	05c0      	lsls	r0, r0, #23
 8000b64:	0dc0      	lsrs	r0, r0, #23
}
 8000b66:	4770      	bx	lr

08000b68 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000b68:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000b6a:	0609      	lsls	r1, r1, #24
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000b72:	6843      	ldr	r3, [r0, #4]
 8000b74:	4319      	orrs	r1, r3
 8000b76:	6041      	str	r1, [r0, #4]
}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			@ (mov r8, r8)

08000b7c <USART_MuteModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d005      	beq.n	8000b8c <USART_MuteModeCmd+0x10>
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	6802      	ldr	r2, [r0, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	4313      	orrs	r3, r2
 8000b88:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
  }
}
 8000b8a:	4770      	bx	lr
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	4a02      	ldr	r2, [pc, #8]	@ (8000b98 <USART_MuteModeCmd+0x1c>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	6003      	str	r3, [r0, #0]
}
 8000b94:	e7f9      	b.n	8000b8a <USART_MuteModeCmd+0xe>
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	ffffdfff 	.word	0xffffdfff

08000b9c <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8000b9c:	6803      	ldr	r3, [r0, #0]
 8000b9e:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <USART_MuteModeWakeUpConfig+0x10>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8000ba4:	6803      	ldr	r3, [r0, #0]
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6003      	str	r3, [r0, #0]
}
 8000baa:	4770      	bx	lr
 8000bac:	fffff7ff 	.word	0xfffff7ff

08000bb0 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	6843      	ldr	r3, [r0, #4]
 8000bb4:	4393      	bics	r3, r2
 8000bb6:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 8000bb8:	6843      	ldr	r3, [r0, #4]
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	6043      	str	r3, [r0, #4]
}
 8000bbe:	4770      	bx	lr

08000bc0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	6843      	ldr	r3, [r0, #4]
 8000bc4:	4393      	bics	r3, r2
 8000bc6:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000bc8:	6843      	ldr	r3, [r0, #4]
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6043      	str	r3, [r0, #4]
}
 8000bce:	4770      	bx	lr

08000bd0 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	d005      	beq.n	8000be0 <USART_LINCmd+0x10>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	6842      	ldr	r2, [r0, #4]
 8000bd8:	01db      	lsls	r3, r3, #7
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	6043      	str	r3, [r0, #4]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
  }
}
 8000bde:	4770      	bx	lr
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8000be0:	6843      	ldr	r3, [r0, #4]
 8000be2:	4a02      	ldr	r2, [pc, #8]	@ (8000bec <USART_LINCmd+0x1c>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	6043      	str	r3, [r0, #4]
}
 8000be8:	e7f9      	b.n	8000bde <USART_LINCmd+0xe>
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	ffffbfff 	.word	0xffffbfff

08000bf0 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d002      	beq.n	8000bfe <USART_HalfDuplexCmd+0xe>
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
  }
}
 8000bfc:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8000bfe:	4393      	bics	r3, r2
 8000c00:	6083      	str	r3, [r0, #8]
}
 8000c02:	e7fb      	b.n	8000bfc <USART_HalfDuplexCmd+0xc>

08000c04 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000c04:	23ff      	movs	r3, #255	@ 0xff
 8000c06:	8a02      	ldrh	r2, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000c08:	0209      	lsls	r1, r1, #8
  USARTx->GTPR &= USART_GTPR_PSC;
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	8203      	strh	r3, [r0, #16]
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000c0e:	8a03      	ldrh	r3, [r0, #16]
 8000c10:	430b      	orrs	r3, r1
 8000c12:	8203      	strh	r3, [r0, #16]
}
 8000c14:	4770      	bx	lr
 8000c16:	46c0      	nop			@ (mov r8, r8)

08000c18 <USART_SmartCardCmd>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000c18:	2220      	movs	r2, #32
 8000c1a:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d002      	beq.n	8000c26 <USART_SmartCardCmd+0xe>
    USARTx->CR3 |= USART_CR3_SCEN;
 8000c20:	4313      	orrs	r3, r2
 8000c22:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
  }
}
 8000c24:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8000c26:	4393      	bics	r3, r2
 8000c28:	6083      	str	r3, [r0, #8]
}
 8000c2a:	e7fb      	b.n	8000c24 <USART_SmartCardCmd+0xc>

08000c2c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d002      	beq.n	8000c3a <USART_SmartCardNACKCmd+0xe>
    USARTx->CR3 |= USART_CR3_NACK;
 8000c34:	4313      	orrs	r3, r2
 8000c36:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
  }
}
 8000c38:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8000c3a:	4393      	bics	r3, r2
 8000c3c:	6083      	str	r3, [r0, #8]
}
 8000c3e:	e7fb      	b.n	8000c38 <USART_SmartCardNACKCmd+0xc>

08000c40 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000c40:	6883      	ldr	r3, [r0, #8]
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000c44:	0449      	lsls	r1, r1, #17
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000c46:	4013      	ands	r3, r2
 8000c48:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000c4a:	6883      	ldr	r3, [r0, #8]
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	6081      	str	r1, [r0, #8]
}
 8000c50:	4770      	bx	lr
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	fff1ffff 	.word	0xfff1ffff

08000c58 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000c58:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000c5a:	0609      	lsls	r1, r1, #24
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	6143      	str	r3, [r0, #20]
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000c62:	6943      	ldr	r3, [r0, #20]
 8000c64:	4319      	orrs	r1, r3
 8000c66:	6141      	str	r1, [r0, #20]
}
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			@ (mov r8, r8)

08000c6c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	6883      	ldr	r3, [r0, #8]
 8000c70:	4393      	bics	r3, r2
 8000c72:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8000c74:	6883      	ldr	r3, [r0, #8]
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6083      	str	r3, [r0, #8]
}
 8000c7a:	4770      	bx	lr

08000c7c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8000c80:	2900      	cmp	r1, #0
 8000c82:	d002      	beq.n	8000c8a <USART_IrDACmd+0xe>
    USARTx->CR3 |= USART_CR3_IREN;
 8000c84:	4313      	orrs	r3, r2
 8000c86:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
  }
}
 8000c88:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8000c8a:	4393      	bics	r3, r2
 8000c8c:	6083      	str	r3, [r0, #8]
}
 8000c8e:	e7fb      	b.n	8000c88 <USART_IrDACmd+0xc>

08000c90 <USART_DECmd>:
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d005      	beq.n	8000ca0 <USART_DECmd+0x10>
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	6882      	ldr	r2, [r0, #8]
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	6083      	str	r3, [r0, #8]
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
  }
}
 8000c9e:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8000ca0:	6883      	ldr	r3, [r0, #8]
 8000ca2:	4a02      	ldr	r2, [pc, #8]	@ (8000cac <USART_DECmd+0x1c>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	6083      	str	r3, [r0, #8]
}
 8000ca8:	e7f9      	b.n	8000c9e <USART_DECmd+0xe>
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	ffffbfff 	.word	0xffffbfff

08000cb0 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8000cb0:	6883      	ldr	r3, [r0, #8]
 8000cb2:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <USART_DEPolarityConfig+0x10>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8000cb8:	6883      	ldr	r3, [r0, #8]
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6083      	str	r3, [r0, #8]
}
 8000cbe:	4770      	bx	lr
 8000cc0:	ffff7fff 	.word	0xffff7fff

08000cc4 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000cc4:	6803      	ldr	r3, [r0, #0]
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000cc8:	0549      	lsls	r1, r1, #21
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000cca:	4013      	ands	r3, r2
 8000ccc:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000cce:	6803      	ldr	r3, [r0, #0]
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	6001      	str	r1, [r0, #0]
}
 8000cd4:	4770      	bx	lr
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	fc1fffff 	.word	0xfc1fffff

08000cdc <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000cdc:	6803      	ldr	r3, [r0, #0]
 8000cde:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000ce0:	0409      	lsls	r1, r1, #16
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000ce6:	6803      	ldr	r3, [r0, #0]
 8000ce8:	4319      	orrs	r1, r3
 8000cea:	6001      	str	r1, [r0, #0]
}
 8000cec:	4770      	bx	lr
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	ffe0ffff 	.word	0xffe0ffff

08000cf4 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000cf4:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d002      	beq.n	8000d00 <USART_DMACmd+0xc>
    USARTx->CR3 |= USART_DMAReq;
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6083      	str	r3, [r0, #8]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
  }
}
 8000cfe:	4770      	bx	lr
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8000d00:	438b      	bics	r3, r1
 8000d02:	6083      	str	r3, [r0, #8]
}
 8000d04:	e7fb      	b.n	8000cfe <USART_DMACmd+0xa>
 8000d06:	46c0      	nop			@ (mov r8, r8)

08000d08 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8000d08:	6883      	ldr	r3, [r0, #8]
 8000d0a:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <USART_DMAReceptionErrorConfig+0x10>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8000d10:	6883      	ldr	r3, [r0, #8]
 8000d12:	430b      	orrs	r3, r1
 8000d14:	6083      	str	r3, [r0, #8]
}
 8000d16:	4770      	bx	lr
 8000d18:	ffffdfff 	.word	0xffffdfff

08000d1c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000d1c:	b510      	push	{r4, lr}
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000d1e:	24ff      	movs	r4, #255	@ 0xff
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d20:	b28b      	uxth	r3, r1
  itpos = USART_IT & IT_MASK;
 8000d22:	400c      	ands	r4, r1
  itmask = (((uint32_t)0x01) << itpos);
 8000d24:	2101      	movs	r1, #1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d26:	0a1b      	lsrs	r3, r3, #8
  itmask = (((uint32_t)0x01) << itpos);
 8000d28:	40a1      	lsls	r1, r4
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d00c      	beq.n	8000d48 <USART_ITConfig+0x2c>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d008      	beq.n	8000d44 <USART_ITConfig+0x28>
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d32:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d002      	beq.n	8000d3e <USART_ITConfig+0x22>
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d3c:	bd10      	pop	{r4, pc}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d3e:	438b      	bics	r3, r1
 8000d40:	6003      	str	r3, [r0, #0]
}
 8000d42:	e7fb      	b.n	8000d3c <USART_ITConfig+0x20>
    usartxbase += 0x08;
 8000d44:	3008      	adds	r0, #8
 8000d46:	e7f4      	b.n	8000d32 <USART_ITConfig+0x16>
    usartxbase += 0x04;
 8000d48:	3004      	adds	r0, #4
 8000d4a:	e7f2      	b.n	8000d32 <USART_ITConfig+0x16>

08000d4c <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8000d4c:	8b03      	ldrh	r3, [r0, #24]
 8000d4e:	b289      	uxth	r1, r1
  if (NewState != DISABLE)
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	d002      	beq.n	8000d5a <USART_RequestCmd+0xe>
      USARTx->RQR |= USART_Request;
 8000d54:	430b      	orrs	r3, r1
 8000d56:	8303      	strh	r3, [r0, #24]
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
  }
}
 8000d58:	4770      	bx	lr
    USARTx->RQR &= (uint32_t)~USART_Request;
 8000d5a:	438b      	bics	r3, r1
 8000d5c:	8303      	strh	r3, [r0, #24]
}
 8000d5e:	e7fb      	b.n	8000d58 <USART_RequestCmd+0xc>

08000d60 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8000d60:	6883      	ldr	r3, [r0, #8]
 8000d62:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <USART_OverrunDetectionConfig+0x10>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8000d68:	6883      	ldr	r3, [r0, #8]
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6083      	str	r3, [r0, #8]
}
 8000d6e:	4770      	bx	lr
 8000d70:	ffffefff 	.word	0xffffefff

08000d74 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000d74:	69c3      	ldr	r3, [r0, #28]
 8000d76:	4019      	ands	r1, r3
 8000d78:	0008      	movs	r0, r1
 8000d7a:	1e43      	subs	r3, r0, #1
 8000d7c:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8000d7e:	b2c0      	uxtb	r0, r0
}
 8000d80:	4770      	bx	lr
 8000d82:	46c0      	nop			@ (mov r8, r8)

08000d84 <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8000d84:	6201      	str	r1, [r0, #32]
}
 8000d86:	4770      	bx	lr

08000d88 <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000d88:	b510      	push	{r4, lr}
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000d8a:	24ff      	movs	r4, #255	@ 0xff
  itmask = (uint32_t)0x01 << itmask;
 8000d8c:	2301      	movs	r3, #1
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d8e:	b28a      	uxth	r2, r1
  itmask = USART_IT & IT_MASK;
 8000d90:	400c      	ands	r4, r1
  itmask = (uint32_t)0x01 << itmask;
 8000d92:	40a3      	lsls	r3, r4
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d94:	0a12      	lsrs	r2, r2, #8
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d96:	2a01      	cmp	r2, #1
 8000d98:	d012      	beq.n	8000dc0 <USART_GetITStatus+0x38>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d9a:	2a02      	cmp	r2, #2
 8000d9c:	d00d      	beq.n	8000dba <USART_GetITStatus+0x32>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d9e:	6882      	ldr	r2, [r0, #8]
 8000da0:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 8000da2:	69c2      	ldr	r2, [r0, #28]
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000da4:	2000      	movs	r0, #0
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <USART_GetITStatus+0x30>
  bitpos = (uint32_t)0x01 << bitpos;
 8000daa:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x10;
 8000dac:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 8000dae:	408b      	lsls	r3, r1
  bitpos &= USARTx->ISR;
 8000db0:	401a      	ands	r2, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000db2:	1e53      	subs	r3, r2, #1
 8000db4:	419a      	sbcs	r2, r3
 8000db6:	b2d0      	uxtb	r0, r2
  }
  
  return bitstatus;  
}
 8000db8:	bd10      	pop	{r4, pc}
    itmask &= USARTx->CR2;
 8000dba:	6842      	ldr	r2, [r0, #4]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	e7f0      	b.n	8000da2 <USART_GetITStatus+0x1a>
    itmask &= USARTx->CR1;
 8000dc0:	6802      	ldr	r2, [r0, #0]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	e7ed      	b.n	8000da2 <USART_GetITStatus+0x1a>
 8000dc6:	46c0      	nop			@ (mov r8, r8)

08000dc8 <USART_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8000dc8:	2301      	movs	r3, #1
  bitpos = USART_IT >> 0x10;
 8000dca:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8000dcc:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 8000dce:	6203      	str	r3, [r0, #32]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	46c0      	nop			@ (mov r8, r8)

08000dd4 <__udivsi3>:
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0843      	lsrs	r3, r0, #1
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d374      	bcc.n	8000ec6 <__udivsi3+0xf2>
 8000ddc:	0903      	lsrs	r3, r0, #4
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d35f      	bcc.n	8000ea2 <__udivsi3+0xce>
 8000de2:	0a03      	lsrs	r3, r0, #8
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d344      	bcc.n	8000e72 <__udivsi3+0x9e>
 8000de8:	0b03      	lsrs	r3, r0, #12
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d328      	bcc.n	8000e40 <__udivsi3+0x6c>
 8000dee:	0c03      	lsrs	r3, r0, #16
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d30d      	bcc.n	8000e10 <__udivsi3+0x3c>
 8000df4:	22ff      	movs	r2, #255	@ 0xff
 8000df6:	0209      	lsls	r1, r1, #8
 8000df8:	ba12      	rev	r2, r2
 8000dfa:	0c03      	lsrs	r3, r0, #16
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d302      	bcc.n	8000e06 <__udivsi3+0x32>
 8000e00:	1212      	asrs	r2, r2, #8
 8000e02:	0209      	lsls	r1, r1, #8
 8000e04:	d065      	beq.n	8000ed2 <__udivsi3+0xfe>
 8000e06:	0b03      	lsrs	r3, r0, #12
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d319      	bcc.n	8000e40 <__udivsi3+0x6c>
 8000e0c:	e000      	b.n	8000e10 <__udivsi3+0x3c>
 8000e0e:	0a09      	lsrs	r1, r1, #8
 8000e10:	0bc3      	lsrs	r3, r0, #15
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d301      	bcc.n	8000e1a <__udivsi3+0x46>
 8000e16:	03cb      	lsls	r3, r1, #15
 8000e18:	1ac0      	subs	r0, r0, r3
 8000e1a:	4152      	adcs	r2, r2
 8000e1c:	0b83      	lsrs	r3, r0, #14
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d301      	bcc.n	8000e26 <__udivsi3+0x52>
 8000e22:	038b      	lsls	r3, r1, #14
 8000e24:	1ac0      	subs	r0, r0, r3
 8000e26:	4152      	adcs	r2, r2
 8000e28:	0b43      	lsrs	r3, r0, #13
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d301      	bcc.n	8000e32 <__udivsi3+0x5e>
 8000e2e:	034b      	lsls	r3, r1, #13
 8000e30:	1ac0      	subs	r0, r0, r3
 8000e32:	4152      	adcs	r2, r2
 8000e34:	0b03      	lsrs	r3, r0, #12
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d301      	bcc.n	8000e3e <__udivsi3+0x6a>
 8000e3a:	030b      	lsls	r3, r1, #12
 8000e3c:	1ac0      	subs	r0, r0, r3
 8000e3e:	4152      	adcs	r2, r2
 8000e40:	0ac3      	lsrs	r3, r0, #11
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d301      	bcc.n	8000e4a <__udivsi3+0x76>
 8000e46:	02cb      	lsls	r3, r1, #11
 8000e48:	1ac0      	subs	r0, r0, r3
 8000e4a:	4152      	adcs	r2, r2
 8000e4c:	0a83      	lsrs	r3, r0, #10
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d301      	bcc.n	8000e56 <__udivsi3+0x82>
 8000e52:	028b      	lsls	r3, r1, #10
 8000e54:	1ac0      	subs	r0, r0, r3
 8000e56:	4152      	adcs	r2, r2
 8000e58:	0a43      	lsrs	r3, r0, #9
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d301      	bcc.n	8000e62 <__udivsi3+0x8e>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	1ac0      	subs	r0, r0, r3
 8000e62:	4152      	adcs	r2, r2
 8000e64:	0a03      	lsrs	r3, r0, #8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d301      	bcc.n	8000e6e <__udivsi3+0x9a>
 8000e6a:	020b      	lsls	r3, r1, #8
 8000e6c:	1ac0      	subs	r0, r0, r3
 8000e6e:	4152      	adcs	r2, r2
 8000e70:	d2cd      	bcs.n	8000e0e <__udivsi3+0x3a>
 8000e72:	09c3      	lsrs	r3, r0, #7
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d301      	bcc.n	8000e7c <__udivsi3+0xa8>
 8000e78:	01cb      	lsls	r3, r1, #7
 8000e7a:	1ac0      	subs	r0, r0, r3
 8000e7c:	4152      	adcs	r2, r2
 8000e7e:	0983      	lsrs	r3, r0, #6
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d301      	bcc.n	8000e88 <__udivsi3+0xb4>
 8000e84:	018b      	lsls	r3, r1, #6
 8000e86:	1ac0      	subs	r0, r0, r3
 8000e88:	4152      	adcs	r2, r2
 8000e8a:	0943      	lsrs	r3, r0, #5
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d301      	bcc.n	8000e94 <__udivsi3+0xc0>
 8000e90:	014b      	lsls	r3, r1, #5
 8000e92:	1ac0      	subs	r0, r0, r3
 8000e94:	4152      	adcs	r2, r2
 8000e96:	0903      	lsrs	r3, r0, #4
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d301      	bcc.n	8000ea0 <__udivsi3+0xcc>
 8000e9c:	010b      	lsls	r3, r1, #4
 8000e9e:	1ac0      	subs	r0, r0, r3
 8000ea0:	4152      	adcs	r2, r2
 8000ea2:	08c3      	lsrs	r3, r0, #3
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d301      	bcc.n	8000eac <__udivsi3+0xd8>
 8000ea8:	00cb      	lsls	r3, r1, #3
 8000eaa:	1ac0      	subs	r0, r0, r3
 8000eac:	4152      	adcs	r2, r2
 8000eae:	0883      	lsrs	r3, r0, #2
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d301      	bcc.n	8000eb8 <__udivsi3+0xe4>
 8000eb4:	008b      	lsls	r3, r1, #2
 8000eb6:	1ac0      	subs	r0, r0, r3
 8000eb8:	4152      	adcs	r2, r2
 8000eba:	0843      	lsrs	r3, r0, #1
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d301      	bcc.n	8000ec4 <__udivsi3+0xf0>
 8000ec0:	004b      	lsls	r3, r1, #1
 8000ec2:	1ac0      	subs	r0, r0, r3
 8000ec4:	4152      	adcs	r2, r2
 8000ec6:	1a41      	subs	r1, r0, r1
 8000ec8:	d200      	bcs.n	8000ecc <__udivsi3+0xf8>
 8000eca:	4601      	mov	r1, r0
 8000ecc:	4152      	adcs	r2, r2
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4770      	bx	lr
 8000ed2:	e7ff      	b.n	8000ed4 <__udivsi3+0x100>
 8000ed4:	b501      	push	{r0, lr}
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8f0 	bl	80010bc <__aeabi_idiv0>
 8000edc:	bd02      	pop	{r1, pc}
 8000ede:	46c0      	nop			@ (mov r8, r8)

08000ee0 <__aeabi_uidivmod>:
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	d0f7      	beq.n	8000ed4 <__udivsi3+0x100>
 8000ee4:	e776      	b.n	8000dd4 <__udivsi3>
 8000ee6:	4770      	bx	lr

08000ee8 <__divsi3>:
 8000ee8:	4603      	mov	r3, r0
 8000eea:	430b      	orrs	r3, r1
 8000eec:	d47f      	bmi.n	8000fee <__divsi3+0x106>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	0843      	lsrs	r3, r0, #1
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d374      	bcc.n	8000fe0 <__divsi3+0xf8>
 8000ef6:	0903      	lsrs	r3, r0, #4
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d35f      	bcc.n	8000fbc <__divsi3+0xd4>
 8000efc:	0a03      	lsrs	r3, r0, #8
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d344      	bcc.n	8000f8c <__divsi3+0xa4>
 8000f02:	0b03      	lsrs	r3, r0, #12
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d328      	bcc.n	8000f5a <__divsi3+0x72>
 8000f08:	0c03      	lsrs	r3, r0, #16
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d30d      	bcc.n	8000f2a <__divsi3+0x42>
 8000f0e:	22ff      	movs	r2, #255	@ 0xff
 8000f10:	0209      	lsls	r1, r1, #8
 8000f12:	ba12      	rev	r2, r2
 8000f14:	0c03      	lsrs	r3, r0, #16
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d302      	bcc.n	8000f20 <__divsi3+0x38>
 8000f1a:	1212      	asrs	r2, r2, #8
 8000f1c:	0209      	lsls	r1, r1, #8
 8000f1e:	d065      	beq.n	8000fec <__divsi3+0x104>
 8000f20:	0b03      	lsrs	r3, r0, #12
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d319      	bcc.n	8000f5a <__divsi3+0x72>
 8000f26:	e000      	b.n	8000f2a <__divsi3+0x42>
 8000f28:	0a09      	lsrs	r1, r1, #8
 8000f2a:	0bc3      	lsrs	r3, r0, #15
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d301      	bcc.n	8000f34 <__divsi3+0x4c>
 8000f30:	03cb      	lsls	r3, r1, #15
 8000f32:	1ac0      	subs	r0, r0, r3
 8000f34:	4152      	adcs	r2, r2
 8000f36:	0b83      	lsrs	r3, r0, #14
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	d301      	bcc.n	8000f40 <__divsi3+0x58>
 8000f3c:	038b      	lsls	r3, r1, #14
 8000f3e:	1ac0      	subs	r0, r0, r3
 8000f40:	4152      	adcs	r2, r2
 8000f42:	0b43      	lsrs	r3, r0, #13
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d301      	bcc.n	8000f4c <__divsi3+0x64>
 8000f48:	034b      	lsls	r3, r1, #13
 8000f4a:	1ac0      	subs	r0, r0, r3
 8000f4c:	4152      	adcs	r2, r2
 8000f4e:	0b03      	lsrs	r3, r0, #12
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d301      	bcc.n	8000f58 <__divsi3+0x70>
 8000f54:	030b      	lsls	r3, r1, #12
 8000f56:	1ac0      	subs	r0, r0, r3
 8000f58:	4152      	adcs	r2, r2
 8000f5a:	0ac3      	lsrs	r3, r0, #11
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d301      	bcc.n	8000f64 <__divsi3+0x7c>
 8000f60:	02cb      	lsls	r3, r1, #11
 8000f62:	1ac0      	subs	r0, r0, r3
 8000f64:	4152      	adcs	r2, r2
 8000f66:	0a83      	lsrs	r3, r0, #10
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d301      	bcc.n	8000f70 <__divsi3+0x88>
 8000f6c:	028b      	lsls	r3, r1, #10
 8000f6e:	1ac0      	subs	r0, r0, r3
 8000f70:	4152      	adcs	r2, r2
 8000f72:	0a43      	lsrs	r3, r0, #9
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d301      	bcc.n	8000f7c <__divsi3+0x94>
 8000f78:	024b      	lsls	r3, r1, #9
 8000f7a:	1ac0      	subs	r0, r0, r3
 8000f7c:	4152      	adcs	r2, r2
 8000f7e:	0a03      	lsrs	r3, r0, #8
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d301      	bcc.n	8000f88 <__divsi3+0xa0>
 8000f84:	020b      	lsls	r3, r1, #8
 8000f86:	1ac0      	subs	r0, r0, r3
 8000f88:	4152      	adcs	r2, r2
 8000f8a:	d2cd      	bcs.n	8000f28 <__divsi3+0x40>
 8000f8c:	09c3      	lsrs	r3, r0, #7
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d301      	bcc.n	8000f96 <__divsi3+0xae>
 8000f92:	01cb      	lsls	r3, r1, #7
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	4152      	adcs	r2, r2
 8000f98:	0983      	lsrs	r3, r0, #6
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d301      	bcc.n	8000fa2 <__divsi3+0xba>
 8000f9e:	018b      	lsls	r3, r1, #6
 8000fa0:	1ac0      	subs	r0, r0, r3
 8000fa2:	4152      	adcs	r2, r2
 8000fa4:	0943      	lsrs	r3, r0, #5
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d301      	bcc.n	8000fae <__divsi3+0xc6>
 8000faa:	014b      	lsls	r3, r1, #5
 8000fac:	1ac0      	subs	r0, r0, r3
 8000fae:	4152      	adcs	r2, r2
 8000fb0:	0903      	lsrs	r3, r0, #4
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d301      	bcc.n	8000fba <__divsi3+0xd2>
 8000fb6:	010b      	lsls	r3, r1, #4
 8000fb8:	1ac0      	subs	r0, r0, r3
 8000fba:	4152      	adcs	r2, r2
 8000fbc:	08c3      	lsrs	r3, r0, #3
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	d301      	bcc.n	8000fc6 <__divsi3+0xde>
 8000fc2:	00cb      	lsls	r3, r1, #3
 8000fc4:	1ac0      	subs	r0, r0, r3
 8000fc6:	4152      	adcs	r2, r2
 8000fc8:	0883      	lsrs	r3, r0, #2
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d301      	bcc.n	8000fd2 <__divsi3+0xea>
 8000fce:	008b      	lsls	r3, r1, #2
 8000fd0:	1ac0      	subs	r0, r0, r3
 8000fd2:	4152      	adcs	r2, r2
 8000fd4:	0843      	lsrs	r3, r0, #1
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d301      	bcc.n	8000fde <__divsi3+0xf6>
 8000fda:	004b      	lsls	r3, r1, #1
 8000fdc:	1ac0      	subs	r0, r0, r3
 8000fde:	4152      	adcs	r2, r2
 8000fe0:	1a41      	subs	r1, r0, r1
 8000fe2:	d200      	bcs.n	8000fe6 <__divsi3+0xfe>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	4152      	adcs	r2, r2
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4770      	bx	lr
 8000fec:	e05d      	b.n	80010aa <__divsi3+0x1c2>
 8000fee:	0fca      	lsrs	r2, r1, #31
 8000ff0:	d000      	beq.n	8000ff4 <__divsi3+0x10c>
 8000ff2:	4249      	negs	r1, r1
 8000ff4:	1003      	asrs	r3, r0, #32
 8000ff6:	d300      	bcc.n	8000ffa <__divsi3+0x112>
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	4053      	eors	r3, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	469c      	mov	ip, r3
 8001000:	0903      	lsrs	r3, r0, #4
 8001002:	428b      	cmp	r3, r1
 8001004:	d32d      	bcc.n	8001062 <__divsi3+0x17a>
 8001006:	0a03      	lsrs	r3, r0, #8
 8001008:	428b      	cmp	r3, r1
 800100a:	d312      	bcc.n	8001032 <__divsi3+0x14a>
 800100c:	22fc      	movs	r2, #252	@ 0xfc
 800100e:	0189      	lsls	r1, r1, #6
 8001010:	ba12      	rev	r2, r2
 8001012:	0a03      	lsrs	r3, r0, #8
 8001014:	428b      	cmp	r3, r1
 8001016:	d30c      	bcc.n	8001032 <__divsi3+0x14a>
 8001018:	0189      	lsls	r1, r1, #6
 800101a:	1192      	asrs	r2, r2, #6
 800101c:	428b      	cmp	r3, r1
 800101e:	d308      	bcc.n	8001032 <__divsi3+0x14a>
 8001020:	0189      	lsls	r1, r1, #6
 8001022:	1192      	asrs	r2, r2, #6
 8001024:	428b      	cmp	r3, r1
 8001026:	d304      	bcc.n	8001032 <__divsi3+0x14a>
 8001028:	0189      	lsls	r1, r1, #6
 800102a:	d03a      	beq.n	80010a2 <__divsi3+0x1ba>
 800102c:	1192      	asrs	r2, r2, #6
 800102e:	e000      	b.n	8001032 <__divsi3+0x14a>
 8001030:	0989      	lsrs	r1, r1, #6
 8001032:	09c3      	lsrs	r3, r0, #7
 8001034:	428b      	cmp	r3, r1
 8001036:	d301      	bcc.n	800103c <__divsi3+0x154>
 8001038:	01cb      	lsls	r3, r1, #7
 800103a:	1ac0      	subs	r0, r0, r3
 800103c:	4152      	adcs	r2, r2
 800103e:	0983      	lsrs	r3, r0, #6
 8001040:	428b      	cmp	r3, r1
 8001042:	d301      	bcc.n	8001048 <__divsi3+0x160>
 8001044:	018b      	lsls	r3, r1, #6
 8001046:	1ac0      	subs	r0, r0, r3
 8001048:	4152      	adcs	r2, r2
 800104a:	0943      	lsrs	r3, r0, #5
 800104c:	428b      	cmp	r3, r1
 800104e:	d301      	bcc.n	8001054 <__divsi3+0x16c>
 8001050:	014b      	lsls	r3, r1, #5
 8001052:	1ac0      	subs	r0, r0, r3
 8001054:	4152      	adcs	r2, r2
 8001056:	0903      	lsrs	r3, r0, #4
 8001058:	428b      	cmp	r3, r1
 800105a:	d301      	bcc.n	8001060 <__divsi3+0x178>
 800105c:	010b      	lsls	r3, r1, #4
 800105e:	1ac0      	subs	r0, r0, r3
 8001060:	4152      	adcs	r2, r2
 8001062:	08c3      	lsrs	r3, r0, #3
 8001064:	428b      	cmp	r3, r1
 8001066:	d301      	bcc.n	800106c <__divsi3+0x184>
 8001068:	00cb      	lsls	r3, r1, #3
 800106a:	1ac0      	subs	r0, r0, r3
 800106c:	4152      	adcs	r2, r2
 800106e:	0883      	lsrs	r3, r0, #2
 8001070:	428b      	cmp	r3, r1
 8001072:	d301      	bcc.n	8001078 <__divsi3+0x190>
 8001074:	008b      	lsls	r3, r1, #2
 8001076:	1ac0      	subs	r0, r0, r3
 8001078:	4152      	adcs	r2, r2
 800107a:	d2d9      	bcs.n	8001030 <__divsi3+0x148>
 800107c:	0843      	lsrs	r3, r0, #1
 800107e:	428b      	cmp	r3, r1
 8001080:	d301      	bcc.n	8001086 <__divsi3+0x19e>
 8001082:	004b      	lsls	r3, r1, #1
 8001084:	1ac0      	subs	r0, r0, r3
 8001086:	4152      	adcs	r2, r2
 8001088:	1a41      	subs	r1, r0, r1
 800108a:	d200      	bcs.n	800108e <__divsi3+0x1a6>
 800108c:	4601      	mov	r1, r0
 800108e:	4663      	mov	r3, ip
 8001090:	4152      	adcs	r2, r2
 8001092:	105b      	asrs	r3, r3, #1
 8001094:	4610      	mov	r0, r2
 8001096:	d301      	bcc.n	800109c <__divsi3+0x1b4>
 8001098:	4240      	negs	r0, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d500      	bpl.n	80010a0 <__divsi3+0x1b8>
 800109e:	4249      	negs	r1, r1
 80010a0:	4770      	bx	lr
 80010a2:	4663      	mov	r3, ip
 80010a4:	105b      	asrs	r3, r3, #1
 80010a6:	d300      	bcc.n	80010aa <__divsi3+0x1c2>
 80010a8:	4240      	negs	r0, r0
 80010aa:	b501      	push	{r0, lr}
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f805 	bl	80010bc <__aeabi_idiv0>
 80010b2:	bd02      	pop	{r1, pc}

080010b4 <__aeabi_idivmod>:
 80010b4:	2900      	cmp	r1, #0
 80010b6:	d0f8      	beq.n	80010aa <__divsi3+0x1c2>
 80010b8:	e716      	b.n	8000ee8 <__divsi3>
 80010ba:	4770      	bx	lr

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	46c0      	nop			@ (mov r8, r8)

080010c0 <__aeabi_cdrcmple>:
 80010c0:	4684      	mov	ip, r0
 80010c2:	0010      	movs	r0, r2
 80010c4:	4662      	mov	r2, ip
 80010c6:	468c      	mov	ip, r1
 80010c8:	0019      	movs	r1, r3
 80010ca:	4663      	mov	r3, ip
 80010cc:	e000      	b.n	80010d0 <__aeabi_cdcmpeq>
 80010ce:	46c0      	nop			@ (mov r8, r8)

080010d0 <__aeabi_cdcmpeq>:
 80010d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80010d2:	f000 ff9f 	bl	8002014 <__ledf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d401      	bmi.n	80010de <__aeabi_cdcmpeq+0xe>
 80010da:	2100      	movs	r1, #0
 80010dc:	42c8      	cmn	r0, r1
 80010de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080010e0 <__aeabi_dcmpeq>:
 80010e0:	b510      	push	{r4, lr}
 80010e2:	f000 fee3 	bl	8001eac <__eqdf2>
 80010e6:	4240      	negs	r0, r0
 80010e8:	3001      	adds	r0, #1
 80010ea:	bd10      	pop	{r4, pc}

080010ec <__aeabi_dcmplt>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	f000 ff91 	bl	8002014 <__ledf2>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	db01      	blt.n	80010fa <__aeabi_dcmplt+0xe>
 80010f6:	2000      	movs	r0, #0
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	2001      	movs	r0, #1
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)

08001100 <__aeabi_dcmple>:
 8001100:	b510      	push	{r4, lr}
 8001102:	f000 ff87 	bl	8002014 <__ledf2>
 8001106:	2800      	cmp	r0, #0
 8001108:	dd01      	ble.n	800110e <__aeabi_dcmple+0xe>
 800110a:	2000      	movs	r0, #0
 800110c:	bd10      	pop	{r4, pc}
 800110e:	2001      	movs	r0, #1
 8001110:	bd10      	pop	{r4, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)

08001114 <__aeabi_dcmpgt>:
 8001114:	b510      	push	{r4, lr}
 8001116:	f000 ff0d 	bl	8001f34 <__gedf2>
 800111a:	2800      	cmp	r0, #0
 800111c:	dc01      	bgt.n	8001122 <__aeabi_dcmpgt+0xe>
 800111e:	2000      	movs	r0, #0
 8001120:	bd10      	pop	{r4, pc}
 8001122:	2001      	movs	r0, #1
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)

08001128 <__aeabi_dcmpge>:
 8001128:	b510      	push	{r4, lr}
 800112a:	f000 ff03 	bl	8001f34 <__gedf2>
 800112e:	2800      	cmp	r0, #0
 8001130:	da01      	bge.n	8001136 <__aeabi_dcmpge+0xe>
 8001132:	2000      	movs	r0, #0
 8001134:	bd10      	pop	{r4, pc}
 8001136:	2001      	movs	r0, #1
 8001138:	bd10      	pop	{r4, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)

0800113c <__aeabi_d2uiz>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__aeabi_d2uiz+0x38>)
 8001142:	0004      	movs	r4, r0
 8001144:	000d      	movs	r5, r1
 8001146:	f7ff ffef 	bl	8001128 <__aeabi_dcmpge>
 800114a:	2800      	cmp	r0, #0
 800114c:	d104      	bne.n	8001158 <__aeabi_d2uiz+0x1c>
 800114e:	0020      	movs	r0, r4
 8001150:	0029      	movs	r1, r5
 8001152:	f001 fe21 	bl	8002d98 <__aeabi_d2iz>
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <__aeabi_d2uiz+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	0020      	movs	r0, r4
 800115e:	0029      	movs	r1, r5
 8001160:	f001 fa92 	bl	8002688 <__aeabi_dsub>
 8001164:	f001 fe18 	bl	8002d98 <__aeabi_d2iz>
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	061b      	lsls	r3, r3, #24
 800116c:	469c      	mov	ip, r3
 800116e:	4460      	add	r0, ip
 8001170:	e7f1      	b.n	8001156 <__aeabi_d2uiz+0x1a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	41e00000 	.word	0x41e00000

08001178 <__aeabi_dadd>:
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	4657      	mov	r7, sl
 800117c:	464e      	mov	r6, r9
 800117e:	46de      	mov	lr, fp
 8001180:	4645      	mov	r5, r8
 8001182:	b5e0      	push	{r5, r6, r7, lr}
 8001184:	030c      	lsls	r4, r1, #12
 8001186:	b083      	sub	sp, #12
 8001188:	004e      	lsls	r6, r1, #1
 800118a:	0a64      	lsrs	r4, r4, #9
 800118c:	0f47      	lsrs	r7, r0, #29
 800118e:	0fcd      	lsrs	r5, r1, #31
 8001190:	0059      	lsls	r1, r3, #1
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4327      	orrs	r7, r4
 8001198:	031c      	lsls	r4, r3, #12
 800119a:	0d4b      	lsrs	r3, r1, #21
 800119c:	469a      	mov	sl, r3
 800119e:	9a00      	ldr	r2, [sp, #0]
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	0a64      	lsrs	r4, r4, #9
 80011a4:	0fd9      	lsrs	r1, r3, #31
 80011a6:	0f53      	lsrs	r3, r2, #29
 80011a8:	4323      	orrs	r3, r4
 80011aa:	469b      	mov	fp, r3
 80011ac:	9b00      	ldr	r3, [sp, #0]
 80011ae:	0d76      	lsrs	r6, r6, #21
 80011b0:	00da      	lsls	r2, r3, #3
 80011b2:	4694      	mov	ip, r2
 80011b4:	4652      	mov	r2, sl
 80011b6:	1ab2      	subs	r2, r6, r2
 80011b8:	4691      	mov	r9, r2
 80011ba:	00c0      	lsls	r0, r0, #3
 80011bc:	428d      	cmp	r5, r1
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0x4a>
 80011c0:	e0c1      	b.n	8001346 <__aeabi_dadd+0x1ce>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_dadd+0x50>
 80011c6:	e086      	b.n	80012d6 <__aeabi_dadd+0x15e>
 80011c8:	4652      	mov	r2, sl
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x58>
 80011ce:	e105      	b.n	80013dc <__aeabi_dadd+0x264>
 80011d0:	4abf      	ldr	r2, [pc, #764]	@ (80014d0 <__aeabi_dadd+0x358>)
 80011d2:	4296      	cmp	r6, r2
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dadd+0x60>
 80011d6:	e1ad      	b.n	8001534 <__aeabi_dadd+0x3bc>
 80011d8:	464a      	mov	r2, r9
 80011da:	2401      	movs	r4, #1
 80011dc:	2a38      	cmp	r2, #56	@ 0x38
 80011de:	dc19      	bgt.n	8001214 <__aeabi_dadd+0x9c>
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	465b      	mov	r3, fp
 80011e4:	0412      	lsls	r2, r2, #16
 80011e6:	4313      	orrs	r3, r2
 80011e8:	469b      	mov	fp, r3
 80011ea:	464a      	mov	r2, r9
 80011ec:	2a1f      	cmp	r2, #31
 80011ee:	dd00      	ble.n	80011f2 <__aeabi_dadd+0x7a>
 80011f0:	e20b      	b.n	800160a <__aeabi_dadd+0x492>
 80011f2:	464b      	mov	r3, r9
 80011f4:	2220      	movs	r2, #32
 80011f6:	465c      	mov	r4, fp
 80011f8:	4661      	mov	r1, ip
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	4094      	lsls	r4, r2
 80011fe:	40d9      	lsrs	r1, r3
 8001200:	430c      	orrs	r4, r1
 8001202:	4661      	mov	r1, ip
 8001204:	4091      	lsls	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	1e51      	subs	r1, r2, #1
 800120a:	418a      	sbcs	r2, r1
 800120c:	4314      	orrs	r4, r2
 800120e:	465a      	mov	r2, fp
 8001210:	40da      	lsrs	r2, r3
 8001212:	1abf      	subs	r7, r7, r2
 8001214:	1b04      	subs	r4, r0, r4
 8001216:	42a0      	cmp	r0, r4
 8001218:	4180      	sbcs	r0, r0
 800121a:	4240      	negs	r0, r0
 800121c:	1a3b      	subs	r3, r7, r0
 800121e:	4698      	mov	r8, r3
 8001220:	4643      	mov	r3, r8
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	d400      	bmi.n	8001228 <__aeabi_dadd+0xb0>
 8001226:	e14d      	b.n	80014c4 <__aeabi_dadd+0x34c>
 8001228:	4643      	mov	r3, r8
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	0a5b      	lsrs	r3, r3, #9
 800122e:	4698      	mov	r8, r3
 8001230:	4643      	mov	r3, r8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0xc0>
 8001236:	e127      	b.n	8001488 <__aeabi_dadd+0x310>
 8001238:	4640      	mov	r0, r8
 800123a:	f001 fe3b 	bl	8002eb4 <__clzsi2>
 800123e:	0003      	movs	r3, r0
 8001240:	3b08      	subs	r3, #8
 8001242:	2220      	movs	r2, #32
 8001244:	0027      	movs	r7, r4
 8001246:	4641      	mov	r1, r8
 8001248:	1ad0      	subs	r0, r2, r3
 800124a:	4099      	lsls	r1, r3
 800124c:	40c7      	lsrs	r7, r0
 800124e:	409c      	lsls	r4, r3
 8001250:	430f      	orrs	r7, r1
 8001252:	429e      	cmp	r6, r3
 8001254:	dd00      	ble.n	8001258 <__aeabi_dadd+0xe0>
 8001256:	e1d3      	b.n	8001600 <__aeabi_dadd+0x488>
 8001258:	1b99      	subs	r1, r3, r6
 800125a:	0023      	movs	r3, r4
 800125c:	3101      	adds	r1, #1
 800125e:	1a52      	subs	r2, r2, r1
 8001260:	40cb      	lsrs	r3, r1
 8001262:	4094      	lsls	r4, r2
 8001264:	4698      	mov	r8, r3
 8001266:	1e63      	subs	r3, r4, #1
 8001268:	419c      	sbcs	r4, r3
 800126a:	003b      	movs	r3, r7
 800126c:	4093      	lsls	r3, r2
 800126e:	4642      	mov	r2, r8
 8001270:	40cf      	lsrs	r7, r1
 8001272:	4322      	orrs	r2, r4
 8001274:	0014      	movs	r4, r2
 8001276:	46b8      	mov	r8, r7
 8001278:	2600      	movs	r6, #0
 800127a:	431c      	orrs	r4, r3
 800127c:	0763      	lsls	r3, r4, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_dadd+0x11c>
 8001280:	230f      	movs	r3, #15
 8001282:	4023      	ands	r3, r4
 8001284:	2b04      	cmp	r3, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_dadd+0x11c>
 8001288:	1d23      	adds	r3, r4, #4
 800128a:	42a3      	cmp	r3, r4
 800128c:	41a4      	sbcs	r4, r4
 800128e:	4264      	negs	r4, r4
 8001290:	44a0      	add	r8, r4
 8001292:	001c      	movs	r4, r3
 8001294:	4643      	mov	r3, r8
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	d400      	bmi.n	800129c <__aeabi_dadd+0x124>
 800129a:	e2ca      	b.n	8001832 <__aeabi_dadd+0x6ba>
 800129c:	4a8c      	ldr	r2, [pc, #560]	@ (80014d0 <__aeabi_dadd+0x358>)
 800129e:	3601      	adds	r6, #1
 80012a0:	4296      	cmp	r6, r2
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x12e>
 80012a4:	e0ec      	b.n	8001480 <__aeabi_dadd+0x308>
 80012a6:	4643      	mov	r3, r8
 80012a8:	488a      	ldr	r0, [pc, #552]	@ (80014d4 <__aeabi_dadd+0x35c>)
 80012aa:	4003      	ands	r3, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	0573      	lsls	r3, r6, #21
 80012b0:	0d5b      	lsrs	r3, r3, #21
 80012b2:	08e4      	lsrs	r4, r4, #3
 80012b4:	0742      	lsls	r2, r0, #29
 80012b6:	4322      	orrs	r2, r4
 80012b8:	0244      	lsls	r4, r0, #9
 80012ba:	0b24      	lsrs	r4, r4, #12
 80012bc:	051b      	lsls	r3, r3, #20
 80012be:	4323      	orrs	r3, r4
 80012c0:	07ed      	lsls	r5, r5, #31
 80012c2:	432b      	orrs	r3, r5
 80012c4:	0010      	movs	r0, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	b003      	add	sp, #12
 80012ca:	bcf0      	pop	{r4, r5, r6, r7}
 80012cc:	46bb      	mov	fp, r7
 80012ce:	46b2      	mov	sl, r6
 80012d0:	46a9      	mov	r9, r5
 80012d2:	46a0      	mov	r8, r4
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_dadd+0x164>
 80012da:	e094      	b.n	8001406 <__aeabi_dadd+0x28e>
 80012dc:	4652      	mov	r2, sl
 80012de:	1b92      	subs	r2, r2, r6
 80012e0:	4691      	mov	r9, r2
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d000      	beq.n	80012e8 <__aeabi_dadd+0x170>
 80012e6:	e17e      	b.n	80015e6 <__aeabi_dadd+0x46e>
 80012e8:	003a      	movs	r2, r7
 80012ea:	4302      	orrs	r2, r0
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dadd+0x178>
 80012ee:	e1d7      	b.n	80016a0 <__aeabi_dadd+0x528>
 80012f0:	464b      	mov	r3, r9
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d100      	bne.n	80012fa <__aeabi_dadd+0x182>
 80012f8:	e252      	b.n	80017a0 <__aeabi_dadd+0x628>
 80012fa:	4c75      	ldr	r4, [pc, #468]	@ (80014d0 <__aeabi_dadd+0x358>)
 80012fc:	45a1      	cmp	r9, r4
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x18a>
 8001300:	e215      	b.n	800172e <__aeabi_dadd+0x5b6>
 8001302:	2401      	movs	r4, #1
 8001304:	2a38      	cmp	r2, #56	@ 0x38
 8001306:	dc13      	bgt.n	8001330 <__aeabi_dadd+0x1b8>
 8001308:	4691      	mov	r9, r2
 800130a:	464b      	mov	r3, r9
 800130c:	2b1f      	cmp	r3, #31
 800130e:	dd00      	ble.n	8001312 <__aeabi_dadd+0x19a>
 8001310:	e216      	b.n	8001740 <__aeabi_dadd+0x5c8>
 8001312:	2220      	movs	r2, #32
 8001314:	0005      	movs	r5, r0
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	003c      	movs	r4, r7
 800131a:	40dd      	lsrs	r5, r3
 800131c:	40df      	lsrs	r7, r3
 800131e:	4090      	lsls	r0, r2
 8001320:	465b      	mov	r3, fp
 8001322:	4094      	lsls	r4, r2
 8001324:	1bdb      	subs	r3, r3, r7
 8001326:	1e42      	subs	r2, r0, #1
 8001328:	4190      	sbcs	r0, r2
 800132a:	469b      	mov	fp, r3
 800132c:	432c      	orrs	r4, r5
 800132e:	4304      	orrs	r4, r0
 8001330:	4662      	mov	r2, ip
 8001332:	1b14      	subs	r4, r2, r4
 8001334:	45a4      	cmp	ip, r4
 8001336:	4192      	sbcs	r2, r2
 8001338:	465b      	mov	r3, fp
 800133a:	4252      	negs	r2, r2
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	4698      	mov	r8, r3
 8001340:	000d      	movs	r5, r1
 8001342:	4656      	mov	r6, sl
 8001344:	e76c      	b.n	8001220 <__aeabi_dadd+0xa8>
 8001346:	2a00      	cmp	r2, #0
 8001348:	dc00      	bgt.n	800134c <__aeabi_dadd+0x1d4>
 800134a:	e0c7      	b.n	80014dc <__aeabi_dadd+0x364>
 800134c:	4652      	mov	r2, sl
 800134e:	2a00      	cmp	r2, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_dadd+0x1dc>
 8001352:	e088      	b.n	8001466 <__aeabi_dadd+0x2ee>
 8001354:	4662      	mov	r2, ip
 8001356:	465b      	mov	r3, fp
 8001358:	431a      	orrs	r2, r3
 800135a:	d100      	bne.n	800135e <__aeabi_dadd+0x1e6>
 800135c:	e0fa      	b.n	8001554 <__aeabi_dadd+0x3dc>
 800135e:	464b      	mov	r3, r9
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	2b01      	cmp	r3, #1
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x1f0>
 8001366:	e1af      	b.n	80016c8 <__aeabi_dadd+0x550>
 8001368:	4959      	ldr	r1, [pc, #356]	@ (80014d0 <__aeabi_dadd+0x358>)
 800136a:	4589      	cmp	r9, r1
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x1f8>
 800136e:	e0e1      	b.n	8001534 <__aeabi_dadd+0x3bc>
 8001370:	2401      	movs	r4, #1
 8001372:	2a38      	cmp	r2, #56	@ 0x38
 8001374:	dc17      	bgt.n	80013a6 <__aeabi_dadd+0x22e>
 8001376:	4691      	mov	r9, r2
 8001378:	464b      	mov	r3, r9
 800137a:	2b1f      	cmp	r3, #31
 800137c:	dd00      	ble.n	8001380 <__aeabi_dadd+0x208>
 800137e:	e1bf      	b.n	8001700 <__aeabi_dadd+0x588>
 8001380:	2220      	movs	r2, #32
 8001382:	1ad2      	subs	r2, r2, r3
 8001384:	465b      	mov	r3, fp
 8001386:	4093      	lsls	r3, r2
 8001388:	4661      	mov	r1, ip
 800138a:	001c      	movs	r4, r3
 800138c:	464b      	mov	r3, r9
 800138e:	40d9      	lsrs	r1, r3
 8001390:	4663      	mov	r3, ip
 8001392:	4093      	lsls	r3, r2
 8001394:	001a      	movs	r2, r3
 8001396:	430c      	orrs	r4, r1
 8001398:	1e51      	subs	r1, r2, #1
 800139a:	418a      	sbcs	r2, r1
 800139c:	464b      	mov	r3, r9
 800139e:	4314      	orrs	r4, r2
 80013a0:	465a      	mov	r2, fp
 80013a2:	40da      	lsrs	r2, r3
 80013a4:	18bf      	adds	r7, r7, r2
 80013a6:	1824      	adds	r4, r4, r0
 80013a8:	4284      	cmp	r4, r0
 80013aa:	4180      	sbcs	r0, r0
 80013ac:	4240      	negs	r0, r0
 80013ae:	4680      	mov	r8, r0
 80013b0:	44b8      	add	r8, r7
 80013b2:	4643      	mov	r3, r8
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	d400      	bmi.n	80013ba <__aeabi_dadd+0x242>
 80013b8:	e084      	b.n	80014c4 <__aeabi_dadd+0x34c>
 80013ba:	4b45      	ldr	r3, [pc, #276]	@ (80014d0 <__aeabi_dadd+0x358>)
 80013bc:	3601      	adds	r6, #1
 80013be:	429e      	cmp	r6, r3
 80013c0:	d05e      	beq.n	8001480 <__aeabi_dadd+0x308>
 80013c2:	4642      	mov	r2, r8
 80013c4:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <__aeabi_dadd+0x35c>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	401a      	ands	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	4021      	ands	r1, r4
 80013ce:	0862      	lsrs	r2, r4, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	07dc      	lsls	r4, r3, #31
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	4698      	mov	r8, r3
 80013d8:	4314      	orrs	r4, r2
 80013da:	e74f      	b.n	800127c <__aeabi_dadd+0x104>
 80013dc:	4662      	mov	r2, ip
 80013de:	465b      	mov	r3, fp
 80013e0:	431a      	orrs	r2, r3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x26e>
 80013e4:	e0b6      	b.n	8001554 <__aeabi_dadd+0x3dc>
 80013e6:	464a      	mov	r2, r9
 80013e8:	4649      	mov	r1, r9
 80013ea:	3a01      	subs	r2, #1
 80013ec:	2901      	cmp	r1, #1
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x27a>
 80013f0:	e17b      	b.n	80016ea <__aeabi_dadd+0x572>
 80013f2:	4937      	ldr	r1, [pc, #220]	@ (80014d0 <__aeabi_dadd+0x358>)
 80013f4:	4589      	cmp	r9, r1
 80013f6:	d100      	bne.n	80013fa <__aeabi_dadd+0x282>
 80013f8:	e09c      	b.n	8001534 <__aeabi_dadd+0x3bc>
 80013fa:	2401      	movs	r4, #1
 80013fc:	2a38      	cmp	r2, #56	@ 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_dadd+0x28a>
 8001400:	e708      	b.n	8001214 <__aeabi_dadd+0x9c>
 8001402:	4691      	mov	r9, r2
 8001404:	e6f1      	b.n	80011ea <__aeabi_dadd+0x72>
 8001406:	4c34      	ldr	r4, [pc, #208]	@ (80014d8 <__aeabi_dadd+0x360>)
 8001408:	1c72      	adds	r2, r6, #1
 800140a:	4222      	tst	r2, r4
 800140c:	d000      	beq.n	8001410 <__aeabi_dadd+0x298>
 800140e:	e0d3      	b.n	80015b8 <__aeabi_dadd+0x440>
 8001410:	003c      	movs	r4, r7
 8001412:	4662      	mov	r2, ip
 8001414:	465b      	mov	r3, fp
 8001416:	4304      	orrs	r4, r0
 8001418:	431a      	orrs	r2, r3
 800141a:	2e00      	cmp	r6, #0
 800141c:	d000      	beq.n	8001420 <__aeabi_dadd+0x2a8>
 800141e:	e144      	b.n	80016aa <__aeabi_dadd+0x532>
 8001420:	2c00      	cmp	r4, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x2ae>
 8001424:	e1ca      	b.n	80017bc <__aeabi_dadd+0x644>
 8001426:	2a00      	cmp	r2, #0
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x2b4>
 800142a:	e17d      	b.n	8001728 <__aeabi_dadd+0x5b0>
 800142c:	4663      	mov	r3, ip
 800142e:	1ac6      	subs	r6, r0, r3
 8001430:	42b0      	cmp	r0, r6
 8001432:	4192      	sbcs	r2, r2
 8001434:	465b      	mov	r3, fp
 8001436:	4252      	negs	r2, r2
 8001438:	1afc      	subs	r4, r7, r3
 800143a:	1aa4      	subs	r4, r4, r2
 800143c:	2280      	movs	r2, #128	@ 0x80
 800143e:	0412      	lsls	r2, r2, #16
 8001440:	4214      	tst	r4, r2
 8001442:	d100      	bne.n	8001446 <__aeabi_dadd+0x2ce>
 8001444:	e212      	b.n	800186c <__aeabi_dadd+0x6f4>
 8001446:	4663      	mov	r3, ip
 8001448:	1a1c      	subs	r4, r3, r0
 800144a:	465b      	mov	r3, fp
 800144c:	1bd8      	subs	r0, r3, r7
 800144e:	45a4      	cmp	ip, r4
 8001450:	419b      	sbcs	r3, r3
 8001452:	425b      	negs	r3, r3
 8001454:	1ac0      	subs	r0, r0, r3
 8001456:	4210      	tst	r0, r2
 8001458:	d100      	bne.n	800145c <__aeabi_dadd+0x2e4>
 800145a:	e21d      	b.n	8001898 <__aeabi_dadd+0x720>
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <__aeabi_dadd+0x35c>)
 800145e:	000d      	movs	r5, r1
 8001460:	4018      	ands	r0, r3
 8001462:	2301      	movs	r3, #1
 8001464:	e725      	b.n	80012b2 <__aeabi_dadd+0x13a>
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <__aeabi_dadd+0x358>)
 8001468:	4296      	cmp	r6, r2
 800146a:	d063      	beq.n	8001534 <__aeabi_dadd+0x3bc>
 800146c:	464a      	mov	r2, r9
 800146e:	2401      	movs	r4, #1
 8001470:	2a38      	cmp	r2, #56	@ 0x38
 8001472:	dc98      	bgt.n	80013a6 <__aeabi_dadd+0x22e>
 8001474:	2280      	movs	r2, #128	@ 0x80
 8001476:	465b      	mov	r3, fp
 8001478:	0412      	lsls	r2, r2, #16
 800147a:	4313      	orrs	r3, r2
 800147c:	469b      	mov	fp, r3
 800147e:	e77b      	b.n	8001378 <__aeabi_dadd+0x200>
 8001480:	0033      	movs	r3, r6
 8001482:	2400      	movs	r4, #0
 8001484:	2200      	movs	r2, #0
 8001486:	e719      	b.n	80012bc <__aeabi_dadd+0x144>
 8001488:	0020      	movs	r0, r4
 800148a:	f001 fd13 	bl	8002eb4 <__clzsi2>
 800148e:	0003      	movs	r3, r0
 8001490:	3318      	adds	r3, #24
 8001492:	2b1f      	cmp	r3, #31
 8001494:	dc00      	bgt.n	8001498 <__aeabi_dadd+0x320>
 8001496:	e6d4      	b.n	8001242 <__aeabi_dadd+0xca>
 8001498:	3808      	subs	r0, #8
 800149a:	4084      	lsls	r4, r0
 800149c:	0027      	movs	r7, r4
 800149e:	429e      	cmp	r6, r3
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x32c>
 80014a2:	e0c4      	b.n	800162e <__aeabi_dadd+0x4b6>
 80014a4:	1b9b      	subs	r3, r3, r6
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	291f      	cmp	r1, #31
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_dadd+0x336>
 80014ac:	e1cc      	b.n	8001848 <__aeabi_dadd+0x6d0>
 80014ae:	3b1f      	subs	r3, #31
 80014b0:	40dc      	lsrs	r4, r3
 80014b2:	2920      	cmp	r1, #32
 80014b4:	d005      	beq.n	80014c2 <__aeabi_dadd+0x34a>
 80014b6:	2340      	movs	r3, #64	@ 0x40
 80014b8:	1a5b      	subs	r3, r3, r1
 80014ba:	409f      	lsls	r7, r3
 80014bc:	1e7b      	subs	r3, r7, #1
 80014be:	419f      	sbcs	r7, r3
 80014c0:	433c      	orrs	r4, r7
 80014c2:	2600      	movs	r6, #0
 80014c4:	0763      	lsls	r3, r4, #29
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x352>
 80014c8:	e6da      	b.n	8001280 <__aeabi_dadd+0x108>
 80014ca:	46b1      	mov	r9, r6
 80014cc:	e10a      	b.n	80016e4 <__aeabi_dadd+0x56c>
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	ff7fffff 	.word	0xff7fffff
 80014d8:	000007fe 	.word	0x000007fe
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d046      	beq.n	800156e <__aeabi_dadd+0x3f6>
 80014e0:	4652      	mov	r2, sl
 80014e2:	1b92      	subs	r2, r2, r6
 80014e4:	4691      	mov	r9, r2
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x374>
 80014ea:	e0a9      	b.n	8001640 <__aeabi_dadd+0x4c8>
 80014ec:	4ad3      	ldr	r2, [pc, #844]	@ (800183c <__aeabi_dadd+0x6c4>)
 80014ee:	4592      	cmp	sl, r2
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x37c>
 80014f2:	e121      	b.n	8001738 <__aeabi_dadd+0x5c0>
 80014f4:	464b      	mov	r3, r9
 80014f6:	2401      	movs	r4, #1
 80014f8:	2b38      	cmp	r3, #56	@ 0x38
 80014fa:	dc13      	bgt.n	8001524 <__aeabi_dadd+0x3ac>
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	0412      	lsls	r2, r2, #16
 8001500:	4317      	orrs	r7, r2
 8001502:	464b      	mov	r3, r9
 8001504:	2b1f      	cmp	r3, #31
 8001506:	dd00      	ble.n	800150a <__aeabi_dadd+0x392>
 8001508:	e184      	b.n	8001814 <__aeabi_dadd+0x69c>
 800150a:	2220      	movs	r2, #32
 800150c:	003c      	movs	r4, r7
 800150e:	1ad2      	subs	r2, r2, r3
 8001510:	0001      	movs	r1, r0
 8001512:	4090      	lsls	r0, r2
 8001514:	4094      	lsls	r4, r2
 8001516:	40d9      	lsrs	r1, r3
 8001518:	1e42      	subs	r2, r0, #1
 800151a:	4190      	sbcs	r0, r2
 800151c:	40df      	lsrs	r7, r3
 800151e:	430c      	orrs	r4, r1
 8001520:	4304      	orrs	r4, r0
 8001522:	44bb      	add	fp, r7
 8001524:	4464      	add	r4, ip
 8001526:	4564      	cmp	r4, ip
 8001528:	4192      	sbcs	r2, r2
 800152a:	4252      	negs	r2, r2
 800152c:	4690      	mov	r8, r2
 800152e:	4656      	mov	r6, sl
 8001530:	44d8      	add	r8, fp
 8001532:	e73e      	b.n	80013b2 <__aeabi_dadd+0x23a>
 8001534:	08c0      	lsrs	r0, r0, #3
 8001536:	077a      	lsls	r2, r7, #29
 8001538:	4302      	orrs	r2, r0
 800153a:	08ff      	lsrs	r7, r7, #3
 800153c:	003b      	movs	r3, r7
 800153e:	4313      	orrs	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x3ce>
 8001544:	e1a4      	b.n	8001890 <__aeabi_dadd+0x718>
 8001546:	2480      	movs	r4, #128	@ 0x80
 8001548:	0324      	lsls	r4, r4, #12
 800154a:	433c      	orrs	r4, r7
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	4bbb      	ldr	r3, [pc, #748]	@ (800183c <__aeabi_dadd+0x6c4>)
 8001550:	0b24      	lsrs	r4, r4, #12
 8001552:	e6b3      	b.n	80012bc <__aeabi_dadd+0x144>
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	4bb9      	ldr	r3, [pc, #740]	@ (800183c <__aeabi_dadd+0x6c4>)
 8001558:	077a      	lsls	r2, r7, #29
 800155a:	4302      	orrs	r2, r0
 800155c:	08ff      	lsrs	r7, r7, #3
 800155e:	4599      	cmp	r9, r3
 8001560:	d0ec      	beq.n	800153c <__aeabi_dadd+0x3c4>
 8001562:	464b      	mov	r3, r9
 8001564:	033c      	lsls	r4, r7, #12
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	0b24      	lsrs	r4, r4, #12
 800156a:	0d5b      	lsrs	r3, r3, #21
 800156c:	e6a6      	b.n	80012bc <__aeabi_dadd+0x144>
 800156e:	4ab4      	ldr	r2, [pc, #720]	@ (8001840 <__aeabi_dadd+0x6c8>)
 8001570:	1c71      	adds	r1, r6, #1
 8001572:	4211      	tst	r1, r2
 8001574:	d176      	bne.n	8001664 <__aeabi_dadd+0x4ec>
 8001576:	003a      	movs	r2, r7
 8001578:	4302      	orrs	r2, r0
 800157a:	2e00      	cmp	r6, #0
 800157c:	d000      	beq.n	8001580 <__aeabi_dadd+0x408>
 800157e:	e0ee      	b.n	800175e <__aeabi_dadd+0x5e6>
 8001580:	2a00      	cmp	r2, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x40e>
 8001584:	e141      	b.n	800180a <__aeabi_dadd+0x692>
 8001586:	4662      	mov	r2, ip
 8001588:	465b      	mov	r3, fp
 800158a:	431a      	orrs	r2, r3
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x418>
 800158e:	e0cb      	b.n	8001728 <__aeabi_dadd+0x5b0>
 8001590:	4663      	mov	r3, ip
 8001592:	18c2      	adds	r2, r0, r3
 8001594:	4282      	cmp	r2, r0
 8001596:	4180      	sbcs	r0, r0
 8001598:	003b      	movs	r3, r7
 800159a:	4240      	negs	r0, r0
 800159c:	445b      	add	r3, fp
 800159e:	181c      	adds	r4, r3, r0
 80015a0:	08d3      	lsrs	r3, r2, #3
 80015a2:	0222      	lsls	r2, r4, #8
 80015a4:	d400      	bmi.n	80015a8 <__aeabi_dadd+0x430>
 80015a6:	e16d      	b.n	8001884 <__aeabi_dadd+0x70c>
 80015a8:	4aa6      	ldr	r2, [pc, #664]	@ (8001844 <__aeabi_dadd+0x6cc>)
 80015aa:	4014      	ands	r4, r2
 80015ac:	0762      	lsls	r2, r4, #29
 80015ae:	0264      	lsls	r4, r4, #9
 80015b0:	431a      	orrs	r2, r3
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	2301      	movs	r3, #1
 80015b6:	e681      	b.n	80012bc <__aeabi_dadd+0x144>
 80015b8:	4662      	mov	r2, ip
 80015ba:	1a84      	subs	r4, r0, r2
 80015bc:	42a0      	cmp	r0, r4
 80015be:	4192      	sbcs	r2, r2
 80015c0:	465b      	mov	r3, fp
 80015c2:	4252      	negs	r2, r2
 80015c4:	4691      	mov	r9, r2
 80015c6:	1afb      	subs	r3, r7, r3
 80015c8:	001a      	movs	r2, r3
 80015ca:	464b      	mov	r3, r9
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	4690      	mov	r8, r2
 80015d2:	021a      	lsls	r2, r3, #8
 80015d4:	d459      	bmi.n	800168a <__aeabi_dadd+0x512>
 80015d6:	4642      	mov	r2, r8
 80015d8:	4322      	orrs	r2, r4
 80015da:	d000      	beq.n	80015de <__aeabi_dadd+0x466>
 80015dc:	e628      	b.n	8001230 <__aeabi_dadd+0xb8>
 80015de:	2500      	movs	r5, #0
 80015e0:	2300      	movs	r3, #0
 80015e2:	2400      	movs	r4, #0
 80015e4:	e66a      	b.n	80012bc <__aeabi_dadd+0x144>
 80015e6:	4a95      	ldr	r2, [pc, #596]	@ (800183c <__aeabi_dadd+0x6c4>)
 80015e8:	4592      	cmp	sl, r2
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x476>
 80015ec:	e09f      	b.n	800172e <__aeabi_dadd+0x5b6>
 80015ee:	464b      	mov	r3, r9
 80015f0:	2401      	movs	r4, #1
 80015f2:	2b38      	cmp	r3, #56	@ 0x38
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dadd+0x480>
 80015f6:	e69b      	b.n	8001330 <__aeabi_dadd+0x1b8>
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	0412      	lsls	r2, r2, #16
 80015fc:	4317      	orrs	r7, r2
 80015fe:	e684      	b.n	800130a <__aeabi_dadd+0x192>
 8001600:	1af6      	subs	r6, r6, r3
 8001602:	4b90      	ldr	r3, [pc, #576]	@ (8001844 <__aeabi_dadd+0x6cc>)
 8001604:	401f      	ands	r7, r3
 8001606:	46b8      	mov	r8, r7
 8001608:	e638      	b.n	800127c <__aeabi_dadd+0x104>
 800160a:	4659      	mov	r1, fp
 800160c:	464b      	mov	r3, r9
 800160e:	3a20      	subs	r2, #32
 8001610:	40d1      	lsrs	r1, r2
 8001612:	2b20      	cmp	r3, #32
 8001614:	d006      	beq.n	8001624 <__aeabi_dadd+0x4ac>
 8001616:	2240      	movs	r2, #64	@ 0x40
 8001618:	1ad2      	subs	r2, r2, r3
 800161a:	465b      	mov	r3, fp
 800161c:	4093      	lsls	r3, r2
 800161e:	4662      	mov	r2, ip
 8001620:	431a      	orrs	r2, r3
 8001622:	4694      	mov	ip, r2
 8001624:	4664      	mov	r4, ip
 8001626:	1e63      	subs	r3, r4, #1
 8001628:	419c      	sbcs	r4, r3
 800162a:	430c      	orrs	r4, r1
 800162c:	e5f2      	b.n	8001214 <__aeabi_dadd+0x9c>
 800162e:	1af3      	subs	r3, r6, r3
 8001630:	4699      	mov	r9, r3
 8001632:	4b84      	ldr	r3, [pc, #528]	@ (8001844 <__aeabi_dadd+0x6cc>)
 8001634:	401f      	ands	r7, r3
 8001636:	4643      	mov	r3, r8
 8001638:	077a      	lsls	r2, r7, #29
 800163a:	431a      	orrs	r2, r3
 800163c:	08ff      	lsrs	r7, r7, #3
 800163e:	e790      	b.n	8001562 <__aeabi_dadd+0x3ea>
 8001640:	003a      	movs	r2, r7
 8001642:	4302      	orrs	r2, r0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x4d0>
 8001646:	e0c6      	b.n	80017d6 <__aeabi_dadd+0x65e>
 8001648:	464b      	mov	r3, r9
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x4da>
 8001650:	e102      	b.n	8001858 <__aeabi_dadd+0x6e0>
 8001652:	497a      	ldr	r1, [pc, #488]	@ (800183c <__aeabi_dadd+0x6c4>)
 8001654:	4589      	cmp	r9, r1
 8001656:	d06f      	beq.n	8001738 <__aeabi_dadd+0x5c0>
 8001658:	2401      	movs	r4, #1
 800165a:	2a38      	cmp	r2, #56	@ 0x38
 800165c:	dd00      	ble.n	8001660 <__aeabi_dadd+0x4e8>
 800165e:	e761      	b.n	8001524 <__aeabi_dadd+0x3ac>
 8001660:	4691      	mov	r9, r2
 8001662:	e74e      	b.n	8001502 <__aeabi_dadd+0x38a>
 8001664:	4a75      	ldr	r2, [pc, #468]	@ (800183c <__aeabi_dadd+0x6c4>)
 8001666:	4291      	cmp	r1, r2
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x4f4>
 800166a:	e0f1      	b.n	8001850 <__aeabi_dadd+0x6d8>
 800166c:	4663      	mov	r3, ip
 800166e:	18c2      	adds	r2, r0, r3
 8001670:	4282      	cmp	r2, r0
 8001672:	4180      	sbcs	r0, r0
 8001674:	003b      	movs	r3, r7
 8001676:	4240      	negs	r0, r0
 8001678:	445b      	add	r3, fp
 800167a:	181b      	adds	r3, r3, r0
 800167c:	07dc      	lsls	r4, r3, #31
 800167e:	0852      	lsrs	r2, r2, #1
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	4698      	mov	r8, r3
 8001684:	000e      	movs	r6, r1
 8001686:	4314      	orrs	r4, r2
 8001688:	e5f8      	b.n	800127c <__aeabi_dadd+0x104>
 800168a:	4663      	mov	r3, ip
 800168c:	1a1c      	subs	r4, r3, r0
 800168e:	45a4      	cmp	ip, r4
 8001690:	4192      	sbcs	r2, r2
 8001692:	465b      	mov	r3, fp
 8001694:	4252      	negs	r2, r2
 8001696:	1bdb      	subs	r3, r3, r7
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	4698      	mov	r8, r3
 800169c:	000d      	movs	r5, r1
 800169e:	e5c7      	b.n	8001230 <__aeabi_dadd+0xb8>
 80016a0:	4663      	mov	r3, ip
 80016a2:	000d      	movs	r5, r1
 80016a4:	465f      	mov	r7, fp
 80016a6:	08d8      	lsrs	r0, r3, #3
 80016a8:	e755      	b.n	8001556 <__aeabi_dadd+0x3de>
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d000      	beq.n	80016b0 <__aeabi_dadd+0x538>
 80016ae:	e096      	b.n	80017de <__aeabi_dadd+0x666>
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x53e>
 80016b4:	e0e2      	b.n	800187c <__aeabi_dadd+0x704>
 80016b6:	4662      	mov	r2, ip
 80016b8:	08df      	lsrs	r7, r3, #3
 80016ba:	08d2      	lsrs	r2, r2, #3
 80016bc:	075b      	lsls	r3, r3, #29
 80016be:	431a      	orrs	r2, r3
 80016c0:	003b      	movs	r3, r7
 80016c2:	000d      	movs	r5, r1
 80016c4:	4313      	orrs	r3, r2
 80016c6:	e73b      	b.n	8001540 <__aeabi_dadd+0x3c8>
 80016c8:	4663      	mov	r3, ip
 80016ca:	18c4      	adds	r4, r0, r3
 80016cc:	003b      	movs	r3, r7
 80016ce:	4284      	cmp	r4, r0
 80016d0:	4180      	sbcs	r0, r0
 80016d2:	445b      	add	r3, fp
 80016d4:	4698      	mov	r8, r3
 80016d6:	4240      	negs	r0, r0
 80016d8:	4480      	add	r8, r0
 80016da:	4643      	mov	r3, r8
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	d46b      	bmi.n	80017b8 <__aeabi_dadd+0x640>
 80016e0:	2301      	movs	r3, #1
 80016e2:	4699      	mov	r9, r3
 80016e4:	4647      	mov	r7, r8
 80016e6:	08e0      	lsrs	r0, r4, #3
 80016e8:	e735      	b.n	8001556 <__aeabi_dadd+0x3de>
 80016ea:	4663      	mov	r3, ip
 80016ec:	1ac4      	subs	r4, r0, r3
 80016ee:	42a0      	cmp	r0, r4
 80016f0:	4180      	sbcs	r0, r0
 80016f2:	465b      	mov	r3, fp
 80016f4:	4240      	negs	r0, r0
 80016f6:	1afb      	subs	r3, r7, r3
 80016f8:	1a1b      	subs	r3, r3, r0
 80016fa:	4698      	mov	r8, r3
 80016fc:	2601      	movs	r6, #1
 80016fe:	e58f      	b.n	8001220 <__aeabi_dadd+0xa8>
 8001700:	464a      	mov	r2, r9
 8001702:	465b      	mov	r3, fp
 8001704:	3a20      	subs	r2, #32
 8001706:	40d3      	lsrs	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	464b      	mov	r3, r9
 800170c:	2b20      	cmp	r3, #32
 800170e:	d006      	beq.n	800171e <__aeabi_dadd+0x5a6>
 8001710:	2240      	movs	r2, #64	@ 0x40
 8001712:	1ad2      	subs	r2, r2, r3
 8001714:	465b      	mov	r3, fp
 8001716:	4093      	lsls	r3, r2
 8001718:	4662      	mov	r2, ip
 800171a:	431a      	orrs	r2, r3
 800171c:	4694      	mov	ip, r2
 800171e:	4664      	mov	r4, ip
 8001720:	1e63      	subs	r3, r4, #1
 8001722:	419c      	sbcs	r4, r3
 8001724:	430c      	orrs	r4, r1
 8001726:	e63e      	b.n	80013a6 <__aeabi_dadd+0x22e>
 8001728:	08c3      	lsrs	r3, r0, #3
 800172a:	4698      	mov	r8, r3
 800172c:	e783      	b.n	8001636 <__aeabi_dadd+0x4be>
 800172e:	4663      	mov	r3, ip
 8001730:	000d      	movs	r5, r1
 8001732:	465f      	mov	r7, fp
 8001734:	08d8      	lsrs	r0, r3, #3
 8001736:	e6fe      	b.n	8001536 <__aeabi_dadd+0x3be>
 8001738:	4663      	mov	r3, ip
 800173a:	465f      	mov	r7, fp
 800173c:	08d8      	lsrs	r0, r3, #3
 800173e:	e6fa      	b.n	8001536 <__aeabi_dadd+0x3be>
 8001740:	464a      	mov	r2, r9
 8001742:	003d      	movs	r5, r7
 8001744:	3a20      	subs	r2, #32
 8001746:	40d5      	lsrs	r5, r2
 8001748:	2b20      	cmp	r3, #32
 800174a:	d003      	beq.n	8001754 <__aeabi_dadd+0x5dc>
 800174c:	2240      	movs	r2, #64	@ 0x40
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	4097      	lsls	r7, r2
 8001752:	4338      	orrs	r0, r7
 8001754:	1e42      	subs	r2, r0, #1
 8001756:	4190      	sbcs	r0, r2
 8001758:	0004      	movs	r4, r0
 800175a:	432c      	orrs	r4, r5
 800175c:	e5e8      	b.n	8001330 <__aeabi_dadd+0x1b8>
 800175e:	2a00      	cmp	r2, #0
 8001760:	d0ea      	beq.n	8001738 <__aeabi_dadd+0x5c0>
 8001762:	4662      	mov	r2, ip
 8001764:	465b      	mov	r3, fp
 8001766:	431a      	orrs	r2, r3
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x5f4>
 800176a:	e6e3      	b.n	8001534 <__aeabi_dadd+0x3bc>
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	08fe      	lsrs	r6, r7, #3
 8001770:	08c0      	lsrs	r0, r0, #3
 8001772:	077f      	lsls	r7, r7, #29
 8001774:	0312      	lsls	r2, r2, #12
 8001776:	4338      	orrs	r0, r7
 8001778:	4216      	tst	r6, r2
 800177a:	d008      	beq.n	800178e <__aeabi_dadd+0x616>
 800177c:	08d9      	lsrs	r1, r3, #3
 800177e:	4211      	tst	r1, r2
 8001780:	d105      	bne.n	800178e <__aeabi_dadd+0x616>
 8001782:	4663      	mov	r3, ip
 8001784:	08d8      	lsrs	r0, r3, #3
 8001786:	465b      	mov	r3, fp
 8001788:	000e      	movs	r6, r1
 800178a:	075b      	lsls	r3, r3, #29
 800178c:	4318      	orrs	r0, r3
 800178e:	0033      	movs	r3, r6
 8001790:	0f42      	lsrs	r2, r0, #29
 8001792:	00c0      	lsls	r0, r0, #3
 8001794:	0752      	lsls	r2, r2, #29
 8001796:	08c0      	lsrs	r0, r0, #3
 8001798:	4302      	orrs	r2, r0
 800179a:	0037      	movs	r7, r6
 800179c:	4313      	orrs	r3, r2
 800179e:	e6cf      	b.n	8001540 <__aeabi_dadd+0x3c8>
 80017a0:	4663      	mov	r3, ip
 80017a2:	1a1c      	subs	r4, r3, r0
 80017a4:	45a4      	cmp	ip, r4
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	465b      	mov	r3, fp
 80017aa:	4252      	negs	r2, r2
 80017ac:	1bdb      	subs	r3, r3, r7
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	4698      	mov	r8, r3
 80017b2:	000d      	movs	r5, r1
 80017b4:	2601      	movs	r6, #1
 80017b6:	e533      	b.n	8001220 <__aeabi_dadd+0xa8>
 80017b8:	2602      	movs	r6, #2
 80017ba:	e602      	b.n	80013c2 <__aeabi_dadd+0x24a>
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x64a>
 80017c0:	e70d      	b.n	80015de <__aeabi_dadd+0x466>
 80017c2:	4663      	mov	r3, ip
 80017c4:	08d8      	lsrs	r0, r3, #3
 80017c6:	465b      	mov	r3, fp
 80017c8:	075a      	lsls	r2, r3, #29
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	0b1c      	lsrs	r4, r3, #12
 80017ce:	000d      	movs	r5, r1
 80017d0:	2300      	movs	r3, #0
 80017d2:	4302      	orrs	r2, r0
 80017d4:	e572      	b.n	80012bc <__aeabi_dadd+0x144>
 80017d6:	4663      	mov	r3, ip
 80017d8:	465f      	mov	r7, fp
 80017da:	08d8      	lsrs	r0, r3, #3
 80017dc:	e6bb      	b.n	8001556 <__aeabi_dadd+0x3de>
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d100      	bne.n	80017e4 <__aeabi_dadd+0x66c>
 80017e2:	e6a7      	b.n	8001534 <__aeabi_dadd+0x3bc>
 80017e4:	2280      	movs	r2, #128	@ 0x80
 80017e6:	08fe      	lsrs	r6, r7, #3
 80017e8:	08c0      	lsrs	r0, r0, #3
 80017ea:	077f      	lsls	r7, r7, #29
 80017ec:	0312      	lsls	r2, r2, #12
 80017ee:	4338      	orrs	r0, r7
 80017f0:	4216      	tst	r6, r2
 80017f2:	d0cc      	beq.n	800178e <__aeabi_dadd+0x616>
 80017f4:	08dc      	lsrs	r4, r3, #3
 80017f6:	4214      	tst	r4, r2
 80017f8:	d1c9      	bne.n	800178e <__aeabi_dadd+0x616>
 80017fa:	4663      	mov	r3, ip
 80017fc:	08d8      	lsrs	r0, r3, #3
 80017fe:	465b      	mov	r3, fp
 8001800:	075b      	lsls	r3, r3, #29
 8001802:	000d      	movs	r5, r1
 8001804:	0026      	movs	r6, r4
 8001806:	4318      	orrs	r0, r3
 8001808:	e7c1      	b.n	800178e <__aeabi_dadd+0x616>
 800180a:	4663      	mov	r3, ip
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	4698      	mov	r8, r3
 8001810:	465f      	mov	r7, fp
 8001812:	e710      	b.n	8001636 <__aeabi_dadd+0x4be>
 8001814:	464a      	mov	r2, r9
 8001816:	0039      	movs	r1, r7
 8001818:	3a20      	subs	r2, #32
 800181a:	40d1      	lsrs	r1, r2
 800181c:	2b20      	cmp	r3, #32
 800181e:	d003      	beq.n	8001828 <__aeabi_dadd+0x6b0>
 8001820:	2240      	movs	r2, #64	@ 0x40
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	4097      	lsls	r7, r2
 8001826:	4338      	orrs	r0, r7
 8001828:	1e42      	subs	r2, r0, #1
 800182a:	4190      	sbcs	r0, r2
 800182c:	0004      	movs	r4, r0
 800182e:	430c      	orrs	r4, r1
 8001830:	e678      	b.n	8001524 <__aeabi_dadd+0x3ac>
 8001832:	46b1      	mov	r9, r6
 8001834:	4647      	mov	r7, r8
 8001836:	08e0      	lsrs	r0, r4, #3
 8001838:	e68d      	b.n	8001556 <__aeabi_dadd+0x3de>
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	000007ff 	.word	0x000007ff
 8001840:	000007fe 	.word	0x000007fe
 8001844:	ff7fffff 	.word	0xff7fffff
 8001848:	2220      	movs	r2, #32
 800184a:	2400      	movs	r4, #0
 800184c:	1a52      	subs	r2, r2, r1
 800184e:	e50c      	b.n	800126a <__aeabi_dadd+0xf2>
 8001850:	000b      	movs	r3, r1
 8001852:	2400      	movs	r4, #0
 8001854:	2200      	movs	r2, #0
 8001856:	e531      	b.n	80012bc <__aeabi_dadd+0x144>
 8001858:	003b      	movs	r3, r7
 800185a:	4460      	add	r0, ip
 800185c:	4560      	cmp	r0, ip
 800185e:	4192      	sbcs	r2, r2
 8001860:	445b      	add	r3, fp
 8001862:	4698      	mov	r8, r3
 8001864:	4252      	negs	r2, r2
 8001866:	0004      	movs	r4, r0
 8001868:	4490      	add	r8, r2
 800186a:	e736      	b.n	80016da <__aeabi_dadd+0x562>
 800186c:	0032      	movs	r2, r6
 800186e:	4322      	orrs	r2, r4
 8001870:	d100      	bne.n	8001874 <__aeabi_dadd+0x6fc>
 8001872:	e6b4      	b.n	80015de <__aeabi_dadd+0x466>
 8001874:	08f3      	lsrs	r3, r6, #3
 8001876:	4698      	mov	r8, r3
 8001878:	0027      	movs	r7, r4
 800187a:	e6dc      	b.n	8001636 <__aeabi_dadd+0x4be>
 800187c:	2780      	movs	r7, #128	@ 0x80
 800187e:	2500      	movs	r5, #0
 8001880:	033f      	lsls	r7, r7, #12
 8001882:	e660      	b.n	8001546 <__aeabi_dadd+0x3ce>
 8001884:	0762      	lsls	r2, r4, #29
 8001886:	0264      	lsls	r4, r4, #9
 8001888:	431a      	orrs	r2, r3
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	2300      	movs	r3, #0
 800188e:	e515      	b.n	80012bc <__aeabi_dadd+0x144>
 8001890:	2200      	movs	r2, #0
 8001892:	2400      	movs	r4, #0
 8001894:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <__aeabi_dadd+0x72c>)
 8001896:	e511      	b.n	80012bc <__aeabi_dadd+0x144>
 8001898:	0742      	lsls	r2, r0, #29
 800189a:	08e4      	lsrs	r4, r4, #3
 800189c:	000d      	movs	r5, r1
 800189e:	4322      	orrs	r2, r4
 80018a0:	08c7      	lsrs	r7, r0, #3
 80018a2:	e65e      	b.n	8001562 <__aeabi_dadd+0x3ea>
 80018a4:	000007ff 	.word	0x000007ff

080018a8 <__aeabi_ddiv>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	46de      	mov	lr, fp
 80018ac:	4645      	mov	r5, r8
 80018ae:	4657      	mov	r7, sl
 80018b0:	464e      	mov	r6, r9
 80018b2:	b5e0      	push	{r5, r6, r7, lr}
 80018b4:	b087      	sub	sp, #28
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	030b      	lsls	r3, r1, #12
 80018bc:	0b1b      	lsrs	r3, r3, #12
 80018be:	469b      	mov	fp, r3
 80018c0:	0fca      	lsrs	r2, r1, #31
 80018c2:	004b      	lsls	r3, r1, #1
 80018c4:	0004      	movs	r4, r0
 80018c6:	4680      	mov	r8, r0
 80018c8:	0d5b      	lsrs	r3, r3, #21
 80018ca:	9202      	str	r2, [sp, #8]
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0x28>
 80018ce:	e089      	b.n	80019e4 <__aeabi_ddiv+0x13c>
 80018d0:	4a8a      	ldr	r2, [pc, #552]	@ (8001afc <__aeabi_ddiv+0x254>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d038      	beq.n	8001948 <__aeabi_ddiv+0xa0>
 80018d6:	4659      	mov	r1, fp
 80018d8:	0f42      	lsrs	r2, r0, #29
 80018da:	00c9      	lsls	r1, r1, #3
 80018dc:	430a      	orrs	r2, r1
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	0409      	lsls	r1, r1, #16
 80018e2:	4311      	orrs	r1, r2
 80018e4:	00c2      	lsls	r2, r0, #3
 80018e6:	4690      	mov	r8, r2
 80018e8:	4a85      	ldr	r2, [pc, #532]	@ (8001b00 <__aeabi_ddiv+0x258>)
 80018ea:	4689      	mov	r9, r1
 80018ec:	4692      	mov	sl, r2
 80018ee:	449a      	add	sl, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	2400      	movs	r4, #0
 80018f4:	9303      	str	r3, [sp, #12]
 80018f6:	9e00      	ldr	r6, [sp, #0]
 80018f8:	9f01      	ldr	r7, [sp, #4]
 80018fa:	033b      	lsls	r3, r7, #12
 80018fc:	0b1b      	lsrs	r3, r3, #12
 80018fe:	469b      	mov	fp, r3
 8001900:	007b      	lsls	r3, r7, #1
 8001902:	0030      	movs	r0, r6
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	0ffd      	lsrs	r5, r7, #31
 8001908:	2b00      	cmp	r3, #0
 800190a:	d100      	bne.n	800190e <__aeabi_ddiv+0x66>
 800190c:	e09e      	b.n	8001a4c <__aeabi_ddiv+0x1a4>
 800190e:	4a7b      	ldr	r2, [pc, #492]	@ (8001afc <__aeabi_ddiv+0x254>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d100      	bne.n	8001916 <__aeabi_ddiv+0x6e>
 8001914:	e08c      	b.n	8001a30 <__aeabi_ddiv+0x188>
 8001916:	4659      	mov	r1, fp
 8001918:	0f72      	lsrs	r2, r6, #29
 800191a:	00c9      	lsls	r1, r1, #3
 800191c:	430a      	orrs	r2, r1
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	0409      	lsls	r1, r1, #16
 8001922:	4311      	orrs	r1, r2
 8001924:	468b      	mov	fp, r1
 8001926:	4976      	ldr	r1, [pc, #472]	@ (8001b00 <__aeabi_ddiv+0x258>)
 8001928:	00f2      	lsls	r2, r6, #3
 800192a:	468c      	mov	ip, r1
 800192c:	4651      	mov	r1, sl
 800192e:	4463      	add	r3, ip
 8001930:	1acb      	subs	r3, r1, r3
 8001932:	469a      	mov	sl, r3
 8001934:	2100      	movs	r1, #0
 8001936:	9e02      	ldr	r6, [sp, #8]
 8001938:	406e      	eors	r6, r5
 800193a:	2c0f      	cmp	r4, #15
 800193c:	d900      	bls.n	8001940 <__aeabi_ddiv+0x98>
 800193e:	e0ef      	b.n	8001b20 <__aeabi_ddiv+0x278>
 8001940:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <__aeabi_ddiv+0x25c>)
 8001942:	00a4      	lsls	r4, r4, #2
 8001944:	591b      	ldr	r3, [r3, r4]
 8001946:	469f      	mov	pc, r3
 8001948:	465a      	mov	r2, fp
 800194a:	4302      	orrs	r2, r0
 800194c:	4691      	mov	r9, r2
 800194e:	d000      	beq.n	8001952 <__aeabi_ddiv+0xaa>
 8001950:	e09d      	b.n	8001a8e <__aeabi_ddiv+0x1e6>
 8001952:	469a      	mov	sl, r3
 8001954:	2302      	movs	r3, #2
 8001956:	4690      	mov	r8, r2
 8001958:	2408      	movs	r4, #8
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	e7cb      	b.n	80018f6 <__aeabi_ddiv+0x4e>
 800195e:	002e      	movs	r6, r5
 8001960:	2200      	movs	r2, #0
 8001962:	2400      	movs	r4, #0
 8001964:	4690      	mov	r8, r2
 8001966:	4b65      	ldr	r3, [pc, #404]	@ (8001afc <__aeabi_ddiv+0x254>)
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	4323      	orrs	r3, r4
 800196c:	07f6      	lsls	r6, r6, #31
 800196e:	4333      	orrs	r3, r6
 8001970:	4640      	mov	r0, r8
 8001972:	0019      	movs	r1, r3
 8001974:	b007      	add	sp, #28
 8001976:	bcf0      	pop	{r4, r5, r6, r7}
 8001978:	46bb      	mov	fp, r7
 800197a:	46b2      	mov	sl, r6
 800197c:	46a9      	mov	r9, r5
 800197e:	46a0      	mov	r8, r4
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	2200      	movs	r2, #0
 8001984:	2300      	movs	r3, #0
 8001986:	2400      	movs	r4, #0
 8001988:	4690      	mov	r8, r2
 800198a:	e7ed      	b.n	8001968 <__aeabi_ddiv+0xc0>
 800198c:	46cb      	mov	fp, r9
 800198e:	4642      	mov	r2, r8
 8001990:	9d02      	ldr	r5, [sp, #8]
 8001992:	9903      	ldr	r1, [sp, #12]
 8001994:	2902      	cmp	r1, #2
 8001996:	d0e2      	beq.n	800195e <__aeabi_ddiv+0xb6>
 8001998:	2903      	cmp	r1, #3
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0xf6>
 800199c:	e243      	b.n	8001e26 <__aeabi_ddiv+0x57e>
 800199e:	002e      	movs	r6, r5
 80019a0:	2901      	cmp	r1, #1
 80019a2:	d0ee      	beq.n	8001982 <__aeabi_ddiv+0xda>
 80019a4:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <__aeabi_ddiv+0x260>)
 80019a6:	4453      	add	r3, sl
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x106>
 80019ac:	e193      	b.n	8001cd6 <__aeabi_ddiv+0x42e>
 80019ae:	0751      	lsls	r1, r2, #29
 80019b0:	d000      	beq.n	80019b4 <__aeabi_ddiv+0x10c>
 80019b2:	e24a      	b.n	8001e4a <__aeabi_ddiv+0x5a2>
 80019b4:	4659      	mov	r1, fp
 80019b6:	01c9      	lsls	r1, r1, #7
 80019b8:	d506      	bpl.n	80019c8 <__aeabi_ddiv+0x120>
 80019ba:	4659      	mov	r1, fp
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <__aeabi_ddiv+0x264>)
 80019be:	4019      	ands	r1, r3
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	468b      	mov	fp, r1
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4453      	add	r3, sl
 80019c8:	4951      	ldr	r1, [pc, #324]	@ (8001b10 <__aeabi_ddiv+0x268>)
 80019ca:	428b      	cmp	r3, r1
 80019cc:	dcc8      	bgt.n	8001960 <__aeabi_ddiv+0xb8>
 80019ce:	4659      	mov	r1, fp
 80019d0:	08d2      	lsrs	r2, r2, #3
 80019d2:	0749      	lsls	r1, r1, #29
 80019d4:	4311      	orrs	r1, r2
 80019d6:	465a      	mov	r2, fp
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	0254      	lsls	r4, r2, #9
 80019dc:	4688      	mov	r8, r1
 80019de:	0b24      	lsrs	r4, r4, #12
 80019e0:	0d5b      	lsrs	r3, r3, #21
 80019e2:	e7c1      	b.n	8001968 <__aeabi_ddiv+0xc0>
 80019e4:	465b      	mov	r3, fp
 80019e6:	4303      	orrs	r3, r0
 80019e8:	4699      	mov	r9, r3
 80019ea:	d061      	beq.n	8001ab0 <__aeabi_ddiv+0x208>
 80019ec:	465b      	mov	r3, fp
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <__aeabi_ddiv+0x14c>
 80019f2:	e1c2      	b.n	8001d7a <__aeabi_ddiv+0x4d2>
 80019f4:	4658      	mov	r0, fp
 80019f6:	f001 fa5d 	bl	8002eb4 <__clzsi2>
 80019fa:	230b      	movs	r3, #11
 80019fc:	425b      	negs	r3, r3
 80019fe:	469c      	mov	ip, r3
 8001a00:	0002      	movs	r2, r0
 8001a02:	4484      	add	ip, r0
 8001a04:	4666      	mov	r6, ip
 8001a06:	231d      	movs	r3, #29
 8001a08:	1b9b      	subs	r3, r3, r6
 8001a0a:	0026      	movs	r6, r4
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	4658      	mov	r0, fp
 8001a10:	40de      	lsrs	r6, r3
 8001a12:	3908      	subs	r1, #8
 8001a14:	4088      	lsls	r0, r1
 8001a16:	0033      	movs	r3, r6
 8001a18:	4303      	orrs	r3, r0
 8001a1a:	4699      	mov	r9, r3
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	408b      	lsls	r3, r1
 8001a20:	4698      	mov	r8, r3
 8001a22:	4b3c      	ldr	r3, [pc, #240]	@ (8001b14 <__aeabi_ddiv+0x26c>)
 8001a24:	2400      	movs	r4, #0
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	469a      	mov	sl, r3
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	e762      	b.n	80018f6 <__aeabi_ddiv+0x4e>
 8001a30:	465a      	mov	r2, fp
 8001a32:	9b00      	ldr	r3, [sp, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <__aeabi_ddiv+0x270>)
 8001a38:	469c      	mov	ip, r3
 8001a3a:	44e2      	add	sl, ip
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	d132      	bne.n	8001aa6 <__aeabi_ddiv+0x1fe>
 8001a40:	2302      	movs	r3, #2
 8001a42:	431c      	orrs	r4, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	2102      	movs	r1, #2
 8001a48:	469b      	mov	fp, r3
 8001a4a:	e774      	b.n	8001936 <__aeabi_ddiv+0x8e>
 8001a4c:	465a      	mov	r2, fp
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	d022      	beq.n	8001a9a <__aeabi_ddiv+0x1f2>
 8001a54:	465b      	mov	r3, fp
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x1b4>
 8001a5a:	e1a0      	b.n	8001d9e <__aeabi_ddiv+0x4f6>
 8001a5c:	4658      	mov	r0, fp
 8001a5e:	f001 fa29 	bl	8002eb4 <__clzsi2>
 8001a62:	0002      	movs	r2, r0
 8001a64:	0003      	movs	r3, r0
 8001a66:	3a0b      	subs	r2, #11
 8001a68:	271d      	movs	r7, #29
 8001a6a:	9e00      	ldr	r6, [sp, #0]
 8001a6c:	1aba      	subs	r2, r7, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	4658      	mov	r0, fp
 8001a72:	40d6      	lsrs	r6, r2
 8001a74:	3908      	subs	r1, #8
 8001a76:	4088      	lsls	r0, r1
 8001a78:	0032      	movs	r2, r6
 8001a7a:	4302      	orrs	r2, r0
 8001a7c:	4693      	mov	fp, r2
 8001a7e:	9a00      	ldr	r2, [sp, #0]
 8001a80:	408a      	lsls	r2, r1
 8001a82:	4926      	ldr	r1, [pc, #152]	@ (8001b1c <__aeabi_ddiv+0x274>)
 8001a84:	4453      	add	r3, sl
 8001a86:	468a      	mov	sl, r1
 8001a88:	2100      	movs	r1, #0
 8001a8a:	449a      	add	sl, r3
 8001a8c:	e753      	b.n	8001936 <__aeabi_ddiv+0x8e>
 8001a8e:	469a      	mov	sl, r3
 8001a90:	2303      	movs	r3, #3
 8001a92:	46d9      	mov	r9, fp
 8001a94:	240c      	movs	r4, #12
 8001a96:	9303      	str	r3, [sp, #12]
 8001a98:	e72d      	b.n	80018f6 <__aeabi_ddiv+0x4e>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	431c      	orrs	r4, r3
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	e747      	b.n	8001936 <__aeabi_ddiv+0x8e>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	0032      	movs	r2, r6
 8001aaa:	2103      	movs	r1, #3
 8001aac:	431c      	orrs	r4, r3
 8001aae:	e742      	b.n	8001936 <__aeabi_ddiv+0x8e>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	469a      	mov	sl, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	2404      	movs	r4, #4
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	e71b      	b.n	80018f6 <__aeabi_ddiv+0x4e>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2480      	movs	r4, #128	@ 0x80
 8001ac2:	4698      	mov	r8, r3
 8001ac4:	2600      	movs	r6, #0
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <__aeabi_ddiv+0x254>)
 8001ac8:	0324      	lsls	r4, r4, #12
 8001aca:	e74d      	b.n	8001968 <__aeabi_ddiv+0xc0>
 8001acc:	2480      	movs	r4, #128	@ 0x80
 8001ace:	464b      	mov	r3, r9
 8001ad0:	0324      	lsls	r4, r4, #12
 8001ad2:	4223      	tst	r3, r4
 8001ad4:	d009      	beq.n	8001aea <__aeabi_ddiv+0x242>
 8001ad6:	465b      	mov	r3, fp
 8001ad8:	4223      	tst	r3, r4
 8001ada:	d106      	bne.n	8001aea <__aeabi_ddiv+0x242>
 8001adc:	431c      	orrs	r4, r3
 8001ade:	0324      	lsls	r4, r4, #12
 8001ae0:	002e      	movs	r6, r5
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <__aeabi_ddiv+0x254>)
 8001ae6:	0b24      	lsrs	r4, r4, #12
 8001ae8:	e73e      	b.n	8001968 <__aeabi_ddiv+0xc0>
 8001aea:	2480      	movs	r4, #128	@ 0x80
 8001aec:	464b      	mov	r3, r9
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	431c      	orrs	r4, r3
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	9e02      	ldr	r6, [sp, #8]
 8001af6:	4b01      	ldr	r3, [pc, #4]	@ (8001afc <__aeabi_ddiv+0x254>)
 8001af8:	0b24      	lsrs	r4, r4, #12
 8001afa:	e735      	b.n	8001968 <__aeabi_ddiv+0xc0>
 8001afc:	000007ff 	.word	0x000007ff
 8001b00:	fffffc01 	.word	0xfffffc01
 8001b04:	08003f68 	.word	0x08003f68
 8001b08:	000003ff 	.word	0x000003ff
 8001b0c:	feffffff 	.word	0xfeffffff
 8001b10:	000007fe 	.word	0x000007fe
 8001b14:	fffffc0d 	.word	0xfffffc0d
 8001b18:	fffff801 	.word	0xfffff801
 8001b1c:	000003f3 	.word	0x000003f3
 8001b20:	45cb      	cmp	fp, r9
 8001b22:	d200      	bcs.n	8001b26 <__aeabi_ddiv+0x27e>
 8001b24:	e120      	b.n	8001d68 <__aeabi_ddiv+0x4c0>
 8001b26:	d100      	bne.n	8001b2a <__aeabi_ddiv+0x282>
 8001b28:	e11b      	b.n	8001d62 <__aeabi_ddiv+0x4ba>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	425b      	negs	r3, r3
 8001b2e:	469c      	mov	ip, r3
 8001b30:	4644      	mov	r4, r8
 8001b32:	4648      	mov	r0, r9
 8001b34:	2700      	movs	r7, #0
 8001b36:	44e2      	add	sl, ip
 8001b38:	465b      	mov	r3, fp
 8001b3a:	0e15      	lsrs	r5, r2, #24
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	431d      	orrs	r5, r3
 8001b40:	0c19      	lsrs	r1, r3, #16
 8001b42:	042b      	lsls	r3, r5, #16
 8001b44:	0212      	lsls	r2, r2, #8
 8001b46:	9500      	str	r5, [sp, #0]
 8001b48:	0c1d      	lsrs	r5, r3, #16
 8001b4a:	4691      	mov	r9, r2
 8001b4c:	9102      	str	r1, [sp, #8]
 8001b4e:	9503      	str	r5, [sp, #12]
 8001b50:	f7ff f9c6 	bl	8000ee0 <__aeabi_uidivmod>
 8001b54:	0002      	movs	r2, r0
 8001b56:	436a      	muls	r2, r5
 8001b58:	040b      	lsls	r3, r1, #16
 8001b5a:	0c21      	lsrs	r1, r4, #16
 8001b5c:	4680      	mov	r8, r0
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	428a      	cmp	r2, r1
 8001b62:	d90e      	bls.n	8001b82 <__aeabi_ddiv+0x2da>
 8001b64:	9d00      	ldr	r5, [sp, #0]
 8001b66:	2301      	movs	r3, #1
 8001b68:	46ac      	mov	ip, r5
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	4461      	add	r1, ip
 8001b6e:	469c      	mov	ip, r3
 8001b70:	44e0      	add	r8, ip
 8001b72:	428d      	cmp	r5, r1
 8001b74:	d805      	bhi.n	8001b82 <__aeabi_ddiv+0x2da>
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d903      	bls.n	8001b82 <__aeabi_ddiv+0x2da>
 8001b7a:	46ac      	mov	ip, r5
 8001b7c:	1e83      	subs	r3, r0, #2
 8001b7e:	4698      	mov	r8, r3
 8001b80:	4461      	add	r1, ip
 8001b82:	1a88      	subs	r0, r1, r2
 8001b84:	9902      	ldr	r1, [sp, #8]
 8001b86:	f7ff f9ab 	bl	8000ee0 <__aeabi_uidivmod>
 8001b8a:	9a03      	ldr	r2, [sp, #12]
 8001b8c:	0424      	lsls	r4, r4, #16
 8001b8e:	4342      	muls	r2, r0
 8001b90:	0409      	lsls	r1, r1, #16
 8001b92:	0c24      	lsrs	r4, r4, #16
 8001b94:	0003      	movs	r3, r0
 8001b96:	430c      	orrs	r4, r1
 8001b98:	42a2      	cmp	r2, r4
 8001b9a:	d906      	bls.n	8001baa <__aeabi_ddiv+0x302>
 8001b9c:	9900      	ldr	r1, [sp, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	468c      	mov	ip, r1
 8001ba2:	4464      	add	r4, ip
 8001ba4:	42a1      	cmp	r1, r4
 8001ba6:	d800      	bhi.n	8001baa <__aeabi_ddiv+0x302>
 8001ba8:	e10d      	b.n	8001dc6 <__aeabi_ddiv+0x51e>
 8001baa:	1aa0      	subs	r0, r4, r2
 8001bac:	4642      	mov	r2, r8
 8001bae:	0412      	lsls	r2, r2, #16
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	4693      	mov	fp, r2
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4659      	mov	r1, fp
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	001d      	movs	r5, r3
 8001bbc:	9304      	str	r3, [sp, #16]
 8001bbe:	040b      	lsls	r3, r1, #16
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	0409      	lsls	r1, r1, #16
 8001bc4:	0c09      	lsrs	r1, r1, #16
 8001bc6:	000c      	movs	r4, r1
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	435c      	muls	r4, r3
 8001bcc:	0c12      	lsrs	r2, r2, #16
 8001bce:	436b      	muls	r3, r5
 8001bd0:	4688      	mov	r8, r1
 8001bd2:	4351      	muls	r1, r2
 8001bd4:	436a      	muls	r2, r5
 8001bd6:	0c25      	lsrs	r5, r4, #16
 8001bd8:	46ac      	mov	ip, r5
 8001bda:	185b      	adds	r3, r3, r1
 8001bdc:	4463      	add	r3, ip
 8001bde:	4299      	cmp	r1, r3
 8001be0:	d903      	bls.n	8001bea <__aeabi_ddiv+0x342>
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	0249      	lsls	r1, r1, #9
 8001be6:	468c      	mov	ip, r1
 8001be8:	4462      	add	r2, ip
 8001bea:	0c19      	lsrs	r1, r3, #16
 8001bec:	0424      	lsls	r4, r4, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c24      	lsrs	r4, r4, #16
 8001bf2:	188a      	adds	r2, r1, r2
 8001bf4:	191c      	adds	r4, r3, r4
 8001bf6:	4290      	cmp	r0, r2
 8001bf8:	d200      	bcs.n	8001bfc <__aeabi_ddiv+0x354>
 8001bfa:	e09e      	b.n	8001d3a <__aeabi_ddiv+0x492>
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x358>
 8001bfe:	e099      	b.n	8001d34 <__aeabi_ddiv+0x48c>
 8001c00:	1b3c      	subs	r4, r7, r4
 8001c02:	42a7      	cmp	r7, r4
 8001c04:	41bf      	sbcs	r7, r7
 8001c06:	9d00      	ldr	r5, [sp, #0]
 8001c08:	1a80      	subs	r0, r0, r2
 8001c0a:	427f      	negs	r7, r7
 8001c0c:	1bc0      	subs	r0, r0, r7
 8001c0e:	4285      	cmp	r5, r0
 8001c10:	d100      	bne.n	8001c14 <__aeabi_ddiv+0x36c>
 8001c12:	e10c      	b.n	8001e2e <__aeabi_ddiv+0x586>
 8001c14:	9902      	ldr	r1, [sp, #8]
 8001c16:	f7ff f963 	bl	8000ee0 <__aeabi_uidivmod>
 8001c1a:	9a03      	ldr	r2, [sp, #12]
 8001c1c:	040b      	lsls	r3, r1, #16
 8001c1e:	4342      	muls	r2, r0
 8001c20:	0c21      	lsrs	r1, r4, #16
 8001c22:	0007      	movs	r7, r0
 8001c24:	4319      	orrs	r1, r3
 8001c26:	428a      	cmp	r2, r1
 8001c28:	d908      	bls.n	8001c3c <__aeabi_ddiv+0x394>
 8001c2a:	46ac      	mov	ip, r5
 8001c2c:	4461      	add	r1, ip
 8001c2e:	3f01      	subs	r7, #1
 8001c30:	428d      	cmp	r5, r1
 8001c32:	d803      	bhi.n	8001c3c <__aeabi_ddiv+0x394>
 8001c34:	428a      	cmp	r2, r1
 8001c36:	d901      	bls.n	8001c3c <__aeabi_ddiv+0x394>
 8001c38:	1e87      	subs	r7, r0, #2
 8001c3a:	4461      	add	r1, ip
 8001c3c:	1a88      	subs	r0, r1, r2
 8001c3e:	9902      	ldr	r1, [sp, #8]
 8001c40:	f7ff f94e 	bl	8000ee0 <__aeabi_uidivmod>
 8001c44:	9a03      	ldr	r2, [sp, #12]
 8001c46:	0424      	lsls	r4, r4, #16
 8001c48:	4342      	muls	r2, r0
 8001c4a:	0409      	lsls	r1, r1, #16
 8001c4c:	0c24      	lsrs	r4, r4, #16
 8001c4e:	0003      	movs	r3, r0
 8001c50:	430c      	orrs	r4, r1
 8001c52:	42a2      	cmp	r2, r4
 8001c54:	d909      	bls.n	8001c6a <__aeabi_ddiv+0x3c2>
 8001c56:	9900      	ldr	r1, [sp, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	468c      	mov	ip, r1
 8001c5c:	4464      	add	r4, ip
 8001c5e:	42a1      	cmp	r1, r4
 8001c60:	d803      	bhi.n	8001c6a <__aeabi_ddiv+0x3c2>
 8001c62:	42a2      	cmp	r2, r4
 8001c64:	d901      	bls.n	8001c6a <__aeabi_ddiv+0x3c2>
 8001c66:	1e83      	subs	r3, r0, #2
 8001c68:	4464      	add	r4, ip
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	1aa4      	subs	r4, r4, r2
 8001c6e:	043a      	lsls	r2, r7, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	9d04      	ldr	r5, [sp, #16]
 8001c74:	0413      	lsls	r3, r2, #16
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	4359      	muls	r1, r3
 8001c7a:	4647      	mov	r7, r8
 8001c7c:	436b      	muls	r3, r5
 8001c7e:	469c      	mov	ip, r3
 8001c80:	0c10      	lsrs	r0, r2, #16
 8001c82:	4347      	muls	r7, r0
 8001c84:	0c0b      	lsrs	r3, r1, #16
 8001c86:	44bc      	add	ip, r7
 8001c88:	4463      	add	r3, ip
 8001c8a:	4368      	muls	r0, r5
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d903      	bls.n	8001c98 <__aeabi_ddiv+0x3f0>
 8001c90:	2580      	movs	r5, #128	@ 0x80
 8001c92:	026d      	lsls	r5, r5, #9
 8001c94:	46ac      	mov	ip, r5
 8001c96:	4460      	add	r0, ip
 8001c98:	0c1f      	lsrs	r7, r3, #16
 8001c9a:	0409      	lsls	r1, r1, #16
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	0c09      	lsrs	r1, r1, #16
 8001ca0:	183f      	adds	r7, r7, r0
 8001ca2:	185b      	adds	r3, r3, r1
 8001ca4:	42bc      	cmp	r4, r7
 8001ca6:	d306      	bcc.n	8001cb6 <__aeabi_ddiv+0x40e>
 8001ca8:	d002      	beq.n	8001cb0 <__aeabi_ddiv+0x408>
 8001caa:	2301      	movs	r3, #1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	e679      	b.n	80019a4 <__aeabi_ddiv+0xfc>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_ddiv+0x40e>
 8001cb4:	e676      	b.n	80019a4 <__aeabi_ddiv+0xfc>
 8001cb6:	9800      	ldr	r0, [sp, #0]
 8001cb8:	1e51      	subs	r1, r2, #1
 8001cba:	4684      	mov	ip, r0
 8001cbc:	4464      	add	r4, ip
 8001cbe:	4284      	cmp	r4, r0
 8001cc0:	d200      	bcs.n	8001cc4 <__aeabi_ddiv+0x41c>
 8001cc2:	e0a8      	b.n	8001e16 <__aeabi_ddiv+0x56e>
 8001cc4:	42bc      	cmp	r4, r7
 8001cc6:	d200      	bcs.n	8001cca <__aeabi_ddiv+0x422>
 8001cc8:	e0d6      	b.n	8001e78 <__aeabi_ddiv+0x5d0>
 8001cca:	d100      	bne.n	8001cce <__aeabi_ddiv+0x426>
 8001ccc:	e0e0      	b.n	8001e90 <__aeabi_ddiv+0x5e8>
 8001cce:	000a      	movs	r2, r1
 8001cd0:	e7eb      	b.n	8001caa <__aeabi_ddiv+0x402>
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4252      	negs	r2, r2
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	1ac9      	subs	r1, r1, r3
 8001cda:	2938      	cmp	r1, #56	@ 0x38
 8001cdc:	dd00      	ble.n	8001ce0 <__aeabi_ddiv+0x438>
 8001cde:	e650      	b.n	8001982 <__aeabi_ddiv+0xda>
 8001ce0:	291f      	cmp	r1, #31
 8001ce2:	dd76      	ble.n	8001dd2 <__aeabi_ddiv+0x52a>
 8001ce4:	201f      	movs	r0, #31
 8001ce6:	4240      	negs	r0, r0
 8001ce8:	1ac3      	subs	r3, r0, r3
 8001cea:	4658      	mov	r0, fp
 8001cec:	40d8      	lsrs	r0, r3
 8001cee:	0003      	movs	r3, r0
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	d004      	beq.n	8001cfe <__aeabi_ddiv+0x456>
 8001cf4:	4658      	mov	r0, fp
 8001cf6:	4969      	ldr	r1, [pc, #420]	@ (8001e9c <__aeabi_ddiv+0x5f4>)
 8001cf8:	4451      	add	r1, sl
 8001cfa:	4088      	lsls	r0, r1
 8001cfc:	4302      	orrs	r2, r0
 8001cfe:	1e51      	subs	r1, r2, #1
 8001d00:	418a      	sbcs	r2, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	2307      	movs	r3, #7
 8001d06:	0019      	movs	r1, r3
 8001d08:	2400      	movs	r4, #0
 8001d0a:	4011      	ands	r1, r2
 8001d0c:	4213      	tst	r3, r2
 8001d0e:	d00c      	beq.n	8001d2a <__aeabi_ddiv+0x482>
 8001d10:	230f      	movs	r3, #15
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d100      	bne.n	8001d1a <__aeabi_ddiv+0x472>
 8001d18:	e0be      	b.n	8001e98 <__aeabi_ddiv+0x5f0>
 8001d1a:	1d11      	adds	r1, r2, #4
 8001d1c:	4291      	cmp	r1, r2
 8001d1e:	419b      	sbcs	r3, r3
 8001d20:	000a      	movs	r2, r1
 8001d22:	425b      	negs	r3, r3
 8001d24:	0759      	lsls	r1, r3, #29
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	0b1c      	lsrs	r4, r3, #12
 8001d2a:	08d2      	lsrs	r2, r2, #3
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4690      	mov	r8, r2
 8001d30:	2300      	movs	r3, #0
 8001d32:	e619      	b.n	8001968 <__aeabi_ddiv+0xc0>
 8001d34:	42a7      	cmp	r7, r4
 8001d36:	d300      	bcc.n	8001d3a <__aeabi_ddiv+0x492>
 8001d38:	e762      	b.n	8001c00 <__aeabi_ddiv+0x358>
 8001d3a:	465b      	mov	r3, fp
 8001d3c:	9d00      	ldr	r5, [sp, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	444f      	add	r7, r9
 8001d42:	9305      	str	r3, [sp, #20]
 8001d44:	454f      	cmp	r7, r9
 8001d46:	419b      	sbcs	r3, r3
 8001d48:	46ac      	mov	ip, r5
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	4463      	add	r3, ip
 8001d4e:	18c0      	adds	r0, r0, r3
 8001d50:	4285      	cmp	r5, r0
 8001d52:	d233      	bcs.n	8001dbc <__aeabi_ddiv+0x514>
 8001d54:	4282      	cmp	r2, r0
 8001d56:	d900      	bls.n	8001d5a <__aeabi_ddiv+0x4b2>
 8001d58:	e081      	b.n	8001e5e <__aeabi_ddiv+0x5b6>
 8001d5a:	d07d      	beq.n	8001e58 <__aeabi_ddiv+0x5b0>
 8001d5c:	9b05      	ldr	r3, [sp, #20]
 8001d5e:	469b      	mov	fp, r3
 8001d60:	e74e      	b.n	8001c00 <__aeabi_ddiv+0x358>
 8001d62:	4542      	cmp	r2, r8
 8001d64:	d900      	bls.n	8001d68 <__aeabi_ddiv+0x4c0>
 8001d66:	e6e0      	b.n	8001b2a <__aeabi_ddiv+0x282>
 8001d68:	464b      	mov	r3, r9
 8001d6a:	07dc      	lsls	r4, r3, #31
 8001d6c:	0858      	lsrs	r0, r3, #1
 8001d6e:	4643      	mov	r3, r8
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	431c      	orrs	r4, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	07df      	lsls	r7, r3, #31
 8001d78:	e6de      	b.n	8001b38 <__aeabi_ddiv+0x290>
 8001d7a:	f001 f89b 	bl	8002eb4 <__clzsi2>
 8001d7e:	2315      	movs	r3, #21
 8001d80:	469c      	mov	ip, r3
 8001d82:	4484      	add	ip, r0
 8001d84:	0002      	movs	r2, r0
 8001d86:	4663      	mov	r3, ip
 8001d88:	3220      	adds	r2, #32
 8001d8a:	2b1c      	cmp	r3, #28
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_ddiv+0x4e8>
 8001d8e:	e639      	b.n	8001a04 <__aeabi_ddiv+0x15c>
 8001d90:	0023      	movs	r3, r4
 8001d92:	3808      	subs	r0, #8
 8001d94:	4083      	lsls	r3, r0
 8001d96:	4699      	mov	r9, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	e641      	b.n	8001a22 <__aeabi_ddiv+0x17a>
 8001d9e:	f001 f889 	bl	8002eb4 <__clzsi2>
 8001da2:	0002      	movs	r2, r0
 8001da4:	0003      	movs	r3, r0
 8001da6:	3215      	adds	r2, #21
 8001da8:	3320      	adds	r3, #32
 8001daa:	2a1c      	cmp	r2, #28
 8001dac:	dc00      	bgt.n	8001db0 <__aeabi_ddiv+0x508>
 8001dae:	e65b      	b.n	8001a68 <__aeabi_ddiv+0x1c0>
 8001db0:	9900      	ldr	r1, [sp, #0]
 8001db2:	3808      	subs	r0, #8
 8001db4:	4081      	lsls	r1, r0
 8001db6:	2200      	movs	r2, #0
 8001db8:	468b      	mov	fp, r1
 8001dba:	e662      	b.n	8001a82 <__aeabi_ddiv+0x1da>
 8001dbc:	4285      	cmp	r5, r0
 8001dbe:	d1cd      	bne.n	8001d5c <__aeabi_ddiv+0x4b4>
 8001dc0:	45b9      	cmp	r9, r7
 8001dc2:	d8cb      	bhi.n	8001d5c <__aeabi_ddiv+0x4b4>
 8001dc4:	e7c6      	b.n	8001d54 <__aeabi_ddiv+0x4ac>
 8001dc6:	42a2      	cmp	r2, r4
 8001dc8:	d800      	bhi.n	8001dcc <__aeabi_ddiv+0x524>
 8001dca:	e6ee      	b.n	8001baa <__aeabi_ddiv+0x302>
 8001dcc:	1e83      	subs	r3, r0, #2
 8001dce:	4464      	add	r4, ip
 8001dd0:	e6eb      	b.n	8001baa <__aeabi_ddiv+0x302>
 8001dd2:	4833      	ldr	r0, [pc, #204]	@ (8001ea0 <__aeabi_ddiv+0x5f8>)
 8001dd4:	0014      	movs	r4, r2
 8001dd6:	4450      	add	r0, sl
 8001dd8:	4082      	lsls	r2, r0
 8001dda:	465b      	mov	r3, fp
 8001ddc:	0017      	movs	r7, r2
 8001dde:	4083      	lsls	r3, r0
 8001de0:	40cc      	lsrs	r4, r1
 8001de2:	1e7a      	subs	r2, r7, #1
 8001de4:	4197      	sbcs	r7, r2
 8001de6:	4323      	orrs	r3, r4
 8001de8:	433b      	orrs	r3, r7
 8001dea:	001a      	movs	r2, r3
 8001dec:	465b      	mov	r3, fp
 8001dee:	40cb      	lsrs	r3, r1
 8001df0:	0751      	lsls	r1, r2, #29
 8001df2:	d009      	beq.n	8001e08 <__aeabi_ddiv+0x560>
 8001df4:	210f      	movs	r1, #15
 8001df6:	4011      	ands	r1, r2
 8001df8:	2904      	cmp	r1, #4
 8001dfa:	d005      	beq.n	8001e08 <__aeabi_ddiv+0x560>
 8001dfc:	1d11      	adds	r1, r2, #4
 8001dfe:	4291      	cmp	r1, r2
 8001e00:	4192      	sbcs	r2, r2
 8001e02:	4252      	negs	r2, r2
 8001e04:	189b      	adds	r3, r3, r2
 8001e06:	000a      	movs	r2, r1
 8001e08:	0219      	lsls	r1, r3, #8
 8001e0a:	d58b      	bpl.n	8001d24 <__aeabi_ddiv+0x47c>
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2301      	movs	r3, #1
 8001e10:	2400      	movs	r4, #0
 8001e12:	4690      	mov	r8, r2
 8001e14:	e5a8      	b.n	8001968 <__aeabi_ddiv+0xc0>
 8001e16:	000a      	movs	r2, r1
 8001e18:	42bc      	cmp	r4, r7
 8001e1a:	d000      	beq.n	8001e1e <__aeabi_ddiv+0x576>
 8001e1c:	e745      	b.n	8001caa <__aeabi_ddiv+0x402>
 8001e1e:	454b      	cmp	r3, r9
 8001e20:	d000      	beq.n	8001e24 <__aeabi_ddiv+0x57c>
 8001e22:	e742      	b.n	8001caa <__aeabi_ddiv+0x402>
 8001e24:	e5be      	b.n	80019a4 <__aeabi_ddiv+0xfc>
 8001e26:	2480      	movs	r4, #128	@ 0x80
 8001e28:	465b      	mov	r3, fp
 8001e2a:	0324      	lsls	r4, r4, #12
 8001e2c:	e656      	b.n	8001adc <__aeabi_ddiv+0x234>
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <__aeabi_ddiv+0x5fc>)
 8001e30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <__aeabi_ddiv+0x600>)
 8001e32:	4453      	add	r3, sl
 8001e34:	4592      	cmp	sl, r2
 8001e36:	da00      	bge.n	8001e3a <__aeabi_ddiv+0x592>
 8001e38:	e74b      	b.n	8001cd2 <__aeabi_ddiv+0x42a>
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4249      	negs	r1, r1
 8001e3e:	1d0a      	adds	r2, r1, #4
 8001e40:	428a      	cmp	r2, r1
 8001e42:	4189      	sbcs	r1, r1
 8001e44:	4249      	negs	r1, r1
 8001e46:	448b      	add	fp, r1
 8001e48:	e5b4      	b.n	80019b4 <__aeabi_ddiv+0x10c>
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	4011      	ands	r1, r2
 8001e4e:	2904      	cmp	r1, #4
 8001e50:	d100      	bne.n	8001e54 <__aeabi_ddiv+0x5ac>
 8001e52:	e5af      	b.n	80019b4 <__aeabi_ddiv+0x10c>
 8001e54:	0011      	movs	r1, r2
 8001e56:	e7f2      	b.n	8001e3e <__aeabi_ddiv+0x596>
 8001e58:	42bc      	cmp	r4, r7
 8001e5a:	d800      	bhi.n	8001e5e <__aeabi_ddiv+0x5b6>
 8001e5c:	e77e      	b.n	8001d5c <__aeabi_ddiv+0x4b4>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	425b      	negs	r3, r3
 8001e62:	469c      	mov	ip, r3
 8001e64:	9900      	ldr	r1, [sp, #0]
 8001e66:	444f      	add	r7, r9
 8001e68:	454f      	cmp	r7, r9
 8001e6a:	419b      	sbcs	r3, r3
 8001e6c:	44e3      	add	fp, ip
 8001e6e:	468c      	mov	ip, r1
 8001e70:	425b      	negs	r3, r3
 8001e72:	4463      	add	r3, ip
 8001e74:	18c0      	adds	r0, r0, r3
 8001e76:	e6c3      	b.n	8001c00 <__aeabi_ddiv+0x358>
 8001e78:	4649      	mov	r1, r9
 8001e7a:	9d00      	ldr	r5, [sp, #0]
 8001e7c:	0048      	lsls	r0, r1, #1
 8001e7e:	4548      	cmp	r0, r9
 8001e80:	4189      	sbcs	r1, r1
 8001e82:	46ac      	mov	ip, r5
 8001e84:	4249      	negs	r1, r1
 8001e86:	4461      	add	r1, ip
 8001e88:	4681      	mov	r9, r0
 8001e8a:	3a02      	subs	r2, #2
 8001e8c:	1864      	adds	r4, r4, r1
 8001e8e:	e7c3      	b.n	8001e18 <__aeabi_ddiv+0x570>
 8001e90:	4599      	cmp	r9, r3
 8001e92:	d3f1      	bcc.n	8001e78 <__aeabi_ddiv+0x5d0>
 8001e94:	000a      	movs	r2, r1
 8001e96:	e7c2      	b.n	8001e1e <__aeabi_ddiv+0x576>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e743      	b.n	8001d24 <__aeabi_ddiv+0x47c>
 8001e9c:	0000043e 	.word	0x0000043e
 8001ea0:	0000041e 	.word	0x0000041e
 8001ea4:	000003ff 	.word	0x000003ff
 8001ea8:	fffffc02 	.word	0xfffffc02

08001eac <__eqdf2>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	4657      	mov	r7, sl
 8001eb0:	46de      	mov	lr, fp
 8001eb2:	464e      	mov	r6, r9
 8001eb4:	4645      	mov	r5, r8
 8001eb6:	b5e0      	push	{r5, r6, r7, lr}
 8001eb8:	000d      	movs	r5, r1
 8001eba:	0004      	movs	r4, r0
 8001ebc:	0fe8      	lsrs	r0, r5, #31
 8001ebe:	4683      	mov	fp, r0
 8001ec0:	0309      	lsls	r1, r1, #12
 8001ec2:	0fd8      	lsrs	r0, r3, #31
 8001ec4:	0b09      	lsrs	r1, r1, #12
 8001ec6:	4682      	mov	sl, r0
 8001ec8:	4819      	ldr	r0, [pc, #100]	@ (8001f30 <__eqdf2+0x84>)
 8001eca:	468c      	mov	ip, r1
 8001ecc:	031f      	lsls	r7, r3, #12
 8001ece:	0069      	lsls	r1, r5, #1
 8001ed0:	005e      	lsls	r6, r3, #1
 8001ed2:	0d49      	lsrs	r1, r1, #21
 8001ed4:	0b3f      	lsrs	r7, r7, #12
 8001ed6:	0d76      	lsrs	r6, r6, #21
 8001ed8:	4281      	cmp	r1, r0
 8001eda:	d018      	beq.n	8001f0e <__eqdf2+0x62>
 8001edc:	4286      	cmp	r6, r0
 8001ede:	d00f      	beq.n	8001f00 <__eqdf2+0x54>
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	42b1      	cmp	r1, r6
 8001ee4:	d10d      	bne.n	8001f02 <__eqdf2+0x56>
 8001ee6:	45bc      	cmp	ip, r7
 8001ee8:	d10b      	bne.n	8001f02 <__eqdf2+0x56>
 8001eea:	4294      	cmp	r4, r2
 8001eec:	d109      	bne.n	8001f02 <__eqdf2+0x56>
 8001eee:	45d3      	cmp	fp, sl
 8001ef0:	d01c      	beq.n	8001f2c <__eqdf2+0x80>
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d105      	bne.n	8001f02 <__eqdf2+0x56>
 8001ef6:	4660      	mov	r0, ip
 8001ef8:	4320      	orrs	r0, r4
 8001efa:	1e43      	subs	r3, r0, #1
 8001efc:	4198      	sbcs	r0, r3
 8001efe:	e000      	b.n	8001f02 <__eqdf2+0x56>
 8001f00:	2001      	movs	r0, #1
 8001f02:	bcf0      	pop	{r4, r5, r6, r7}
 8001f04:	46bb      	mov	fp, r7
 8001f06:	46b2      	mov	sl, r6
 8001f08:	46a9      	mov	r9, r5
 8001f0a:	46a0      	mov	r8, r4
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0e:	2001      	movs	r0, #1
 8001f10:	428e      	cmp	r6, r1
 8001f12:	d1f6      	bne.n	8001f02 <__eqdf2+0x56>
 8001f14:	4661      	mov	r1, ip
 8001f16:	4339      	orrs	r1, r7
 8001f18:	000f      	movs	r7, r1
 8001f1a:	4317      	orrs	r7, r2
 8001f1c:	4327      	orrs	r7, r4
 8001f1e:	d1f0      	bne.n	8001f02 <__eqdf2+0x56>
 8001f20:	465b      	mov	r3, fp
 8001f22:	4652      	mov	r2, sl
 8001f24:	1a98      	subs	r0, r3, r2
 8001f26:	1e43      	subs	r3, r0, #1
 8001f28:	4198      	sbcs	r0, r3
 8001f2a:	e7ea      	b.n	8001f02 <__eqdf2+0x56>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7e8      	b.n	8001f02 <__eqdf2+0x56>
 8001f30:	000007ff 	.word	0x000007ff

08001f34 <__gedf2>:
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	4657      	mov	r7, sl
 8001f38:	464e      	mov	r6, r9
 8001f3a:	4645      	mov	r5, r8
 8001f3c:	46de      	mov	lr, fp
 8001f3e:	b5e0      	push	{r5, r6, r7, lr}
 8001f40:	000d      	movs	r5, r1
 8001f42:	030e      	lsls	r6, r1, #12
 8001f44:	0049      	lsls	r1, r1, #1
 8001f46:	0d49      	lsrs	r1, r1, #21
 8001f48:	468a      	mov	sl, r1
 8001f4a:	0fdf      	lsrs	r7, r3, #31
 8001f4c:	0fe9      	lsrs	r1, r5, #31
 8001f4e:	46bc      	mov	ip, r7
 8001f50:	b083      	sub	sp, #12
 8001f52:	4f2f      	ldr	r7, [pc, #188]	@ (8002010 <__gedf2+0xdc>)
 8001f54:	0004      	movs	r4, r0
 8001f56:	4680      	mov	r8, r0
 8001f58:	9101      	str	r1, [sp, #4]
 8001f5a:	0058      	lsls	r0, r3, #1
 8001f5c:	0319      	lsls	r1, r3, #12
 8001f5e:	4691      	mov	r9, r2
 8001f60:	0b36      	lsrs	r6, r6, #12
 8001f62:	0b09      	lsrs	r1, r1, #12
 8001f64:	0d40      	lsrs	r0, r0, #21
 8001f66:	45ba      	cmp	sl, r7
 8001f68:	d01d      	beq.n	8001fa6 <__gedf2+0x72>
 8001f6a:	42b8      	cmp	r0, r7
 8001f6c:	d00d      	beq.n	8001f8a <__gedf2+0x56>
 8001f6e:	4657      	mov	r7, sl
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	d12a      	bne.n	8001fca <__gedf2+0x96>
 8001f74:	4334      	orrs	r4, r6
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d124      	bne.n	8001fc4 <__gedf2+0x90>
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	d036      	beq.n	8001fec <__gedf2+0xb8>
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	d141      	bne.n	8002006 <__gedf2+0xd2>
 8001f82:	4663      	mov	r3, ip
 8001f84:	0058      	lsls	r0, r3, #1
 8001f86:	3801      	subs	r0, #1
 8001f88:	e015      	b.n	8001fb6 <__gedf2+0x82>
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	d138      	bne.n	8002000 <__gedf2+0xcc>
 8001f8e:	4653      	mov	r3, sl
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <__gedf2+0x64>
 8001f94:	4326      	orrs	r6, r4
 8001f96:	d0f4      	beq.n	8001f82 <__gedf2+0x4e>
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	4563      	cmp	r3, ip
 8001f9c:	d107      	bne.n	8001fae <__gedf2+0x7a>
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	0058      	lsls	r0, r3, #1
 8001fa2:	3801      	subs	r0, #1
 8001fa4:	e007      	b.n	8001fb6 <__gedf2+0x82>
 8001fa6:	4326      	orrs	r6, r4
 8001fa8:	d12a      	bne.n	8002000 <__gedf2+0xcc>
 8001faa:	4550      	cmp	r0, sl
 8001fac:	d021      	beq.n	8001ff2 <__gedf2+0xbe>
 8001fae:	2001      	movs	r0, #1
 8001fb0:	9b01      	ldr	r3, [sp, #4]
 8001fb2:	425f      	negs	r7, r3
 8001fb4:	4338      	orrs	r0, r7
 8001fb6:	b003      	add	sp, #12
 8001fb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001fba:	46bb      	mov	fp, r7
 8001fbc:	46b2      	mov	sl, r6
 8001fbe:	46a9      	mov	r9, r5
 8001fc0:	46a0      	mov	r8, r4
 8001fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc4:	2c00      	cmp	r4, #0
 8001fc6:	d0dc      	beq.n	8001f82 <__gedf2+0x4e>
 8001fc8:	e7e6      	b.n	8001f98 <__gedf2+0x64>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d0ef      	beq.n	8001fae <__gedf2+0x7a>
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	4563      	cmp	r3, ip
 8001fd2:	d1ec      	bne.n	8001fae <__gedf2+0x7a>
 8001fd4:	4582      	cmp	sl, r0
 8001fd6:	dcea      	bgt.n	8001fae <__gedf2+0x7a>
 8001fd8:	dbe1      	blt.n	8001f9e <__gedf2+0x6a>
 8001fda:	428e      	cmp	r6, r1
 8001fdc:	d8e7      	bhi.n	8001fae <__gedf2+0x7a>
 8001fde:	d1de      	bne.n	8001f9e <__gedf2+0x6a>
 8001fe0:	45c8      	cmp	r8, r9
 8001fe2:	d8e4      	bhi.n	8001fae <__gedf2+0x7a>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	45c8      	cmp	r8, r9
 8001fe8:	d2e5      	bcs.n	8001fb6 <__gedf2+0x82>
 8001fea:	e7d8      	b.n	8001f9e <__gedf2+0x6a>
 8001fec:	2c00      	cmp	r4, #0
 8001fee:	d0e2      	beq.n	8001fb6 <__gedf2+0x82>
 8001ff0:	e7dd      	b.n	8001fae <__gedf2+0x7a>
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	d104      	bne.n	8002000 <__gedf2+0xcc>
 8001ff6:	9b01      	ldr	r3, [sp, #4]
 8001ff8:	4563      	cmp	r3, ip
 8001ffa:	d1d8      	bne.n	8001fae <__gedf2+0x7a>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7da      	b.n	8001fb6 <__gedf2+0x82>
 8002000:	2002      	movs	r0, #2
 8002002:	4240      	negs	r0, r0
 8002004:	e7d7      	b.n	8001fb6 <__gedf2+0x82>
 8002006:	9b01      	ldr	r3, [sp, #4]
 8002008:	4563      	cmp	r3, ip
 800200a:	d0e6      	beq.n	8001fda <__gedf2+0xa6>
 800200c:	e7cf      	b.n	8001fae <__gedf2+0x7a>
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	000007ff 	.word	0x000007ff

08002014 <__ledf2>:
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	4657      	mov	r7, sl
 8002018:	464e      	mov	r6, r9
 800201a:	4645      	mov	r5, r8
 800201c:	46de      	mov	lr, fp
 800201e:	b5e0      	push	{r5, r6, r7, lr}
 8002020:	000d      	movs	r5, r1
 8002022:	030e      	lsls	r6, r1, #12
 8002024:	0049      	lsls	r1, r1, #1
 8002026:	0d49      	lsrs	r1, r1, #21
 8002028:	468a      	mov	sl, r1
 800202a:	0fdf      	lsrs	r7, r3, #31
 800202c:	0fe9      	lsrs	r1, r5, #31
 800202e:	46bc      	mov	ip, r7
 8002030:	b083      	sub	sp, #12
 8002032:	4f2e      	ldr	r7, [pc, #184]	@ (80020ec <__ledf2+0xd8>)
 8002034:	0004      	movs	r4, r0
 8002036:	4680      	mov	r8, r0
 8002038:	9101      	str	r1, [sp, #4]
 800203a:	0058      	lsls	r0, r3, #1
 800203c:	0319      	lsls	r1, r3, #12
 800203e:	4691      	mov	r9, r2
 8002040:	0b36      	lsrs	r6, r6, #12
 8002042:	0b09      	lsrs	r1, r1, #12
 8002044:	0d40      	lsrs	r0, r0, #21
 8002046:	45ba      	cmp	sl, r7
 8002048:	d01e      	beq.n	8002088 <__ledf2+0x74>
 800204a:	42b8      	cmp	r0, r7
 800204c:	d00d      	beq.n	800206a <__ledf2+0x56>
 800204e:	4657      	mov	r7, sl
 8002050:	2f00      	cmp	r7, #0
 8002052:	d127      	bne.n	80020a4 <__ledf2+0x90>
 8002054:	4334      	orrs	r4, r6
 8002056:	2800      	cmp	r0, #0
 8002058:	d133      	bne.n	80020c2 <__ledf2+0xae>
 800205a:	430a      	orrs	r2, r1
 800205c:	d034      	beq.n	80020c8 <__ledf2+0xb4>
 800205e:	2c00      	cmp	r4, #0
 8002060:	d140      	bne.n	80020e4 <__ledf2+0xd0>
 8002062:	4663      	mov	r3, ip
 8002064:	0058      	lsls	r0, r3, #1
 8002066:	3801      	subs	r0, #1
 8002068:	e015      	b.n	8002096 <__ledf2+0x82>
 800206a:	4311      	orrs	r1, r2
 800206c:	d112      	bne.n	8002094 <__ledf2+0x80>
 800206e:	4653      	mov	r3, sl
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <__ledf2+0x64>
 8002074:	4326      	orrs	r6, r4
 8002076:	d0f4      	beq.n	8002062 <__ledf2+0x4e>
 8002078:	9b01      	ldr	r3, [sp, #4]
 800207a:	4563      	cmp	r3, ip
 800207c:	d01d      	beq.n	80020ba <__ledf2+0xa6>
 800207e:	2001      	movs	r0, #1
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	425f      	negs	r7, r3
 8002084:	4338      	orrs	r0, r7
 8002086:	e006      	b.n	8002096 <__ledf2+0x82>
 8002088:	4326      	orrs	r6, r4
 800208a:	d103      	bne.n	8002094 <__ledf2+0x80>
 800208c:	4550      	cmp	r0, sl
 800208e:	d1f6      	bne.n	800207e <__ledf2+0x6a>
 8002090:	4311      	orrs	r1, r2
 8002092:	d01c      	beq.n	80020ce <__ledf2+0xba>
 8002094:	2002      	movs	r0, #2
 8002096:	b003      	add	sp, #12
 8002098:	bcf0      	pop	{r4, r5, r6, r7}
 800209a:	46bb      	mov	fp, r7
 800209c:	46b2      	mov	sl, r6
 800209e:	46a9      	mov	r9, r5
 80020a0:	46a0      	mov	r8, r4
 80020a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d0ea      	beq.n	800207e <__ledf2+0x6a>
 80020a8:	9b01      	ldr	r3, [sp, #4]
 80020aa:	4563      	cmp	r3, ip
 80020ac:	d1e7      	bne.n	800207e <__ledf2+0x6a>
 80020ae:	4582      	cmp	sl, r0
 80020b0:	dce5      	bgt.n	800207e <__ledf2+0x6a>
 80020b2:	db02      	blt.n	80020ba <__ledf2+0xa6>
 80020b4:	428e      	cmp	r6, r1
 80020b6:	d8e2      	bhi.n	800207e <__ledf2+0x6a>
 80020b8:	d00e      	beq.n	80020d8 <__ledf2+0xc4>
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	0058      	lsls	r0, r3, #1
 80020be:	3801      	subs	r0, #1
 80020c0:	e7e9      	b.n	8002096 <__ledf2+0x82>
 80020c2:	2c00      	cmp	r4, #0
 80020c4:	d0cd      	beq.n	8002062 <__ledf2+0x4e>
 80020c6:	e7d7      	b.n	8002078 <__ledf2+0x64>
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	d0e4      	beq.n	8002096 <__ledf2+0x82>
 80020cc:	e7d7      	b.n	800207e <__ledf2+0x6a>
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	2000      	movs	r0, #0
 80020d2:	4563      	cmp	r3, ip
 80020d4:	d0df      	beq.n	8002096 <__ledf2+0x82>
 80020d6:	e7d2      	b.n	800207e <__ledf2+0x6a>
 80020d8:	45c8      	cmp	r8, r9
 80020da:	d8d0      	bhi.n	800207e <__ledf2+0x6a>
 80020dc:	2000      	movs	r0, #0
 80020de:	45c8      	cmp	r8, r9
 80020e0:	d2d9      	bcs.n	8002096 <__ledf2+0x82>
 80020e2:	e7ea      	b.n	80020ba <__ledf2+0xa6>
 80020e4:	9b01      	ldr	r3, [sp, #4]
 80020e6:	4563      	cmp	r3, ip
 80020e8:	d0e4      	beq.n	80020b4 <__ledf2+0xa0>
 80020ea:	e7c8      	b.n	800207e <__ledf2+0x6a>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_dmul>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4657      	mov	r7, sl
 80020f4:	464e      	mov	r6, r9
 80020f6:	46de      	mov	lr, fp
 80020f8:	4645      	mov	r5, r8
 80020fa:	b5e0      	push	{r5, r6, r7, lr}
 80020fc:	b089      	sub	sp, #36	@ 0x24
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	030b      	lsls	r3, r1, #12
 8002104:	0b1b      	lsrs	r3, r3, #12
 8002106:	469a      	mov	sl, r3
 8002108:	0fca      	lsrs	r2, r1, #31
 800210a:	004b      	lsls	r3, r1, #1
 800210c:	0004      	movs	r4, r0
 800210e:	4691      	mov	r9, r2
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	d100      	bne.n	8002116 <__aeabi_dmul+0x26>
 8002114:	e1bc      	b.n	8002490 <__aeabi_dmul+0x3a0>
 8002116:	4ad8      	ldr	r2, [pc, #864]	@ (8002478 <__aeabi_dmul+0x388>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d100      	bne.n	800211e <__aeabi_dmul+0x2e>
 800211c:	e14a      	b.n	80023b4 <__aeabi_dmul+0x2c4>
 800211e:	4651      	mov	r1, sl
 8002120:	0f42      	lsrs	r2, r0, #29
 8002122:	00c9      	lsls	r1, r1, #3
 8002124:	430a      	orrs	r2, r1
 8002126:	2180      	movs	r1, #128	@ 0x80
 8002128:	0409      	lsls	r1, r1, #16
 800212a:	4311      	orrs	r1, r2
 800212c:	00c2      	lsls	r2, r0, #3
 800212e:	4690      	mov	r8, r2
 8002130:	4ad2      	ldr	r2, [pc, #840]	@ (800247c <__aeabi_dmul+0x38c>)
 8002132:	468a      	mov	sl, r1
 8002134:	189c      	adds	r4, r3, r2
 8002136:	2300      	movs	r3, #0
 8002138:	2500      	movs	r5, #0
 800213a:	9303      	str	r3, [sp, #12]
 800213c:	9e00      	ldr	r6, [sp, #0]
 800213e:	9f01      	ldr	r7, [sp, #4]
 8002140:	033b      	lsls	r3, r7, #12
 8002142:	0b1b      	lsrs	r3, r3, #12
 8002144:	469b      	mov	fp, r3
 8002146:	0ffa      	lsrs	r2, r7, #31
 8002148:	007b      	lsls	r3, r7, #1
 800214a:	0030      	movs	r0, r6
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	9204      	str	r2, [sp, #16]
 8002150:	d100      	bne.n	8002154 <__aeabi_dmul+0x64>
 8002152:	e16f      	b.n	8002434 <__aeabi_dmul+0x344>
 8002154:	4ac8      	ldr	r2, [pc, #800]	@ (8002478 <__aeabi_dmul+0x388>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d100      	bne.n	800215c <__aeabi_dmul+0x6c>
 800215a:	e153      	b.n	8002404 <__aeabi_dmul+0x314>
 800215c:	4659      	mov	r1, fp
 800215e:	0f72      	lsrs	r2, r6, #29
 8002160:	00c9      	lsls	r1, r1, #3
 8002162:	430a      	orrs	r2, r1
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	0409      	lsls	r1, r1, #16
 8002168:	4311      	orrs	r1, r2
 800216a:	4ac4      	ldr	r2, [pc, #784]	@ (800247c <__aeabi_dmul+0x38c>)
 800216c:	468b      	mov	fp, r1
 800216e:	4694      	mov	ip, r2
 8002170:	2100      	movs	r1, #0
 8002172:	4463      	add	r3, ip
 8002174:	00f0      	lsls	r0, r6, #3
 8002176:	191b      	adds	r3, r3, r4
 8002178:	1c5c      	adds	r4, r3, #1
 800217a:	2d0a      	cmp	r5, #10
 800217c:	dd00      	ble.n	8002180 <__aeabi_dmul+0x90>
 800217e:	e126      	b.n	80023ce <__aeabi_dmul+0x2de>
 8002180:	464e      	mov	r6, r9
 8002182:	9a04      	ldr	r2, [sp, #16]
 8002184:	4056      	eors	r6, r2
 8002186:	b2f2      	uxtb	r2, r6
 8002188:	9200      	str	r2, [sp, #0]
 800218a:	2d02      	cmp	r5, #2
 800218c:	dc00      	bgt.n	8002190 <__aeabi_dmul+0xa0>
 800218e:	e1a8      	b.n	80024e2 <__aeabi_dmul+0x3f2>
 8002190:	2201      	movs	r2, #1
 8002192:	40aa      	lsls	r2, r5
 8002194:	27a6      	movs	r7, #166	@ 0xa6
 8002196:	0015      	movs	r5, r2
 8002198:	00ff      	lsls	r7, r7, #3
 800219a:	403a      	ands	r2, r7
 800219c:	423d      	tst	r5, r7
 800219e:	d000      	beq.n	80021a2 <__aeabi_dmul+0xb2>
 80021a0:	e113      	b.n	80023ca <__aeabi_dmul+0x2da>
 80021a2:	2790      	movs	r7, #144	@ 0x90
 80021a4:	00bf      	lsls	r7, r7, #2
 80021a6:	423d      	tst	r5, r7
 80021a8:	d000      	beq.n	80021ac <__aeabi_dmul+0xbc>
 80021aa:	e216      	b.n	80025da <__aeabi_dmul+0x4ea>
 80021ac:	2288      	movs	r2, #136	@ 0x88
 80021ae:	422a      	tst	r2, r5
 80021b0:	d000      	beq.n	80021b4 <__aeabi_dmul+0xc4>
 80021b2:	e1ef      	b.n	8002594 <__aeabi_dmul+0x4a4>
 80021b4:	4641      	mov	r1, r8
 80021b6:	4642      	mov	r2, r8
 80021b8:	0409      	lsls	r1, r1, #16
 80021ba:	0c09      	lsrs	r1, r1, #16
 80021bc:	000d      	movs	r5, r1
 80021be:	0c17      	lsrs	r7, r2, #16
 80021c0:	0c02      	lsrs	r2, r0, #16
 80021c2:	0400      	lsls	r0, r0, #16
 80021c4:	0c00      	lsrs	r0, r0, #16
 80021c6:	4345      	muls	r5, r0
 80021c8:	46ac      	mov	ip, r5
 80021ca:	0005      	movs	r5, r0
 80021cc:	0016      	movs	r6, r2
 80021ce:	437d      	muls	r5, r7
 80021d0:	46a8      	mov	r8, r5
 80021d2:	000d      	movs	r5, r1
 80021d4:	437e      	muls	r6, r7
 80021d6:	9203      	str	r2, [sp, #12]
 80021d8:	9604      	str	r6, [sp, #16]
 80021da:	0032      	movs	r2, r6
 80021dc:	9e03      	ldr	r6, [sp, #12]
 80021de:	4375      	muls	r5, r6
 80021e0:	4666      	mov	r6, ip
 80021e2:	0c36      	lsrs	r6, r6, #16
 80021e4:	46b1      	mov	r9, r6
 80021e6:	4445      	add	r5, r8
 80021e8:	444d      	add	r5, r9
 80021ea:	45a8      	cmp	r8, r5
 80021ec:	d905      	bls.n	80021fa <__aeabi_dmul+0x10a>
 80021ee:	0016      	movs	r6, r2
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	0252      	lsls	r2, r2, #9
 80021f4:	4690      	mov	r8, r2
 80021f6:	4446      	add	r6, r8
 80021f8:	9604      	str	r6, [sp, #16]
 80021fa:	0c2e      	lsrs	r6, r5, #16
 80021fc:	9605      	str	r6, [sp, #20]
 80021fe:	4666      	mov	r6, ip
 8002200:	0436      	lsls	r6, r6, #16
 8002202:	0c36      	lsrs	r6, r6, #16
 8002204:	46b4      	mov	ip, r6
 8002206:	042d      	lsls	r5, r5, #16
 8002208:	4465      	add	r5, ip
 800220a:	9506      	str	r5, [sp, #24]
 800220c:	465d      	mov	r5, fp
 800220e:	0c2d      	lsrs	r5, r5, #16
 8002210:	46a9      	mov	r9, r5
 8002212:	465d      	mov	r5, fp
 8002214:	000e      	movs	r6, r1
 8002216:	042d      	lsls	r5, r5, #16
 8002218:	0c2d      	lsrs	r5, r5, #16
 800221a:	436e      	muls	r6, r5
 800221c:	46b4      	mov	ip, r6
 800221e:	002e      	movs	r6, r5
 8002220:	437e      	muls	r6, r7
 8002222:	46b3      	mov	fp, r6
 8002224:	464e      	mov	r6, r9
 8002226:	4371      	muls	r1, r6
 8002228:	4459      	add	r1, fp
 800222a:	4688      	mov	r8, r1
 800222c:	4661      	mov	r1, ip
 800222e:	0c09      	lsrs	r1, r1, #16
 8002230:	4441      	add	r1, r8
 8002232:	4377      	muls	r7, r6
 8002234:	458b      	cmp	fp, r1
 8002236:	d903      	bls.n	8002240 <__aeabi_dmul+0x150>
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0252      	lsls	r2, r2, #9
 800223c:	4690      	mov	r8, r2
 800223e:	4447      	add	r7, r8
 8002240:	0c0e      	lsrs	r6, r1, #16
 8002242:	46b0      	mov	r8, r6
 8002244:	003e      	movs	r6, r7
 8002246:	4446      	add	r6, r8
 8002248:	9607      	str	r6, [sp, #28]
 800224a:	4666      	mov	r6, ip
 800224c:	0437      	lsls	r7, r6, #16
 800224e:	9e05      	ldr	r6, [sp, #20]
 8002250:	0c3f      	lsrs	r7, r7, #16
 8002252:	46b4      	mov	ip, r6
 8002254:	0409      	lsls	r1, r1, #16
 8002256:	19c9      	adds	r1, r1, r7
 8002258:	448c      	add	ip, r1
 800225a:	4666      	mov	r6, ip
 800225c:	9605      	str	r6, [sp, #20]
 800225e:	4656      	mov	r6, sl
 8002260:	0c36      	lsrs	r6, r6, #16
 8002262:	46b4      	mov	ip, r6
 8002264:	4656      	mov	r6, sl
 8002266:	0437      	lsls	r7, r6, #16
 8002268:	0c3f      	lsrs	r7, r7, #16
 800226a:	003e      	movs	r6, r7
 800226c:	4346      	muls	r6, r0
 800226e:	46b0      	mov	r8, r6
 8002270:	4666      	mov	r6, ip
 8002272:	4346      	muls	r6, r0
 8002274:	46b2      	mov	sl, r6
 8002276:	4646      	mov	r6, r8
 8002278:	4660      	mov	r0, ip
 800227a:	0c36      	lsrs	r6, r6, #16
 800227c:	46b3      	mov	fp, r6
 800227e:	9a03      	ldr	r2, [sp, #12]
 8002280:	4350      	muls	r0, r2
 8002282:	437a      	muls	r2, r7
 8002284:	4452      	add	r2, sl
 8002286:	445a      	add	r2, fp
 8002288:	4592      	cmp	sl, r2
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x1a4>
 800228c:	2680      	movs	r6, #128	@ 0x80
 800228e:	0276      	lsls	r6, r6, #9
 8002290:	46b2      	mov	sl, r6
 8002292:	4450      	add	r0, sl
 8002294:	0c16      	lsrs	r6, r2, #16
 8002296:	46b2      	mov	sl, r6
 8002298:	4482      	add	sl, r0
 800229a:	4640      	mov	r0, r8
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	4690      	mov	r8, r2
 80022a0:	0400      	lsls	r0, r0, #16
 80022a2:	0c00      	lsrs	r0, r0, #16
 80022a4:	003a      	movs	r2, r7
 80022a6:	464e      	mov	r6, r9
 80022a8:	4480      	add	r8, r0
 80022aa:	4660      	mov	r0, ip
 80022ac:	436a      	muls	r2, r5
 80022ae:	4377      	muls	r7, r6
 80022b0:	4345      	muls	r5, r0
 80022b2:	4370      	muls	r0, r6
 80022b4:	4684      	mov	ip, r0
 80022b6:	1978      	adds	r0, r7, r5
 80022b8:	0c17      	lsrs	r7, r2, #16
 80022ba:	183f      	adds	r7, r7, r0
 80022bc:	42bd      	cmp	r5, r7
 80022be:	d903      	bls.n	80022c8 <__aeabi_dmul+0x1d8>
 80022c0:	2080      	movs	r0, #128	@ 0x80
 80022c2:	0240      	lsls	r0, r0, #9
 80022c4:	4681      	mov	r9, r0
 80022c6:	44cc      	add	ip, r9
 80022c8:	9d05      	ldr	r5, [sp, #20]
 80022ca:	9804      	ldr	r0, [sp, #16]
 80022cc:	46a9      	mov	r9, r5
 80022ce:	9e07      	ldr	r6, [sp, #28]
 80022d0:	4448      	add	r0, r9
 80022d2:	4288      	cmp	r0, r1
 80022d4:	4189      	sbcs	r1, r1
 80022d6:	46b1      	mov	r9, r6
 80022d8:	0412      	lsls	r2, r2, #16
 80022da:	043d      	lsls	r5, r7, #16
 80022dc:	0c12      	lsrs	r2, r2, #16
 80022de:	18aa      	adds	r2, r5, r2
 80022e0:	444a      	add	r2, r9
 80022e2:	4249      	negs	r1, r1
 80022e4:	1855      	adds	r5, r2, r1
 80022e6:	4440      	add	r0, r8
 80022e8:	46a9      	mov	r9, r5
 80022ea:	4540      	cmp	r0, r8
 80022ec:	41ad      	sbcs	r5, r5
 80022ee:	46c8      	mov	r8, r9
 80022f0:	426d      	negs	r5, r5
 80022f2:	46ab      	mov	fp, r5
 80022f4:	42b2      	cmp	r2, r6
 80022f6:	4192      	sbcs	r2, r2
 80022f8:	4589      	cmp	r9, r1
 80022fa:	4189      	sbcs	r1, r1
 80022fc:	44d0      	add	r8, sl
 80022fe:	44c3      	add	fp, r8
 8002300:	4249      	negs	r1, r1
 8002302:	4252      	negs	r2, r2
 8002304:	430a      	orrs	r2, r1
 8002306:	45ab      	cmp	fp, r5
 8002308:	41ad      	sbcs	r5, r5
 800230a:	45d0      	cmp	r8, sl
 800230c:	4189      	sbcs	r1, r1
 800230e:	426d      	negs	r5, r5
 8002310:	4249      	negs	r1, r1
 8002312:	430d      	orrs	r5, r1
 8002314:	4659      	mov	r1, fp
 8002316:	0c3f      	lsrs	r7, r7, #16
 8002318:	19d2      	adds	r2, r2, r7
 800231a:	1952      	adds	r2, r2, r5
 800231c:	4462      	add	r2, ip
 800231e:	0252      	lsls	r2, r2, #9
 8002320:	0dc9      	lsrs	r1, r1, #23
 8002322:	9d06      	ldr	r5, [sp, #24]
 8002324:	4311      	orrs	r1, r2
 8002326:	468a      	mov	sl, r1
 8002328:	0241      	lsls	r1, r0, #9
 800232a:	4329      	orrs	r1, r5
 800232c:	1e4d      	subs	r5, r1, #1
 800232e:	41a9      	sbcs	r1, r5
 8002330:	0dc0      	lsrs	r0, r0, #23
 8002332:	4308      	orrs	r0, r1
 8002334:	4659      	mov	r1, fp
 8002336:	0249      	lsls	r1, r1, #9
 8002338:	4308      	orrs	r0, r1
 800233a:	4680      	mov	r8, r0
 800233c:	01d2      	lsls	r2, r2, #7
 800233e:	d400      	bmi.n	8002342 <__aeabi_dmul+0x252>
 8002340:	e173      	b.n	800262a <__aeabi_dmul+0x53a>
 8002342:	2201      	movs	r2, #1
 8002344:	0843      	lsrs	r3, r0, #1
 8002346:	4002      	ands	r2, r0
 8002348:	4313      	orrs	r3, r2
 800234a:	4652      	mov	r2, sl
 800234c:	07d2      	lsls	r2, r2, #31
 800234e:	4313      	orrs	r3, r2
 8002350:	4698      	mov	r8, r3
 8002352:	4653      	mov	r3, sl
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	469a      	mov	sl, r3
 8002358:	9b00      	ldr	r3, [sp, #0]
 800235a:	4699      	mov	r9, r3
 800235c:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <__aeabi_dmul+0x390>)
 800235e:	18e3      	adds	r3, r4, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	dc00      	bgt.n	8002366 <__aeabi_dmul+0x276>
 8002364:	e0e5      	b.n	8002532 <__aeabi_dmul+0x442>
 8002366:	4642      	mov	r2, r8
 8002368:	0752      	lsls	r2, r2, #29
 800236a:	d00a      	beq.n	8002382 <__aeabi_dmul+0x292>
 800236c:	220f      	movs	r2, #15
 800236e:	4641      	mov	r1, r8
 8002370:	400a      	ands	r2, r1
 8002372:	2a04      	cmp	r2, #4
 8002374:	d005      	beq.n	8002382 <__aeabi_dmul+0x292>
 8002376:	3104      	adds	r1, #4
 8002378:	4541      	cmp	r1, r8
 800237a:	4192      	sbcs	r2, r2
 800237c:	4688      	mov	r8, r1
 800237e:	4252      	negs	r2, r2
 8002380:	4492      	add	sl, r2
 8002382:	4652      	mov	r2, sl
 8002384:	01d2      	lsls	r2, r2, #7
 8002386:	d506      	bpl.n	8002396 <__aeabi_dmul+0x2a6>
 8002388:	4652      	mov	r2, sl
 800238a:	4b3e      	ldr	r3, [pc, #248]	@ (8002484 <__aeabi_dmul+0x394>)
 800238c:	401a      	ands	r2, r3
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	4692      	mov	sl, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	18e3      	adds	r3, r4, r3
 8002396:	4a3c      	ldr	r2, [pc, #240]	@ (8002488 <__aeabi_dmul+0x398>)
 8002398:	4293      	cmp	r3, r2
 800239a:	dd00      	ble.n	800239e <__aeabi_dmul+0x2ae>
 800239c:	e09d      	b.n	80024da <__aeabi_dmul+0x3ea>
 800239e:	4642      	mov	r2, r8
 80023a0:	08d1      	lsrs	r1, r2, #3
 80023a2:	4652      	mov	r2, sl
 80023a4:	0752      	lsls	r2, r2, #29
 80023a6:	430a      	orrs	r2, r1
 80023a8:	4651      	mov	r1, sl
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	024c      	lsls	r4, r1, #9
 80023ae:	0b24      	lsrs	r4, r4, #12
 80023b0:	0d5b      	lsrs	r3, r3, #21
 80023b2:	e019      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 80023b4:	4652      	mov	r2, sl
 80023b6:	4302      	orrs	r2, r0
 80023b8:	4690      	mov	r8, r2
 80023ba:	d000      	beq.n	80023be <__aeabi_dmul+0x2ce>
 80023bc:	e0b3      	b.n	8002526 <__aeabi_dmul+0x436>
 80023be:	001c      	movs	r4, r3
 80023c0:	2302      	movs	r3, #2
 80023c2:	4692      	mov	sl, r2
 80023c4:	2508      	movs	r5, #8
 80023c6:	9303      	str	r3, [sp, #12]
 80023c8:	e6b8      	b.n	800213c <__aeabi_dmul+0x4c>
 80023ca:	9b00      	ldr	r3, [sp, #0]
 80023cc:	4699      	mov	r9, r3
 80023ce:	9b03      	ldr	r3, [sp, #12]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dmul+0x2e6>
 80023d4:	e081      	b.n	80024da <__aeabi_dmul+0x3ea>
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d100      	bne.n	80023dc <__aeabi_dmul+0x2ec>
 80023da:	e0f5      	b.n	80025c8 <__aeabi_dmul+0x4d8>
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d1bc      	bne.n	800235c <__aeabi_dmul+0x26c>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2400      	movs	r4, #0
 80023e6:	2200      	movs	r2, #0
 80023e8:	0010      	movs	r0, r2
 80023ea:	464a      	mov	r2, r9
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	4323      	orrs	r3, r4
 80023f0:	07d2      	lsls	r2, r2, #31
 80023f2:	4313      	orrs	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	b009      	add	sp, #36	@ 0x24
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	465b      	mov	r3, fp
 8002406:	9e00      	ldr	r6, [sp, #0]
 8002408:	431e      	orrs	r6, r3
 800240a:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <__aeabi_dmul+0x388>)
 800240c:	18e3      	adds	r3, r4, r3
 800240e:	2e00      	cmp	r6, #0
 8002410:	d100      	bne.n	8002414 <__aeabi_dmul+0x324>
 8002412:	e081      	b.n	8002518 <__aeabi_dmul+0x428>
 8002414:	2203      	movs	r2, #3
 8002416:	464e      	mov	r6, r9
 8002418:	4315      	orrs	r5, r2
 800241a:	9a04      	ldr	r2, [sp, #16]
 800241c:	4056      	eors	r6, r2
 800241e:	b2f2      	uxtb	r2, r6
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	4694      	mov	ip, r2
 8002428:	4464      	add	r4, ip
 800242a:	2d0a      	cmp	r5, #10
 800242c:	dd00      	ble.n	8002430 <__aeabi_dmul+0x340>
 800242e:	e0b7      	b.n	80025a0 <__aeabi_dmul+0x4b0>
 8002430:	2103      	movs	r1, #3
 8002432:	e6ad      	b.n	8002190 <__aeabi_dmul+0xa0>
 8002434:	465b      	mov	r3, fp
 8002436:	9a00      	ldr	r2, [sp, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	d065      	beq.n	8002508 <__aeabi_dmul+0x418>
 800243c:	465b      	mov	r3, fp
 800243e:	2b00      	cmp	r3, #0
 8002440:	d100      	bne.n	8002444 <__aeabi_dmul+0x354>
 8002442:	e0e2      	b.n	800260a <__aeabi_dmul+0x51a>
 8002444:	4658      	mov	r0, fp
 8002446:	f000 fd35 	bl	8002eb4 <__clzsi2>
 800244a:	0002      	movs	r2, r0
 800244c:	0003      	movs	r3, r0
 800244e:	3a0b      	subs	r2, #11
 8002450:	271d      	movs	r7, #29
 8002452:	9e00      	ldr	r6, [sp, #0]
 8002454:	1aba      	subs	r2, r7, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4658      	mov	r0, fp
 800245a:	40d6      	lsrs	r6, r2
 800245c:	3908      	subs	r1, #8
 800245e:	4088      	lsls	r0, r1
 8002460:	0032      	movs	r2, r6
 8002462:	4302      	orrs	r2, r0
 8002464:	9800      	ldr	r0, [sp, #0]
 8002466:	4693      	mov	fp, r2
 8002468:	4088      	lsls	r0, r1
 800246a:	4a08      	ldr	r2, [pc, #32]	@ (800248c <__aeabi_dmul+0x39c>)
 800246c:	1ae3      	subs	r3, r4, r3
 800246e:	4694      	mov	ip, r2
 8002470:	2100      	movs	r1, #0
 8002472:	4463      	add	r3, ip
 8002474:	e680      	b.n	8002178 <__aeabi_dmul+0x88>
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	000007ff 	.word	0x000007ff
 800247c:	fffffc01 	.word	0xfffffc01
 8002480:	000003ff 	.word	0x000003ff
 8002484:	feffffff 	.word	0xfeffffff
 8002488:	000007fe 	.word	0x000007fe
 800248c:	fffffc0d 	.word	0xfffffc0d
 8002490:	4653      	mov	r3, sl
 8002492:	4303      	orrs	r3, r0
 8002494:	4698      	mov	r8, r3
 8002496:	d030      	beq.n	80024fa <__aeabi_dmul+0x40a>
 8002498:	4653      	mov	r3, sl
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dmul+0x3b0>
 800249e:	e0a2      	b.n	80025e6 <__aeabi_dmul+0x4f6>
 80024a0:	4650      	mov	r0, sl
 80024a2:	f000 fd07 	bl	8002eb4 <__clzsi2>
 80024a6:	230b      	movs	r3, #11
 80024a8:	425b      	negs	r3, r3
 80024aa:	469c      	mov	ip, r3
 80024ac:	0002      	movs	r2, r0
 80024ae:	4484      	add	ip, r0
 80024b0:	4666      	mov	r6, ip
 80024b2:	231d      	movs	r3, #29
 80024b4:	1b9b      	subs	r3, r3, r6
 80024b6:	0026      	movs	r6, r4
 80024b8:	0011      	movs	r1, r2
 80024ba:	4650      	mov	r0, sl
 80024bc:	40de      	lsrs	r6, r3
 80024be:	3908      	subs	r1, #8
 80024c0:	4088      	lsls	r0, r1
 80024c2:	0033      	movs	r3, r6
 80024c4:	4303      	orrs	r3, r0
 80024c6:	469a      	mov	sl, r3
 80024c8:	0023      	movs	r3, r4
 80024ca:	408b      	lsls	r3, r1
 80024cc:	4698      	mov	r8, r3
 80024ce:	2300      	movs	r3, #0
 80024d0:	4c69      	ldr	r4, [pc, #420]	@ (8002678 <__aeabi_dmul+0x588>)
 80024d2:	2500      	movs	r5, #0
 80024d4:	1aa4      	subs	r4, r4, r2
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	e630      	b.n	800213c <__aeabi_dmul+0x4c>
 80024da:	2400      	movs	r4, #0
 80024dc:	2200      	movs	r2, #0
 80024de:	4b67      	ldr	r3, [pc, #412]	@ (800267c <__aeabi_dmul+0x58c>)
 80024e0:	e782      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 80024e2:	3d01      	subs	r5, #1
 80024e4:	2d01      	cmp	r5, #1
 80024e6:	d900      	bls.n	80024ea <__aeabi_dmul+0x3fa>
 80024e8:	e664      	b.n	80021b4 <__aeabi_dmul+0xc4>
 80024ea:	9b00      	ldr	r3, [sp, #0]
 80024ec:	4699      	mov	r9, r3
 80024ee:	2902      	cmp	r1, #2
 80024f0:	d0f3      	beq.n	80024da <__aeabi_dmul+0x3ea>
 80024f2:	46da      	mov	sl, fp
 80024f4:	4680      	mov	r8, r0
 80024f6:	9103      	str	r1, [sp, #12]
 80024f8:	e770      	b.n	80023dc <__aeabi_dmul+0x2ec>
 80024fa:	2300      	movs	r3, #0
 80024fc:	469a      	mov	sl, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	2504      	movs	r5, #4
 8002502:	2400      	movs	r4, #0
 8002504:	9303      	str	r3, [sp, #12]
 8002506:	e619      	b.n	800213c <__aeabi_dmul+0x4c>
 8002508:	2200      	movs	r2, #0
 800250a:	3301      	adds	r3, #1
 800250c:	431d      	orrs	r5, r3
 800250e:	4693      	mov	fp, r2
 8002510:	0023      	movs	r3, r4
 8002512:	2000      	movs	r0, #0
 8002514:	2101      	movs	r1, #1
 8002516:	e62f      	b.n	8002178 <__aeabi_dmul+0x88>
 8002518:	2202      	movs	r2, #2
 800251a:	4315      	orrs	r5, r2
 800251c:	2200      	movs	r2, #0
 800251e:	2000      	movs	r0, #0
 8002520:	4693      	mov	fp, r2
 8002522:	2102      	movs	r1, #2
 8002524:	e628      	b.n	8002178 <__aeabi_dmul+0x88>
 8002526:	001c      	movs	r4, r3
 8002528:	2303      	movs	r3, #3
 800252a:	4680      	mov	r8, r0
 800252c:	250c      	movs	r5, #12
 800252e:	9303      	str	r3, [sp, #12]
 8002530:	e604      	b.n	800213c <__aeabi_dmul+0x4c>
 8002532:	2101      	movs	r1, #1
 8002534:	1ac9      	subs	r1, r1, r3
 8002536:	2938      	cmp	r1, #56	@ 0x38
 8002538:	dd00      	ble.n	800253c <__aeabi_dmul+0x44c>
 800253a:	e752      	b.n	80023e2 <__aeabi_dmul+0x2f2>
 800253c:	291f      	cmp	r1, #31
 800253e:	dd78      	ble.n	8002632 <__aeabi_dmul+0x542>
 8002540:	221f      	movs	r2, #31
 8002542:	4252      	negs	r2, r2
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	4652      	mov	r2, sl
 8002548:	40da      	lsrs	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	2920      	cmp	r1, #32
 800254e:	d007      	beq.n	8002560 <__aeabi_dmul+0x470>
 8002550:	4a4b      	ldr	r2, [pc, #300]	@ (8002680 <__aeabi_dmul+0x590>)
 8002552:	4641      	mov	r1, r8
 8002554:	4694      	mov	ip, r2
 8002556:	4652      	mov	r2, sl
 8002558:	4464      	add	r4, ip
 800255a:	40a2      	lsls	r2, r4
 800255c:	4311      	orrs	r1, r2
 800255e:	4688      	mov	r8, r1
 8002560:	4642      	mov	r2, r8
 8002562:	1e51      	subs	r1, r2, #1
 8002564:	418a      	sbcs	r2, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	2307      	movs	r3, #7
 800256a:	0019      	movs	r1, r3
 800256c:	2400      	movs	r4, #0
 800256e:	4011      	ands	r1, r2
 8002570:	4213      	tst	r3, r2
 8002572:	d00b      	beq.n	800258c <__aeabi_dmul+0x49c>
 8002574:	230f      	movs	r3, #15
 8002576:	4013      	ands	r3, r2
 8002578:	2b04      	cmp	r3, #4
 800257a:	d07b      	beq.n	8002674 <__aeabi_dmul+0x584>
 800257c:	1d13      	adds	r3, r2, #4
 800257e:	4293      	cmp	r3, r2
 8002580:	41a4      	sbcs	r4, r4
 8002582:	001a      	movs	r2, r3
 8002584:	4264      	negs	r4, r4
 8002586:	0761      	lsls	r1, r4, #29
 8002588:	0264      	lsls	r4, r4, #9
 800258a:	0b24      	lsrs	r4, r4, #12
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	2300      	movs	r3, #0
 8002590:	430a      	orrs	r2, r1
 8002592:	e729      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 8002594:	9b04      	ldr	r3, [sp, #16]
 8002596:	46da      	mov	sl, fp
 8002598:	4699      	mov	r9, r3
 800259a:	4680      	mov	r8, r0
 800259c:	9103      	str	r1, [sp, #12]
 800259e:	e716      	b.n	80023ce <__aeabi_dmul+0x2de>
 80025a0:	2d0f      	cmp	r5, #15
 80025a2:	d10d      	bne.n	80025c0 <__aeabi_dmul+0x4d0>
 80025a4:	2480      	movs	r4, #128	@ 0x80
 80025a6:	4653      	mov	r3, sl
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	4223      	tst	r3, r4
 80025ac:	d00c      	beq.n	80025c8 <__aeabi_dmul+0x4d8>
 80025ae:	465b      	mov	r3, fp
 80025b0:	4223      	tst	r3, r4
 80025b2:	d109      	bne.n	80025c8 <__aeabi_dmul+0x4d8>
 80025b4:	431c      	orrs	r4, r3
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	0002      	movs	r2, r0
 80025ba:	4699      	mov	r9, r3
 80025bc:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <__aeabi_dmul+0x58c>)
 80025be:	e713      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 80025c0:	9b04      	ldr	r3, [sp, #16]
 80025c2:	46da      	mov	sl, fp
 80025c4:	4699      	mov	r9, r3
 80025c6:	4680      	mov	r8, r0
 80025c8:	2480      	movs	r4, #128	@ 0x80
 80025ca:	4653      	mov	r3, sl
 80025cc:	0324      	lsls	r4, r4, #12
 80025ce:	431c      	orrs	r4, r3
 80025d0:	0324      	lsls	r4, r4, #12
 80025d2:	4642      	mov	r2, r8
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <__aeabi_dmul+0x58c>)
 80025d6:	0b24      	lsrs	r4, r4, #12
 80025d8:	e706      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 80025da:	2300      	movs	r3, #0
 80025dc:	2480      	movs	r4, #128	@ 0x80
 80025de:	4699      	mov	r9, r3
 80025e0:	0324      	lsls	r4, r4, #12
 80025e2:	4b26      	ldr	r3, [pc, #152]	@ (800267c <__aeabi_dmul+0x58c>)
 80025e4:	e700      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 80025e6:	f000 fc65 	bl	8002eb4 <__clzsi2>
 80025ea:	2315      	movs	r3, #21
 80025ec:	469c      	mov	ip, r3
 80025ee:	4484      	add	ip, r0
 80025f0:	0002      	movs	r2, r0
 80025f2:	4663      	mov	r3, ip
 80025f4:	3220      	adds	r2, #32
 80025f6:	2b1c      	cmp	r3, #28
 80025f8:	dc00      	bgt.n	80025fc <__aeabi_dmul+0x50c>
 80025fa:	e759      	b.n	80024b0 <__aeabi_dmul+0x3c0>
 80025fc:	2300      	movs	r3, #0
 80025fe:	4698      	mov	r8, r3
 8002600:	0023      	movs	r3, r4
 8002602:	3808      	subs	r0, #8
 8002604:	4083      	lsls	r3, r0
 8002606:	469a      	mov	sl, r3
 8002608:	e761      	b.n	80024ce <__aeabi_dmul+0x3de>
 800260a:	f000 fc53 	bl	8002eb4 <__clzsi2>
 800260e:	0002      	movs	r2, r0
 8002610:	0003      	movs	r3, r0
 8002612:	3215      	adds	r2, #21
 8002614:	3320      	adds	r3, #32
 8002616:	2a1c      	cmp	r2, #28
 8002618:	dc00      	bgt.n	800261c <__aeabi_dmul+0x52c>
 800261a:	e719      	b.n	8002450 <__aeabi_dmul+0x360>
 800261c:	0002      	movs	r2, r0
 800261e:	9900      	ldr	r1, [sp, #0]
 8002620:	3a08      	subs	r2, #8
 8002622:	4091      	lsls	r1, r2
 8002624:	2000      	movs	r0, #0
 8002626:	468b      	mov	fp, r1
 8002628:	e71f      	b.n	800246a <__aeabi_dmul+0x37a>
 800262a:	9a00      	ldr	r2, [sp, #0]
 800262c:	001c      	movs	r4, r3
 800262e:	4691      	mov	r9, r2
 8002630:	e694      	b.n	800235c <__aeabi_dmul+0x26c>
 8002632:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <__aeabi_dmul+0x594>)
 8002634:	4652      	mov	r2, sl
 8002636:	469c      	mov	ip, r3
 8002638:	4643      	mov	r3, r8
 800263a:	4464      	add	r4, ip
 800263c:	40a2      	lsls	r2, r4
 800263e:	40cb      	lsrs	r3, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	4643      	mov	r3, r8
 8002644:	40a3      	lsls	r3, r4
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	4183      	sbcs	r3, r0
 800264a:	4654      	mov	r4, sl
 800264c:	431a      	orrs	r2, r3
 800264e:	40cc      	lsrs	r4, r1
 8002650:	0753      	lsls	r3, r2, #29
 8002652:	d009      	beq.n	8002668 <__aeabi_dmul+0x578>
 8002654:	230f      	movs	r3, #15
 8002656:	4013      	ands	r3, r2
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <__aeabi_dmul+0x578>
 800265c:	1d13      	adds	r3, r2, #4
 800265e:	4293      	cmp	r3, r2
 8002660:	4192      	sbcs	r2, r2
 8002662:	4252      	negs	r2, r2
 8002664:	18a4      	adds	r4, r4, r2
 8002666:	001a      	movs	r2, r3
 8002668:	0223      	lsls	r3, r4, #8
 800266a:	d58c      	bpl.n	8002586 <__aeabi_dmul+0x496>
 800266c:	2301      	movs	r3, #1
 800266e:	2400      	movs	r4, #0
 8002670:	2200      	movs	r2, #0
 8002672:	e6b9      	b.n	80023e8 <__aeabi_dmul+0x2f8>
 8002674:	2400      	movs	r4, #0
 8002676:	e786      	b.n	8002586 <__aeabi_dmul+0x496>
 8002678:	fffffc0d 	.word	0xfffffc0d
 800267c:	000007ff 	.word	0x000007ff
 8002680:	0000043e 	.word	0x0000043e
 8002684:	0000041e 	.word	0x0000041e

08002688 <__aeabi_dsub>:
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	4657      	mov	r7, sl
 800268c:	464e      	mov	r6, r9
 800268e:	4645      	mov	r5, r8
 8002690:	46de      	mov	lr, fp
 8002692:	b5e0      	push	{r5, r6, r7, lr}
 8002694:	b083      	sub	sp, #12
 8002696:	9000      	str	r0, [sp, #0]
 8002698:	9101      	str	r1, [sp, #4]
 800269a:	030e      	lsls	r6, r1, #12
 800269c:	004d      	lsls	r5, r1, #1
 800269e:	0fcc      	lsrs	r4, r1, #31
 80026a0:	0a71      	lsrs	r1, r6, #9
 80026a2:	9e00      	ldr	r6, [sp, #0]
 80026a4:	005f      	lsls	r7, r3, #1
 80026a6:	0f76      	lsrs	r6, r6, #29
 80026a8:	430e      	orrs	r6, r1
 80026aa:	9900      	ldr	r1, [sp, #0]
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	00c8      	lsls	r0, r1, #3
 80026b2:	0319      	lsls	r1, r3, #12
 80026b4:	0d7b      	lsrs	r3, r7, #21
 80026b6:	469a      	mov	sl, r3
 80026b8:	46b4      	mov	ip, r6
 80026ba:	9e00      	ldr	r6, [sp, #0]
 80026bc:	9f01      	ldr	r7, [sp, #4]
 80026be:	0ffb      	lsrs	r3, r7, #31
 80026c0:	4699      	mov	r9, r3
 80026c2:	4aca      	ldr	r2, [pc, #808]	@ (80029ec <__aeabi_dsub+0x364>)
 80026c4:	0a4b      	lsrs	r3, r1, #9
 80026c6:	0f71      	lsrs	r1, r6, #29
 80026c8:	4319      	orrs	r1, r3
 80026ca:	00f3      	lsls	r3, r6, #3
 80026cc:	4683      	mov	fp, r0
 80026ce:	4698      	mov	r8, r3
 80026d0:	001f      	movs	r7, r3
 80026d2:	0d6d      	lsrs	r5, r5, #21
 80026d4:	4592      	cmp	sl, r2
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x52>
 80026d8:	e0c4      	b.n	8002864 <__aeabi_dsub+0x1dc>
 80026da:	2301      	movs	r3, #1
 80026dc:	464e      	mov	r6, r9
 80026de:	405e      	eors	r6, r3
 80026e0:	4653      	mov	r3, sl
 80026e2:	46b1      	mov	r9, r6
 80026e4:	1aeb      	subs	r3, r5, r3
 80026e6:	42b4      	cmp	r4, r6
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x64>
 80026ea:	e07a      	b.n	80027e2 <__aeabi_dsub+0x15a>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	dc00      	bgt.n	80026f2 <__aeabi_dsub+0x6a>
 80026f0:	e324      	b.n	8002d3c <__aeabi_dsub+0x6b4>
 80026f2:	4656      	mov	r6, sl
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x72>
 80026f8:	e0d4      	b.n	80028a4 <__aeabi_dsub+0x21c>
 80026fa:	4295      	cmp	r5, r2
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x78>
 80026fe:	e164      	b.n	80029ca <__aeabi_dsub+0x342>
 8002700:	2601      	movs	r6, #1
 8002702:	2b38      	cmp	r3, #56	@ 0x38
 8002704:	dc16      	bgt.n	8002734 <__aeabi_dsub+0xac>
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	0412      	lsls	r2, r2, #16
 800270a:	4311      	orrs	r1, r2
 800270c:	2b1f      	cmp	r3, #31
 800270e:	dd00      	ble.n	8002712 <__aeabi_dsub+0x8a>
 8002710:	e1d6      	b.n	8002ac0 <__aeabi_dsub+0x438>
 8002712:	2220      	movs	r2, #32
 8002714:	000e      	movs	r6, r1
 8002716:	4647      	mov	r7, r8
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	40df      	lsrs	r7, r3
 800271c:	4096      	lsls	r6, r2
 800271e:	433e      	orrs	r6, r7
 8002720:	4647      	mov	r7, r8
 8002722:	4097      	lsls	r7, r2
 8002724:	40d9      	lsrs	r1, r3
 8002726:	003a      	movs	r2, r7
 8002728:	4663      	mov	r3, ip
 800272a:	1e57      	subs	r7, r2, #1
 800272c:	41ba      	sbcs	r2, r7
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	469c      	mov	ip, r3
 8002732:	4316      	orrs	r6, r2
 8002734:	1b86      	subs	r6, r0, r6
 8002736:	42b0      	cmp	r0, r6
 8002738:	4180      	sbcs	r0, r0
 800273a:	4663      	mov	r3, ip
 800273c:	4240      	negs	r0, r0
 800273e:	1a1f      	subs	r7, r3, r0
 8002740:	023b      	lsls	r3, r7, #8
 8002742:	d400      	bmi.n	8002746 <__aeabi_dsub+0xbe>
 8002744:	e138      	b.n	80029b8 <__aeabi_dsub+0x330>
 8002746:	027f      	lsls	r7, r7, #9
 8002748:	0a7f      	lsrs	r7, r7, #9
 800274a:	2f00      	cmp	r7, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0xc8>
 800274e:	e114      	b.n	800297a <__aeabi_dsub+0x2f2>
 8002750:	0038      	movs	r0, r7
 8002752:	f000 fbaf 	bl	8002eb4 <__clzsi2>
 8002756:	0003      	movs	r3, r0
 8002758:	3b08      	subs	r3, #8
 800275a:	2120      	movs	r1, #32
 800275c:	0030      	movs	r0, r6
 800275e:	1aca      	subs	r2, r1, r3
 8002760:	40d0      	lsrs	r0, r2
 8002762:	409f      	lsls	r7, r3
 8002764:	0002      	movs	r2, r0
 8002766:	409e      	lsls	r6, r3
 8002768:	433a      	orrs	r2, r7
 800276a:	429d      	cmp	r5, r3
 800276c:	dd00      	ble.n	8002770 <__aeabi_dsub+0xe8>
 800276e:	e17a      	b.n	8002a66 <__aeabi_dsub+0x3de>
 8002770:	1b58      	subs	r0, r3, r5
 8002772:	3001      	adds	r0, #1
 8002774:	1a09      	subs	r1, r1, r0
 8002776:	0037      	movs	r7, r6
 8002778:	408e      	lsls	r6, r1
 800277a:	40c7      	lsrs	r7, r0
 800277c:	1e73      	subs	r3, r6, #1
 800277e:	419e      	sbcs	r6, r3
 8002780:	0013      	movs	r3, r2
 8002782:	40c2      	lsrs	r2, r0
 8002784:	408b      	lsls	r3, r1
 8002786:	433e      	orrs	r6, r7
 8002788:	2500      	movs	r5, #0
 800278a:	0017      	movs	r7, r2
 800278c:	431e      	orrs	r6, r3
 800278e:	0773      	lsls	r3, r6, #29
 8002790:	d009      	beq.n	80027a6 <__aeabi_dsub+0x11e>
 8002792:	230f      	movs	r3, #15
 8002794:	4033      	ands	r3, r6
 8002796:	2b04      	cmp	r3, #4
 8002798:	d005      	beq.n	80027a6 <__aeabi_dsub+0x11e>
 800279a:	1d33      	adds	r3, r6, #4
 800279c:	42b3      	cmp	r3, r6
 800279e:	41b6      	sbcs	r6, r6
 80027a0:	4276      	negs	r6, r6
 80027a2:	19bf      	adds	r7, r7, r6
 80027a4:	001e      	movs	r6, r3
 80027a6:	023b      	lsls	r3, r7, #8
 80027a8:	d400      	bmi.n	80027ac <__aeabi_dsub+0x124>
 80027aa:	e29a      	b.n	8002ce2 <__aeabi_dsub+0x65a>
 80027ac:	4a8f      	ldr	r2, [pc, #572]	@ (80029ec <__aeabi_dsub+0x364>)
 80027ae:	1c6b      	adds	r3, r5, #1
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x12e>
 80027b4:	e106      	b.n	80029c4 <__aeabi_dsub+0x33c>
 80027b6:	4d8e      	ldr	r5, [pc, #568]	@ (80029f0 <__aeabi_dsub+0x368>)
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	403d      	ands	r5, r7
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	076a      	lsls	r2, r5, #29
 80027c0:	08f6      	lsrs	r6, r6, #3
 80027c2:	026d      	lsls	r5, r5, #9
 80027c4:	4332      	orrs	r2, r6
 80027c6:	0b2d      	lsrs	r5, r5, #12
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	432b      	orrs	r3, r5
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4323      	orrs	r3, r4
 80027d0:	0010      	movs	r0, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	b003      	add	sp, #12
 80027d6:	bcf0      	pop	{r4, r5, r6, r7}
 80027d8:	46bb      	mov	fp, r7
 80027da:	46b2      	mov	sl, r6
 80027dc:	46a9      	mov	r9, r5
 80027de:	46a0      	mov	r8, r4
 80027e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dsub+0x160>
 80027e6:	e2c4      	b.n	8002d72 <__aeabi_dsub+0x6ea>
 80027e8:	4656      	mov	r6, sl
 80027ea:	2e00      	cmp	r6, #0
 80027ec:	d000      	beq.n	80027f0 <__aeabi_dsub+0x168>
 80027ee:	e0ba      	b.n	8002966 <__aeabi_dsub+0x2de>
 80027f0:	4646      	mov	r6, r8
 80027f2:	430e      	orrs	r6, r1
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x170>
 80027f6:	e0ea      	b.n	80029ce <__aeabi_dsub+0x346>
 80027f8:	1e5e      	subs	r6, r3, #1
 80027fa:	46b1      	mov	r9, r6
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x17a>
 8002800:	e1aa      	b.n	8002b58 <__aeabi_dsub+0x4d0>
 8002802:	4293      	cmp	r3, r2
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x180>
 8002806:	e0e0      	b.n	80029ca <__aeabi_dsub+0x342>
 8002808:	464b      	mov	r3, r9
 800280a:	2601      	movs	r6, #1
 800280c:	2b38      	cmp	r3, #56	@ 0x38
 800280e:	dc11      	bgt.n	8002834 <__aeabi_dsub+0x1ac>
 8002810:	2b1f      	cmp	r3, #31
 8002812:	dd00      	ble.n	8002816 <__aeabi_dsub+0x18e>
 8002814:	e1b5      	b.n	8002b82 <__aeabi_dsub+0x4fa>
 8002816:	2220      	movs	r2, #32
 8002818:	000e      	movs	r6, r1
 800281a:	4647      	mov	r7, r8
 800281c:	1ad2      	subs	r2, r2, r3
 800281e:	4096      	lsls	r6, r2
 8002820:	40df      	lsrs	r7, r3
 8002822:	433e      	orrs	r6, r7
 8002824:	4647      	mov	r7, r8
 8002826:	4097      	lsls	r7, r2
 8002828:	003a      	movs	r2, r7
 800282a:	40d9      	lsrs	r1, r3
 800282c:	1e57      	subs	r7, r2, #1
 800282e:	41ba      	sbcs	r2, r7
 8002830:	448c      	add	ip, r1
 8002832:	4316      	orrs	r6, r2
 8002834:	1836      	adds	r6, r6, r0
 8002836:	4286      	cmp	r6, r0
 8002838:	4180      	sbcs	r0, r0
 800283a:	4240      	negs	r0, r0
 800283c:	4460      	add	r0, ip
 800283e:	0007      	movs	r7, r0
 8002840:	023b      	lsls	r3, r7, #8
 8002842:	d400      	bmi.n	8002846 <__aeabi_dsub+0x1be>
 8002844:	e0b8      	b.n	80029b8 <__aeabi_dsub+0x330>
 8002846:	4b69      	ldr	r3, [pc, #420]	@ (80029ec <__aeabi_dsub+0x364>)
 8002848:	3501      	adds	r5, #1
 800284a:	429d      	cmp	r5, r3
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x1c8>
 800284e:	e0b8      	b.n	80029c2 <__aeabi_dsub+0x33a>
 8002850:	2101      	movs	r1, #1
 8002852:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <__aeabi_dsub+0x368>)
 8002854:	0872      	lsrs	r2, r6, #1
 8002856:	401f      	ands	r7, r3
 8002858:	4031      	ands	r1, r6
 800285a:	430a      	orrs	r2, r1
 800285c:	07fe      	lsls	r6, r7, #31
 800285e:	4316      	orrs	r6, r2
 8002860:	087f      	lsrs	r7, r7, #1
 8002862:	e794      	b.n	800278e <__aeabi_dsub+0x106>
 8002864:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <__aeabi_dsub+0x36c>)
 8002866:	18ea      	adds	r2, r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	430b      	orrs	r3, r1
 800286c:	d02c      	beq.n	80028c8 <__aeabi_dsub+0x240>
 800286e:	454c      	cmp	r4, r9
 8002870:	d030      	beq.n	80028d4 <__aeabi_dsub+0x24c>
 8002872:	2a00      	cmp	r2, #0
 8002874:	d05d      	beq.n	8002932 <__aeabi_dsub+0x2aa>
 8002876:	2d00      	cmp	r5, #0
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x1f4>
 800287a:	e0f8      	b.n	8002a6e <__aeabi_dsub+0x3e6>
 800287c:	4643      	mov	r3, r8
 800287e:	464c      	mov	r4, r9
 8002880:	468c      	mov	ip, r1
 8002882:	08d8      	lsrs	r0, r3, #3
 8002884:	4663      	mov	r3, ip
 8002886:	075a      	lsls	r2, r3, #29
 8002888:	4302      	orrs	r2, r0
 800288a:	08d9      	lsrs	r1, r3, #3
 800288c:	000b      	movs	r3, r1
 800288e:	4313      	orrs	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x20e>
 8002894:	e247      	b.n	8002d26 <__aeabi_dsub+0x69e>
 8002896:	2580      	movs	r5, #128	@ 0x80
 8002898:	032d      	lsls	r5, r5, #12
 800289a:	430d      	orrs	r5, r1
 800289c:	032d      	lsls	r5, r5, #12
 800289e:	4b53      	ldr	r3, [pc, #332]	@ (80029ec <__aeabi_dsub+0x364>)
 80028a0:	0b2d      	lsrs	r5, r5, #12
 80028a2:	e791      	b.n	80027c8 <__aeabi_dsub+0x140>
 80028a4:	4646      	mov	r6, r8
 80028a6:	430e      	orrs	r6, r1
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x224>
 80028aa:	e090      	b.n	80029ce <__aeabi_dsub+0x346>
 80028ac:	1e5e      	subs	r6, r3, #1
 80028ae:	46b1      	mov	r9, r6
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x22e>
 80028b4:	e15c      	b.n	8002b70 <__aeabi_dsub+0x4e8>
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d100      	bne.n	80028bc <__aeabi_dsub+0x234>
 80028ba:	e086      	b.n	80029ca <__aeabi_dsub+0x342>
 80028bc:	464b      	mov	r3, r9
 80028be:	2601      	movs	r6, #1
 80028c0:	2b38      	cmp	r3, #56	@ 0x38
 80028c2:	dd00      	ble.n	80028c6 <__aeabi_dsub+0x23e>
 80028c4:	e736      	b.n	8002734 <__aeabi_dsub+0xac>
 80028c6:	e721      	b.n	800270c <__aeabi_dsub+0x84>
 80028c8:	464e      	mov	r6, r9
 80028ca:	2301      	movs	r3, #1
 80028cc:	405e      	eors	r6, r3
 80028ce:	46b1      	mov	r9, r6
 80028d0:	454c      	cmp	r4, r9
 80028d2:	d1ce      	bne.n	8002872 <__aeabi_dsub+0x1ea>
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x252>
 80028d8:	e090      	b.n	80029fc <__aeabi_dsub+0x374>
 80028da:	2d00      	cmp	r5, #0
 80028dc:	d000      	beq.n	80028e0 <__aeabi_dsub+0x258>
 80028de:	e104      	b.n	8002aea <__aeabi_dsub+0x462>
 80028e0:	4653      	mov	r3, sl
 80028e2:	4662      	mov	r2, ip
 80028e4:	4302      	orrs	r2, r0
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x262>
 80028e8:	e1c8      	b.n	8002c7c <__aeabi_dsub+0x5f4>
 80028ea:	1e5a      	subs	r2, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d100      	bne.n	80028f2 <__aeabi_dsub+0x26a>
 80028f0:	e1ff      	b.n	8002cf2 <__aeabi_dsub+0x66a>
 80028f2:	4d3e      	ldr	r5, [pc, #248]	@ (80029ec <__aeabi_dsub+0x364>)
 80028f4:	42ab      	cmp	r3, r5
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x272>
 80028f8:	e0f7      	b.n	8002aea <__aeabi_dsub+0x462>
 80028fa:	2301      	movs	r3, #1
 80028fc:	2a38      	cmp	r2, #56	@ 0x38
 80028fe:	dc10      	bgt.n	8002922 <__aeabi_dsub+0x29a>
 8002900:	2a1f      	cmp	r2, #31
 8002902:	dd00      	ble.n	8002906 <__aeabi_dsub+0x27e>
 8002904:	e1dc      	b.n	8002cc0 <__aeabi_dsub+0x638>
 8002906:	2520      	movs	r5, #32
 8002908:	0006      	movs	r6, r0
 800290a:	1aad      	subs	r5, r5, r2
 800290c:	4663      	mov	r3, ip
 800290e:	40a8      	lsls	r0, r5
 8002910:	40ab      	lsls	r3, r5
 8002912:	40d6      	lsrs	r6, r2
 8002914:	1e45      	subs	r5, r0, #1
 8002916:	41a8      	sbcs	r0, r5
 8002918:	4333      	orrs	r3, r6
 800291a:	4303      	orrs	r3, r0
 800291c:	4660      	mov	r0, ip
 800291e:	40d0      	lsrs	r0, r2
 8002920:	1809      	adds	r1, r1, r0
 8002922:	4443      	add	r3, r8
 8002924:	4543      	cmp	r3, r8
 8002926:	4192      	sbcs	r2, r2
 8002928:	4252      	negs	r2, r2
 800292a:	001e      	movs	r6, r3
 800292c:	4655      	mov	r5, sl
 800292e:	1857      	adds	r7, r2, r1
 8002930:	e786      	b.n	8002840 <__aeabi_dsub+0x1b8>
 8002932:	4a31      	ldr	r2, [pc, #196]	@ (80029f8 <__aeabi_dsub+0x370>)
 8002934:	1c6b      	adds	r3, r5, #1
 8002936:	4213      	tst	r3, r2
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x2b4>
 800293a:	e082      	b.n	8002a42 <__aeabi_dsub+0x3ba>
 800293c:	4642      	mov	r2, r8
 800293e:	4663      	mov	r3, ip
 8002940:	430a      	orrs	r2, r1
 8002942:	4303      	orrs	r3, r0
 8002944:	2d00      	cmp	r5, #0
 8002946:	d000      	beq.n	800294a <__aeabi_dsub+0x2c2>
 8002948:	e0f5      	b.n	8002b36 <__aeabi_dsub+0x4ae>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x2c8>
 800294e:	e16a      	b.n	8002c26 <__aeabi_dsub+0x59e>
 8002950:	2a00      	cmp	r2, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x2ce>
 8002954:	e175      	b.n	8002c42 <__aeabi_dsub+0x5ba>
 8002956:	2300      	movs	r3, #0
 8002958:	08c7      	lsrs	r7, r0, #3
 800295a:	4662      	mov	r2, ip
 800295c:	4661      	mov	r1, ip
 800295e:	0752      	lsls	r2, r2, #29
 8002960:	433a      	orrs	r2, r7
 8002962:	08c9      	lsrs	r1, r1, #3
 8002964:	e03d      	b.n	80029e2 <__aeabi_dsub+0x35a>
 8002966:	4295      	cmp	r5, r2
 8002968:	d02f      	beq.n	80029ca <__aeabi_dsub+0x342>
 800296a:	2601      	movs	r6, #1
 800296c:	2b38      	cmp	r3, #56	@ 0x38
 800296e:	dd00      	ble.n	8002972 <__aeabi_dsub+0x2ea>
 8002970:	e760      	b.n	8002834 <__aeabi_dsub+0x1ac>
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	0412      	lsls	r2, r2, #16
 8002976:	4311      	orrs	r1, r2
 8002978:	e74a      	b.n	8002810 <__aeabi_dsub+0x188>
 800297a:	0030      	movs	r0, r6
 800297c:	f000 fa9a 	bl	8002eb4 <__clzsi2>
 8002980:	0003      	movs	r3, r0
 8002982:	3318      	adds	r3, #24
 8002984:	2b1f      	cmp	r3, #31
 8002986:	dc00      	bgt.n	800298a <__aeabi_dsub+0x302>
 8002988:	e6e7      	b.n	800275a <__aeabi_dsub+0xd2>
 800298a:	0032      	movs	r2, r6
 800298c:	3808      	subs	r0, #8
 800298e:	4082      	lsls	r2, r0
 8002990:	429d      	cmp	r5, r3
 8002992:	dd00      	ble.n	8002996 <__aeabi_dsub+0x30e>
 8002994:	e0a4      	b.n	8002ae0 <__aeabi_dsub+0x458>
 8002996:	1b5b      	subs	r3, r3, r5
 8002998:	1c58      	adds	r0, r3, #1
 800299a:	281f      	cmp	r0, #31
 800299c:	dc00      	bgt.n	80029a0 <__aeabi_dsub+0x318>
 800299e:	e1a4      	b.n	8002cea <__aeabi_dsub+0x662>
 80029a0:	0016      	movs	r6, r2
 80029a2:	3b1f      	subs	r3, #31
 80029a4:	40de      	lsrs	r6, r3
 80029a6:	2820      	cmp	r0, #32
 80029a8:	d005      	beq.n	80029b6 <__aeabi_dsub+0x32e>
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	1a1b      	subs	r3, r3, r0
 80029ae:	409a      	lsls	r2, r3
 80029b0:	1e53      	subs	r3, r2, #1
 80029b2:	419a      	sbcs	r2, r3
 80029b4:	4316      	orrs	r6, r2
 80029b6:	2500      	movs	r5, #0
 80029b8:	0773      	lsls	r3, r6, #29
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x336>
 80029bc:	e6e9      	b.n	8002792 <__aeabi_dsub+0x10a>
 80029be:	002b      	movs	r3, r5
 80029c0:	e0d3      	b.n	8002b6a <__aeabi_dsub+0x4e2>
 80029c2:	002b      	movs	r3, r5
 80029c4:	2500      	movs	r5, #0
 80029c6:	2200      	movs	r2, #0
 80029c8:	e6fe      	b.n	80027c8 <__aeabi_dsub+0x140>
 80029ca:	08c0      	lsrs	r0, r0, #3
 80029cc:	e75a      	b.n	8002884 <__aeabi_dsub+0x1fc>
 80029ce:	08c0      	lsrs	r0, r0, #3
 80029d0:	4662      	mov	r2, ip
 80029d2:	4661      	mov	r1, ip
 80029d4:	0752      	lsls	r2, r2, #29
 80029d6:	4302      	orrs	r2, r0
 80029d8:	4804      	ldr	r0, [pc, #16]	@ (80029ec <__aeabi_dsub+0x364>)
 80029da:	08c9      	lsrs	r1, r1, #3
 80029dc:	4283      	cmp	r3, r0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x35a>
 80029e0:	e754      	b.n	800288c <__aeabi_dsub+0x204>
 80029e2:	0309      	lsls	r1, r1, #12
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	0b0d      	lsrs	r5, r1, #12
 80029e8:	0d5b      	lsrs	r3, r3, #21
 80029ea:	e6ed      	b.n	80027c8 <__aeabi_dsub+0x140>
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff
 80029f4:	fffff801 	.word	0xfffff801
 80029f8:	000007fe 	.word	0x000007fe
 80029fc:	4acc      	ldr	r2, [pc, #816]	@ (8002d30 <__aeabi_dsub+0x6a8>)
 80029fe:	1c6b      	adds	r3, r5, #1
 8002a00:	4213      	tst	r3, r2
 8002a02:	d176      	bne.n	8002af2 <__aeabi_dsub+0x46a>
 8002a04:	4663      	mov	r3, ip
 8002a06:	4303      	orrs	r3, r0
 8002a08:	2d00      	cmp	r5, #0
 8002a0a:	d000      	beq.n	8002a0e <__aeabi_dsub+0x386>
 8002a0c:	e0dd      	b.n	8002bca <__aeabi_dsub+0x542>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x38c>
 8002a12:	e150      	b.n	8002cb6 <__aeabi_dsub+0x62e>
 8002a14:	4643      	mov	r3, r8
 8002a16:	08c7      	lsrs	r7, r0, #3
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	d09e      	beq.n	800295a <__aeabi_dsub+0x2d2>
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	18c3      	adds	r3, r0, r3
 8002a20:	4283      	cmp	r3, r0
 8002a22:	4180      	sbcs	r0, r0
 8002a24:	4461      	add	r1, ip
 8002a26:	4240      	negs	r0, r0
 8002a28:	180d      	adds	r5, r1, r0
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	022a      	lsls	r2, r5, #8
 8002a2e:	d400      	bmi.n	8002a32 <__aeabi_dsub+0x3aa>
 8002a30:	e173      	b.n	8002d1a <__aeabi_dsub+0x692>
 8002a32:	4ac0      	ldr	r2, [pc, #768]	@ (8002d34 <__aeabi_dsub+0x6ac>)
 8002a34:	4015      	ands	r5, r2
 8002a36:	076a      	lsls	r2, r5, #29
 8002a38:	026d      	lsls	r5, r5, #9
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	0b2d      	lsrs	r5, r5, #12
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e6c2      	b.n	80027c8 <__aeabi_dsub+0x140>
 8002a42:	4643      	mov	r3, r8
 8002a44:	1ac6      	subs	r6, r0, r3
 8002a46:	4663      	mov	r3, ip
 8002a48:	1a5f      	subs	r7, r3, r1
 8002a4a:	42b0      	cmp	r0, r6
 8002a4c:	419b      	sbcs	r3, r3
 8002a4e:	425b      	negs	r3, r3
 8002a50:	1aff      	subs	r7, r7, r3
 8002a52:	023b      	lsls	r3, r7, #8
 8002a54:	d45e      	bmi.n	8002b14 <__aeabi_dsub+0x48c>
 8002a56:	0032      	movs	r2, r6
 8002a58:	433a      	orrs	r2, r7
 8002a5a:	d000      	beq.n	8002a5e <__aeabi_dsub+0x3d6>
 8002a5c:	e675      	b.n	800274a <__aeabi_dsub+0xc2>
 8002a5e:	2400      	movs	r4, #0
 8002a60:	2300      	movs	r3, #0
 8002a62:	2500      	movs	r5, #0
 8002a64:	e6b0      	b.n	80027c8 <__aeabi_dsub+0x140>
 8002a66:	4fb3      	ldr	r7, [pc, #716]	@ (8002d34 <__aeabi_dsub+0x6ac>)
 8002a68:	1aed      	subs	r5, r5, r3
 8002a6a:	4017      	ands	r7, r2
 8002a6c:	e68f      	b.n	800278e <__aeabi_dsub+0x106>
 8002a6e:	4653      	mov	r3, sl
 8002a70:	4662      	mov	r2, ip
 8002a72:	4302      	orrs	r2, r0
 8002a74:	d05a      	beq.n	8002b2c <__aeabi_dsub+0x4a4>
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x3f6>
 8002a7c:	e0c8      	b.n	8002c10 <__aeabi_dsub+0x588>
 8002a7e:	4cae      	ldr	r4, [pc, #696]	@ (8002d38 <__aeabi_dsub+0x6b0>)
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d100      	bne.n	8002a86 <__aeabi_dsub+0x3fe>
 8002a84:	e6fa      	b.n	800287c <__aeabi_dsub+0x1f4>
 8002a86:	464c      	mov	r4, r9
 8002a88:	2601      	movs	r6, #1
 8002a8a:	2a38      	cmp	r2, #56	@ 0x38
 8002a8c:	dc10      	bgt.n	8002ab0 <__aeabi_dsub+0x428>
 8002a8e:	2a1f      	cmp	r2, #31
 8002a90:	dd00      	ble.n	8002a94 <__aeabi_dsub+0x40c>
 8002a92:	e089      	b.n	8002ba8 <__aeabi_dsub+0x520>
 8002a94:	2320      	movs	r3, #32
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	0005      	movs	r5, r0
 8002a9a:	4666      	mov	r6, ip
 8002a9c:	4098      	lsls	r0, r3
 8002a9e:	409e      	lsls	r6, r3
 8002aa0:	1e43      	subs	r3, r0, #1
 8002aa2:	4198      	sbcs	r0, r3
 8002aa4:	4663      	mov	r3, ip
 8002aa6:	40d5      	lsrs	r5, r2
 8002aa8:	40d3      	lsrs	r3, r2
 8002aaa:	432e      	orrs	r6, r5
 8002aac:	4306      	orrs	r6, r0
 8002aae:	1ac9      	subs	r1, r1, r3
 8002ab0:	4643      	mov	r3, r8
 8002ab2:	1b9e      	subs	r6, r3, r6
 8002ab4:	45b0      	cmp	r8, r6
 8002ab6:	4192      	sbcs	r2, r2
 8002ab8:	4252      	negs	r2, r2
 8002aba:	4655      	mov	r5, sl
 8002abc:	1a8f      	subs	r7, r1, r2
 8002abe:	e63f      	b.n	8002740 <__aeabi_dsub+0xb8>
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	000e      	movs	r6, r1
 8002ac4:	3a20      	subs	r2, #32
 8002ac6:	40d6      	lsrs	r6, r2
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d005      	beq.n	8002ad8 <__aeabi_dsub+0x450>
 8002acc:	2240      	movs	r2, #64	@ 0x40
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	4099      	lsls	r1, r3
 8002ad2:	4643      	mov	r3, r8
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	001f      	movs	r7, r3
 8002ad8:	1e7b      	subs	r3, r7, #1
 8002ada:	419f      	sbcs	r7, r3
 8002adc:	433e      	orrs	r6, r7
 8002ade:	e629      	b.n	8002734 <__aeabi_dsub+0xac>
 8002ae0:	4994      	ldr	r1, [pc, #592]	@ (8002d34 <__aeabi_dsub+0x6ac>)
 8002ae2:	1aeb      	subs	r3, r5, r3
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	4694      	mov	ip, r2
 8002ae8:	e737      	b.n	800295a <__aeabi_dsub+0x2d2>
 8002aea:	4643      	mov	r3, r8
 8002aec:	468c      	mov	ip, r1
 8002aee:	08d8      	lsrs	r0, r3, #3
 8002af0:	e6c8      	b.n	8002884 <__aeabi_dsub+0x1fc>
 8002af2:	4a91      	ldr	r2, [pc, #580]	@ (8002d38 <__aeabi_dsub+0x6b0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <__aeabi_dsub+0x472>
 8002af8:	e764      	b.n	80029c4 <__aeabi_dsub+0x33c>
 8002afa:	4642      	mov	r2, r8
 8002afc:	1882      	adds	r2, r0, r2
 8002afe:	4282      	cmp	r2, r0
 8002b00:	4180      	sbcs	r0, r0
 8002b02:	4461      	add	r1, ip
 8002b04:	4240      	negs	r0, r0
 8002b06:	1809      	adds	r1, r1, r0
 8002b08:	07ce      	lsls	r6, r1, #31
 8002b0a:	0852      	lsrs	r2, r2, #1
 8002b0c:	001d      	movs	r5, r3
 8002b0e:	4316      	orrs	r6, r2
 8002b10:	084f      	lsrs	r7, r1, #1
 8002b12:	e63c      	b.n	800278e <__aeabi_dsub+0x106>
 8002b14:	4643      	mov	r3, r8
 8002b16:	1a1e      	subs	r6, r3, r0
 8002b18:	4663      	mov	r3, ip
 8002b1a:	45b0      	cmp	r8, r6
 8002b1c:	4192      	sbcs	r2, r2
 8002b1e:	1ac9      	subs	r1, r1, r3
 8002b20:	2401      	movs	r4, #1
 8002b22:	464b      	mov	r3, r9
 8002b24:	4252      	negs	r2, r2
 8002b26:	1a8f      	subs	r7, r1, r2
 8002b28:	401c      	ands	r4, r3
 8002b2a:	e60e      	b.n	800274a <__aeabi_dsub+0xc2>
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464c      	mov	r4, r9
 8002b30:	468c      	mov	ip, r1
 8002b32:	08d0      	lsrs	r0, r2, #3
 8002b34:	e74c      	b.n	80029d0 <__aeabi_dsub+0x348>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d000      	beq.n	8002b3c <__aeabi_dsub+0x4b4>
 8002b3a:	e0a3      	b.n	8002c84 <__aeabi_dsub+0x5fc>
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x4ba>
 8002b40:	e0e7      	b.n	8002d12 <__aeabi_dsub+0x68a>
 8002b42:	4643      	mov	r3, r8
 8002b44:	074a      	lsls	r2, r1, #29
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	0013      	movs	r3, r2
 8002b4c:	2401      	movs	r4, #1
 8002b4e:	4648      	mov	r0, r9
 8002b50:	08c9      	lsrs	r1, r1, #3
 8002b52:	430b      	orrs	r3, r1
 8002b54:	4004      	ands	r4, r0
 8002b56:	e69b      	b.n	8002890 <__aeabi_dsub+0x208>
 8002b58:	19c6      	adds	r6, r0, r7
 8002b5a:	4286      	cmp	r6, r0
 8002b5c:	4180      	sbcs	r0, r0
 8002b5e:	4461      	add	r1, ip
 8002b60:	4240      	negs	r0, r0
 8002b62:	180f      	adds	r7, r1, r0
 8002b64:	023b      	lsls	r3, r7, #8
 8002b66:	d451      	bmi.n	8002c0c <__aeabi_dsub+0x584>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	46bc      	mov	ip, r7
 8002b6c:	08f0      	lsrs	r0, r6, #3
 8002b6e:	e72f      	b.n	80029d0 <__aeabi_dsub+0x348>
 8002b70:	1bc6      	subs	r6, r0, r7
 8002b72:	4663      	mov	r3, ip
 8002b74:	42b0      	cmp	r0, r6
 8002b76:	4180      	sbcs	r0, r0
 8002b78:	1a59      	subs	r1, r3, r1
 8002b7a:	4240      	negs	r0, r0
 8002b7c:	2501      	movs	r5, #1
 8002b7e:	1a0f      	subs	r7, r1, r0
 8002b80:	e5de      	b.n	8002740 <__aeabi_dsub+0xb8>
 8002b82:	001a      	movs	r2, r3
 8002b84:	000e      	movs	r6, r1
 8002b86:	3a20      	subs	r2, #32
 8002b88:	40d6      	lsrs	r6, r2
 8002b8a:	46b1      	mov	r9, r6
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d005      	beq.n	8002b9c <__aeabi_dsub+0x514>
 8002b90:	2240      	movs	r2, #64	@ 0x40
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4099      	lsls	r1, r3
 8002b96:	4643      	mov	r3, r8
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	001f      	movs	r7, r3
 8002b9c:	003e      	movs	r6, r7
 8002b9e:	1e73      	subs	r3, r6, #1
 8002ba0:	419e      	sbcs	r6, r3
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	431e      	orrs	r6, r3
 8002ba6:	e645      	b.n	8002834 <__aeabi_dsub+0x1ac>
 8002ba8:	0013      	movs	r3, r2
 8002baa:	4665      	mov	r5, ip
 8002bac:	3b20      	subs	r3, #32
 8002bae:	40dd      	lsrs	r5, r3
 8002bb0:	2a20      	cmp	r2, #32
 8002bb2:	d005      	beq.n	8002bc0 <__aeabi_dsub+0x538>
 8002bb4:	2340      	movs	r3, #64	@ 0x40
 8002bb6:	4666      	mov	r6, ip
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	409e      	lsls	r6, r3
 8002bbc:	4306      	orrs	r6, r0
 8002bbe:	46b3      	mov	fp, r6
 8002bc0:	465e      	mov	r6, fp
 8002bc2:	1e73      	subs	r3, r6, #1
 8002bc4:	419e      	sbcs	r6, r3
 8002bc6:	432e      	orrs	r6, r5
 8002bc8:	e772      	b.n	8002ab0 <__aeabi_dsub+0x428>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d08d      	beq.n	8002aea <__aeabi_dsub+0x462>
 8002bce:	4643      	mov	r3, r8
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	d100      	bne.n	8002bd6 <__aeabi_dsub+0x54e>
 8002bd4:	e6f9      	b.n	80029ca <__aeabi_dsub+0x342>
 8002bd6:	4662      	mov	r2, ip
 8002bd8:	08c0      	lsrs	r0, r0, #3
 8002bda:	0752      	lsls	r2, r2, #29
 8002bdc:	4663      	mov	r3, ip
 8002bde:	4310      	orrs	r0, r2
 8002be0:	2280      	movs	r2, #128	@ 0x80
 8002be2:	08db      	lsrs	r3, r3, #3
 8002be4:	0312      	lsls	r2, r2, #12
 8002be6:	4213      	tst	r3, r2
 8002be8:	d007      	beq.n	8002bfa <__aeabi_dsub+0x572>
 8002bea:	08cd      	lsrs	r5, r1, #3
 8002bec:	4215      	tst	r5, r2
 8002bee:	d104      	bne.n	8002bfa <__aeabi_dsub+0x572>
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	08d8      	lsrs	r0, r3, #3
 8002bf4:	002b      	movs	r3, r5
 8002bf6:	0749      	lsls	r1, r1, #29
 8002bf8:	4308      	orrs	r0, r1
 8002bfa:	0f42      	lsrs	r2, r0, #29
 8002bfc:	00c0      	lsls	r0, r0, #3
 8002bfe:	0752      	lsls	r2, r2, #29
 8002c00:	08c0      	lsrs	r0, r0, #3
 8002c02:	4302      	orrs	r2, r0
 8002c04:	0019      	movs	r1, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	e641      	b.n	8002890 <__aeabi_dsub+0x208>
 8002c0c:	2502      	movs	r5, #2
 8002c0e:	e61f      	b.n	8002850 <__aeabi_dsub+0x1c8>
 8002c10:	4643      	mov	r3, r8
 8002c12:	1a1e      	subs	r6, r3, r0
 8002c14:	45b0      	cmp	r8, r6
 8002c16:	4192      	sbcs	r2, r2
 8002c18:	4663      	mov	r3, ip
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	1ac9      	subs	r1, r1, r3
 8002c1e:	464c      	mov	r4, r9
 8002c20:	2501      	movs	r5, #1
 8002c22:	1a8f      	subs	r7, r1, r2
 8002c24:	e58c      	b.n	8002740 <__aeabi_dsub+0xb8>
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d100      	bne.n	8002c2c <__aeabi_dsub+0x5a4>
 8002c2a:	e718      	b.n	8002a5e <__aeabi_dsub+0x3d6>
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	074a      	lsls	r2, r1, #29
 8002c30:	08db      	lsrs	r3, r3, #3
 8002c32:	2401      	movs	r4, #1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	464b      	mov	r3, r9
 8002c38:	0249      	lsls	r1, r1, #9
 8002c3a:	401c      	ands	r4, r3
 8002c3c:	0b0d      	lsrs	r5, r1, #12
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e5c2      	b.n	80027c8 <__aeabi_dsub+0x140>
 8002c42:	4643      	mov	r3, r8
 8002c44:	1ac7      	subs	r7, r0, r3
 8002c46:	4663      	mov	r3, ip
 8002c48:	1a5d      	subs	r5, r3, r1
 8002c4a:	42b8      	cmp	r0, r7
 8002c4c:	419b      	sbcs	r3, r3
 8002c4e:	425b      	negs	r3, r3
 8002c50:	1aed      	subs	r5, r5, r3
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	421d      	tst	r5, r3
 8002c58:	d053      	beq.n	8002d02 <__aeabi_dsub+0x67a>
 8002c5a:	4642      	mov	r2, r8
 8002c5c:	1a16      	subs	r6, r2, r0
 8002c5e:	4662      	mov	r2, ip
 8002c60:	1a8d      	subs	r5, r1, r2
 8002c62:	45b0      	cmp	r8, r6
 8002c64:	4192      	sbcs	r2, r2
 8002c66:	4252      	negs	r2, r2
 8002c68:	2401      	movs	r4, #1
 8002c6a:	1aad      	subs	r5, r5, r2
 8002c6c:	464a      	mov	r2, r9
 8002c6e:	4014      	ands	r4, r2
 8002c70:	421d      	tst	r5, r3
 8002c72:	d078      	beq.n	8002d66 <__aeabi_dsub+0x6de>
 8002c74:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <__aeabi_dsub+0x6ac>)
 8002c76:	401d      	ands	r5, r3
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e5a0      	b.n	80027be <__aeabi_dsub+0x136>
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	468c      	mov	ip, r1
 8002c80:	08d0      	lsrs	r0, r2, #3
 8002c82:	e6a5      	b.n	80029d0 <__aeabi_dsub+0x348>
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d100      	bne.n	8002c8a <__aeabi_dsub+0x602>
 8002c88:	e69f      	b.n	80029ca <__aeabi_dsub+0x342>
 8002c8a:	4662      	mov	r2, ip
 8002c8c:	08c0      	lsrs	r0, r0, #3
 8002c8e:	0752      	lsls	r2, r2, #29
 8002c90:	4663      	mov	r3, ip
 8002c92:	4310      	orrs	r0, r2
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	0312      	lsls	r2, r2, #12
 8002c9a:	4213      	tst	r3, r2
 8002c9c:	d0ad      	beq.n	8002bfa <__aeabi_dsub+0x572>
 8002c9e:	08cd      	lsrs	r5, r1, #3
 8002ca0:	4215      	tst	r5, r2
 8002ca2:	d1aa      	bne.n	8002bfa <__aeabi_dsub+0x572>
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	08d8      	lsrs	r0, r3, #3
 8002caa:	464b      	mov	r3, r9
 8002cac:	0749      	lsls	r1, r1, #29
 8002cae:	401c      	ands	r4, r3
 8002cb0:	4308      	orrs	r0, r1
 8002cb2:	002b      	movs	r3, r5
 8002cb4:	e7a1      	b.n	8002bfa <__aeabi_dsub+0x572>
 8002cb6:	4643      	mov	r3, r8
 8002cb8:	468c      	mov	ip, r1
 8002cba:	08df      	lsrs	r7, r3, #3
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e64c      	b.n	800295a <__aeabi_dsub+0x2d2>
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	4665      	mov	r5, ip
 8002cc4:	3b20      	subs	r3, #32
 8002cc6:	40dd      	lsrs	r5, r3
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d005      	beq.n	8002cd8 <__aeabi_dsub+0x650>
 8002ccc:	2340      	movs	r3, #64	@ 0x40
 8002cce:	4666      	mov	r6, ip
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	409e      	lsls	r6, r3
 8002cd4:	4306      	orrs	r6, r0
 8002cd6:	46b3      	mov	fp, r6
 8002cd8:	465b      	mov	r3, fp
 8002cda:	1e5a      	subs	r2, r3, #1
 8002cdc:	4193      	sbcs	r3, r2
 8002cde:	432b      	orrs	r3, r5
 8002ce0:	e61f      	b.n	8002922 <__aeabi_dsub+0x29a>
 8002ce2:	002b      	movs	r3, r5
 8002ce4:	46bc      	mov	ip, r7
 8002ce6:	08f0      	lsrs	r0, r6, #3
 8002ce8:	e672      	b.n	80029d0 <__aeabi_dsub+0x348>
 8002cea:	2120      	movs	r1, #32
 8002cec:	2600      	movs	r6, #0
 8002cee:	1a09      	subs	r1, r1, r0
 8002cf0:	e546      	b.n	8002780 <__aeabi_dsub+0xf8>
 8002cf2:	4440      	add	r0, r8
 8002cf4:	4540      	cmp	r0, r8
 8002cf6:	4192      	sbcs	r2, r2
 8002cf8:	4461      	add	r1, ip
 8002cfa:	4252      	negs	r2, r2
 8002cfc:	0006      	movs	r6, r0
 8002cfe:	188f      	adds	r7, r1, r2
 8002d00:	e730      	b.n	8002b64 <__aeabi_dsub+0x4dc>
 8002d02:	003a      	movs	r2, r7
 8002d04:	432a      	orrs	r2, r5
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x682>
 8002d08:	e6a9      	b.n	8002a5e <__aeabi_dsub+0x3d6>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	46ac      	mov	ip, r5
 8002d0e:	08ff      	lsrs	r7, r7, #3
 8002d10:	e623      	b.n	800295a <__aeabi_dsub+0x2d2>
 8002d12:	2180      	movs	r1, #128	@ 0x80
 8002d14:	2400      	movs	r4, #0
 8002d16:	0309      	lsls	r1, r1, #12
 8002d18:	e5bd      	b.n	8002896 <__aeabi_dsub+0x20e>
 8002d1a:	076a      	lsls	r2, r5, #29
 8002d1c:	026d      	lsls	r5, r5, #9
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	0b2d      	lsrs	r5, r5, #12
 8002d22:	2300      	movs	r3, #0
 8002d24:	e550      	b.n	80027c8 <__aeabi_dsub+0x140>
 8002d26:	2200      	movs	r2, #0
 8002d28:	2500      	movs	r5, #0
 8002d2a:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <__aeabi_dsub+0x6b0>)
 8002d2c:	e54c      	b.n	80027c8 <__aeabi_dsub+0x140>
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	000007fe 	.word	0x000007fe
 8002d34:	ff7fffff 	.word	0xff7fffff
 8002d38:	000007ff 	.word	0x000007ff
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <__aeabi_dsub+0x6ba>
 8002d40:	e5f7      	b.n	8002932 <__aeabi_dsub+0x2aa>
 8002d42:	4653      	mov	r3, sl
 8002d44:	1b5a      	subs	r2, r3, r5
 8002d46:	0013      	movs	r3, r2
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x6c6>
 8002d4c:	e690      	b.n	8002a70 <__aeabi_dsub+0x3e8>
 8002d4e:	2a38      	cmp	r2, #56	@ 0x38
 8002d50:	dc06      	bgt.n	8002d60 <__aeabi_dsub+0x6d8>
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	4664      	mov	r4, ip
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	431c      	orrs	r4, r3
 8002d5a:	46a4      	mov	ip, r4
 8002d5c:	0034      	movs	r4, r6
 8002d5e:	e696      	b.n	8002a8e <__aeabi_dsub+0x406>
 8002d60:	0034      	movs	r4, r6
 8002d62:	2601      	movs	r6, #1
 8002d64:	e6a4      	b.n	8002ab0 <__aeabi_dsub+0x428>
 8002d66:	076a      	lsls	r2, r5, #29
 8002d68:	08f6      	lsrs	r6, r6, #3
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	4332      	orrs	r2, r6
 8002d6e:	08e9      	lsrs	r1, r5, #3
 8002d70:	e637      	b.n	80029e2 <__aeabi_dsub+0x35a>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <__aeabi_dsub+0x6f0>
 8002d76:	e641      	b.n	80029fc <__aeabi_dsub+0x374>
 8002d78:	4653      	mov	r3, sl
 8002d7a:	1b5a      	subs	r2, r3, r5
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	d101      	bne.n	8002d84 <__aeabi_dsub+0x6fc>
 8002d80:	0013      	movs	r3, r2
 8002d82:	e5ae      	b.n	80028e2 <__aeabi_dsub+0x25a>
 8002d84:	2301      	movs	r3, #1
 8002d86:	2a38      	cmp	r2, #56	@ 0x38
 8002d88:	dd00      	ble.n	8002d8c <__aeabi_dsub+0x704>
 8002d8a:	e5ca      	b.n	8002922 <__aeabi_dsub+0x29a>
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	4665      	mov	r5, ip
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431d      	orrs	r5, r3
 8002d94:	46ac      	mov	ip, r5
 8002d96:	e5b3      	b.n	8002900 <__aeabi_dsub+0x278>

08002d98 <__aeabi_d2iz>:
 8002d98:	000b      	movs	r3, r1
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d16      	ldr	r5, [pc, #88]	@ (8002df8 <__aeabi_d2iz+0x60>)
 8002da0:	030c      	lsls	r4, r1, #12
 8002da2:	b082      	sub	sp, #8
 8002da4:	0049      	lsls	r1, r1, #1
 8002da6:	2000      	movs	r0, #0
 8002da8:	9200      	str	r2, [sp, #0]
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	0b24      	lsrs	r4, r4, #12
 8002dae:	0d49      	lsrs	r1, r1, #21
 8002db0:	0fde      	lsrs	r6, r3, #31
 8002db2:	42a9      	cmp	r1, r5
 8002db4:	dd04      	ble.n	8002dc0 <__aeabi_d2iz+0x28>
 8002db6:	4811      	ldr	r0, [pc, #68]	@ (8002dfc <__aeabi_d2iz+0x64>)
 8002db8:	4281      	cmp	r1, r0
 8002dba:	dd03      	ble.n	8002dc4 <__aeabi_d2iz+0x2c>
 8002dbc:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <__aeabi_d2iz+0x68>)
 8002dbe:	18f0      	adds	r0, r6, r3
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	2080      	movs	r0, #128	@ 0x80
 8002dc6:	0340      	lsls	r0, r0, #13
 8002dc8:	4320      	orrs	r0, r4
 8002dca:	4c0e      	ldr	r4, [pc, #56]	@ (8002e04 <__aeabi_d2iz+0x6c>)
 8002dcc:	1a64      	subs	r4, r4, r1
 8002dce:	2c1f      	cmp	r4, #31
 8002dd0:	dd08      	ble.n	8002de4 <__aeabi_d2iz+0x4c>
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <__aeabi_d2iz+0x70>)
 8002dd4:	1a5b      	subs	r3, r3, r1
 8002dd6:	40d8      	lsrs	r0, r3
 8002dd8:	0003      	movs	r3, r0
 8002dda:	4258      	negs	r0, r3
 8002ddc:	2e00      	cmp	r6, #0
 8002dde:	d1ef      	bne.n	8002dc0 <__aeabi_d2iz+0x28>
 8002de0:	0018      	movs	r0, r3
 8002de2:	e7ed      	b.n	8002dc0 <__aeabi_d2iz+0x28>
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <__aeabi_d2iz+0x74>)
 8002de6:	9a00      	ldr	r2, [sp, #0]
 8002de8:	469c      	mov	ip, r3
 8002dea:	0003      	movs	r3, r0
 8002dec:	4461      	add	r1, ip
 8002dee:	408b      	lsls	r3, r1
 8002df0:	40e2      	lsrs	r2, r4
 8002df2:	4313      	orrs	r3, r2
 8002df4:	e7f1      	b.n	8002dda <__aeabi_d2iz+0x42>
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	000003fe 	.word	0x000003fe
 8002dfc:	0000041d 	.word	0x0000041d
 8002e00:	7fffffff 	.word	0x7fffffff
 8002e04:	00000433 	.word	0x00000433
 8002e08:	00000413 	.word	0x00000413
 8002e0c:	fffffbed 	.word	0xfffffbed

08002e10 <__aeabi_i2d>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d016      	beq.n	8002e44 <__aeabi_i2d+0x34>
 8002e16:	17c3      	asrs	r3, r0, #31
 8002e18:	18c5      	adds	r5, r0, r3
 8002e1a:	405d      	eors	r5, r3
 8002e1c:	0fc4      	lsrs	r4, r0, #31
 8002e1e:	0028      	movs	r0, r5
 8002e20:	f000 f848 	bl	8002eb4 <__clzsi2>
 8002e24:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <__aeabi_i2d+0x58>)
 8002e26:	1a1b      	subs	r3, r3, r0
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	0d5b      	lsrs	r3, r3, #21
 8002e2c:	280a      	cmp	r0, #10
 8002e2e:	dc14      	bgt.n	8002e5a <__aeabi_i2d+0x4a>
 8002e30:	0002      	movs	r2, r0
 8002e32:	002e      	movs	r6, r5
 8002e34:	3215      	adds	r2, #21
 8002e36:	4096      	lsls	r6, r2
 8002e38:	220b      	movs	r2, #11
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	40d5      	lsrs	r5, r2
 8002e3e:	032d      	lsls	r5, r5, #12
 8002e40:	0b2d      	lsrs	r5, r5, #12
 8002e42:	e003      	b.n	8002e4c <__aeabi_i2d+0x3c>
 8002e44:	2400      	movs	r4, #0
 8002e46:	2300      	movs	r3, #0
 8002e48:	2500      	movs	r5, #0
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	051b      	lsls	r3, r3, #20
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	07e4      	lsls	r4, r4, #31
 8002e52:	4323      	orrs	r3, r4
 8002e54:	0030      	movs	r0, r6
 8002e56:	0019      	movs	r1, r3
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	380b      	subs	r0, #11
 8002e5c:	4085      	lsls	r5, r0
 8002e5e:	032d      	lsls	r5, r5, #12
 8002e60:	2600      	movs	r6, #0
 8002e62:	0b2d      	lsrs	r5, r5, #12
 8002e64:	e7f2      	b.n	8002e4c <__aeabi_i2d+0x3c>
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	0000041e 	.word	0x0000041e

08002e6c <__aeabi_ui2d>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	1e04      	subs	r4, r0, #0
 8002e70:	d010      	beq.n	8002e94 <__aeabi_ui2d+0x28>
 8002e72:	f000 f81f 	bl	8002eb4 <__clzsi2>
 8002e76:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <__aeabi_ui2d+0x44>)
 8002e78:	1a1b      	subs	r3, r3, r0
 8002e7a:	055b      	lsls	r3, r3, #21
 8002e7c:	0d5b      	lsrs	r3, r3, #21
 8002e7e:	280a      	cmp	r0, #10
 8002e80:	dc0f      	bgt.n	8002ea2 <__aeabi_ui2d+0x36>
 8002e82:	220b      	movs	r2, #11
 8002e84:	0021      	movs	r1, r4
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	40d1      	lsrs	r1, r2
 8002e8a:	3015      	adds	r0, #21
 8002e8c:	030a      	lsls	r2, r1, #12
 8002e8e:	4084      	lsls	r4, r0
 8002e90:	0b12      	lsrs	r2, r2, #12
 8002e92:	e001      	b.n	8002e98 <__aeabi_ui2d+0x2c>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2200      	movs	r2, #0
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	0020      	movs	r0, r4
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	bd10      	pop	{r4, pc}
 8002ea2:	0022      	movs	r2, r4
 8002ea4:	380b      	subs	r0, #11
 8002ea6:	4082      	lsls	r2, r0
 8002ea8:	0312      	lsls	r2, r2, #12
 8002eaa:	2400      	movs	r4, #0
 8002eac:	0b12      	lsrs	r2, r2, #12
 8002eae:	e7f3      	b.n	8002e98 <__aeabi_ui2d+0x2c>
 8002eb0:	0000041e 	.word	0x0000041e

08002eb4 <__clzsi2>:
 8002eb4:	211c      	movs	r1, #28
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	4298      	cmp	r0, r3
 8002ebc:	d301      	bcc.n	8002ec2 <__clzsi2+0xe>
 8002ebe:	0c00      	lsrs	r0, r0, #16
 8002ec0:	3910      	subs	r1, #16
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	d301      	bcc.n	8002ecc <__clzsi2+0x18>
 8002ec8:	0a00      	lsrs	r0, r0, #8
 8002eca:	3908      	subs	r1, #8
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	4298      	cmp	r0, r3
 8002ed0:	d301      	bcc.n	8002ed6 <__clzsi2+0x22>
 8002ed2:	0900      	lsrs	r0, r0, #4
 8002ed4:	3904      	subs	r1, #4
 8002ed6:	a202      	add	r2, pc, #8	@ (adr r2, 8002ee0 <__clzsi2+0x2c>)
 8002ed8:	5c10      	ldrb	r0, [r2, r0]
 8002eda:	1840      	adds	r0, r0, r1
 8002edc:	4770      	bx	lr
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	02020304 	.word	0x02020304
 8002ee4:	01010101 	.word	0x01010101
	...

08002ef0 <memset>:
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	0005      	movs	r5, r0
 8002ef4:	0783      	lsls	r3, r0, #30
 8002ef6:	d049      	beq.n	8002f8c <memset+0x9c>
 8002ef8:	1e54      	subs	r4, r2, #1
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	d045      	beq.n	8002f8a <memset+0x9a>
 8002efe:	0003      	movs	r3, r0
 8002f00:	2603      	movs	r6, #3
 8002f02:	b2ca      	uxtb	r2, r1
 8002f04:	e002      	b.n	8002f0c <memset+0x1c>
 8002f06:	3501      	adds	r5, #1
 8002f08:	3c01      	subs	r4, #1
 8002f0a:	d33e      	bcc.n	8002f8a <memset+0x9a>
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	702a      	strb	r2, [r5, #0]
 8002f10:	4233      	tst	r3, r6
 8002f12:	d1f8      	bne.n	8002f06 <memset+0x16>
 8002f14:	2c03      	cmp	r4, #3
 8002f16:	d930      	bls.n	8002f7a <memset+0x8a>
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	0215      	lsls	r5, r2, #8
 8002f1e:	18ad      	adds	r5, r5, r2
 8002f20:	042a      	lsls	r2, r5, #16
 8002f22:	18ad      	adds	r5, r5, r2
 8002f24:	2c0f      	cmp	r4, #15
 8002f26:	d934      	bls.n	8002f92 <memset+0xa2>
 8002f28:	0027      	movs	r7, r4
 8002f2a:	3f10      	subs	r7, #16
 8002f2c:	093f      	lsrs	r7, r7, #4
 8002f2e:	013e      	lsls	r6, r7, #4
 8002f30:	46b4      	mov	ip, r6
 8002f32:	001e      	movs	r6, r3
 8002f34:	001a      	movs	r2, r3
 8002f36:	3610      	adds	r6, #16
 8002f38:	4466      	add	r6, ip
 8002f3a:	6015      	str	r5, [r2, #0]
 8002f3c:	6055      	str	r5, [r2, #4]
 8002f3e:	6095      	str	r5, [r2, #8]
 8002f40:	60d5      	str	r5, [r2, #12]
 8002f42:	3210      	adds	r2, #16
 8002f44:	4296      	cmp	r6, r2
 8002f46:	d1f8      	bne.n	8002f3a <memset+0x4a>
 8002f48:	3701      	adds	r7, #1
 8002f4a:	013f      	lsls	r7, r7, #4
 8002f4c:	19db      	adds	r3, r3, r7
 8002f4e:	270f      	movs	r7, #15
 8002f50:	220c      	movs	r2, #12
 8002f52:	4027      	ands	r7, r4
 8002f54:	4022      	ands	r2, r4
 8002f56:	003c      	movs	r4, r7
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d00e      	beq.n	8002f7a <memset+0x8a>
 8002f5c:	1f3e      	subs	r6, r7, #4
 8002f5e:	08b6      	lsrs	r6, r6, #2
 8002f60:	00b4      	lsls	r4, r6, #2
 8002f62:	46a4      	mov	ip, r4
 8002f64:	001a      	movs	r2, r3
 8002f66:	1d1c      	adds	r4, r3, #4
 8002f68:	4464      	add	r4, ip
 8002f6a:	c220      	stmia	r2!, {r5}
 8002f6c:	42a2      	cmp	r2, r4
 8002f6e:	d1fc      	bne.n	8002f6a <memset+0x7a>
 8002f70:	2403      	movs	r4, #3
 8002f72:	3601      	adds	r6, #1
 8002f74:	00b6      	lsls	r6, r6, #2
 8002f76:	199b      	adds	r3, r3, r6
 8002f78:	403c      	ands	r4, r7
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d005      	beq.n	8002f8a <memset+0x9a>
 8002f7e:	b2c9      	uxtb	r1, r1
 8002f80:	191c      	adds	r4, r3, r4
 8002f82:	7019      	strb	r1, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d1fb      	bne.n	8002f82 <memset+0x92>
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	0014      	movs	r4, r2
 8002f90:	e7c0      	b.n	8002f14 <memset+0x24>
 8002f92:	0027      	movs	r7, r4
 8002f94:	e7e2      	b.n	8002f5c <memset+0x6c>
 8002f96:	46c0      	nop			@ (mov r8, r8)

08002f98 <memcpy>:
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	0005      	movs	r5, r0
 8002f9c:	2a0f      	cmp	r2, #15
 8002f9e:	d931      	bls.n	8003004 <memcpy+0x6c>
 8002fa0:	2703      	movs	r7, #3
 8002fa2:	003e      	movs	r6, r7
 8002fa4:	430d      	orrs	r5, r1
 8002fa6:	000c      	movs	r4, r1
 8002fa8:	0003      	movs	r3, r0
 8002faa:	402e      	ands	r6, r5
 8002fac:	422f      	tst	r7, r5
 8002fae:	d134      	bne.n	800301a <memcpy+0x82>
 8002fb0:	0015      	movs	r5, r2
 8002fb2:	3d10      	subs	r5, #16
 8002fb4:	092d      	lsrs	r5, r5, #4
 8002fb6:	46ac      	mov	ip, r5
 8002fb8:	012f      	lsls	r7, r5, #4
 8002fba:	183f      	adds	r7, r7, r0
 8002fbc:	6865      	ldr	r5, [r4, #4]
 8002fbe:	605d      	str	r5, [r3, #4]
 8002fc0:	68a5      	ldr	r5, [r4, #8]
 8002fc2:	609d      	str	r5, [r3, #8]
 8002fc4:	68e5      	ldr	r5, [r4, #12]
 8002fc6:	60dd      	str	r5, [r3, #12]
 8002fc8:	6825      	ldr	r5, [r4, #0]
 8002fca:	3410      	adds	r4, #16
 8002fcc:	601d      	str	r5, [r3, #0]
 8002fce:	001d      	movs	r5, r3
 8002fd0:	3310      	adds	r3, #16
 8002fd2:	42bd      	cmp	r5, r7
 8002fd4:	d1f2      	bne.n	8002fbc <memcpy+0x24>
 8002fd6:	4665      	mov	r5, ip
 8002fd8:	230f      	movs	r3, #15
 8002fda:	240c      	movs	r4, #12
 8002fdc:	3501      	adds	r5, #1
 8002fde:	012d      	lsls	r5, r5, #4
 8002fe0:	1949      	adds	r1, r1, r5
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	1945      	adds	r5, r0, r5
 8002fe6:	4214      	tst	r4, r2
 8002fe8:	d01a      	beq.n	8003020 <memcpy+0x88>
 8002fea:	3b04      	subs	r3, #4
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	598c      	ldr	r4, [r1, r6]
 8002ff4:	51ac      	str	r4, [r5, r6]
 8002ff6:	3604      	adds	r6, #4
 8002ff8:	429e      	cmp	r6, r3
 8002ffa:	d1fa      	bne.n	8002ff2 <memcpy+0x5a>
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	19ad      	adds	r5, r5, r6
 8003000:	1989      	adds	r1, r1, r6
 8003002:	401a      	ands	r2, r3
 8003004:	1e56      	subs	r6, r2, #1
 8003006:	2a00      	cmp	r2, #0
 8003008:	d006      	beq.n	8003018 <memcpy+0x80>
 800300a:	2300      	movs	r3, #0
 800300c:	5ccc      	ldrb	r4, [r1, r3]
 800300e:	001a      	movs	r2, r3
 8003010:	54ec      	strb	r4, [r5, r3]
 8003012:	3301      	adds	r3, #1
 8003014:	4296      	cmp	r6, r2
 8003016:	d1f9      	bne.n	800300c <memcpy+0x74>
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301a:	0005      	movs	r5, r0
 800301c:	1e56      	subs	r6, r2, #1
 800301e:	e7f4      	b.n	800300a <memcpy+0x72>
 8003020:	001a      	movs	r2, r3
 8003022:	e7ef      	b.n	8003004 <memcpy+0x6c>

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <__libc_init_array+0x38>)
 8003028:	4d0d      	ldr	r5, [pc, #52]	@ (8003060 <__libc_init_array+0x3c>)
 800302a:	1b5e      	subs	r6, r3, r5
 800302c:	10b6      	asrs	r6, r6, #2
 800302e:	42ab      	cmp	r3, r5
 8003030:	d005      	beq.n	800303e <__libc_init_array+0x1a>
 8003032:	2400      	movs	r4, #0
 8003034:	cd08      	ldmia	r5!, {r3}
 8003036:	3401      	adds	r4, #1
 8003038:	4798      	blx	r3
 800303a:	42a6      	cmp	r6, r4
 800303c:	d8fa      	bhi.n	8003034 <__libc_init_array+0x10>
 800303e:	f000 ffb9 	bl	8003fb4 <_init>
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <__libc_init_array+0x40>)
 8003044:	4d08      	ldr	r5, [pc, #32]	@ (8003068 <__libc_init_array+0x44>)
 8003046:	1b5e      	subs	r6, r3, r5
 8003048:	10b6      	asrs	r6, r6, #2
 800304a:	42ab      	cmp	r3, r5
 800304c:	d005      	beq.n	800305a <__libc_init_array+0x36>
 800304e:	2400      	movs	r4, #0
 8003050:	cd08      	ldmia	r5!, {r3}
 8003052:	3401      	adds	r4, #1
 8003054:	4798      	blx	r3
 8003056:	42a6      	cmp	r6, r4
 8003058:	d8fa      	bhi.n	8003050 <__libc_init_array+0x2c>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
	...

0800306c <System_Clock_Init>:

/**
 * @brief  Initializes the STM32F030R8 clock
 * @retval None
 */
void System_Clock_Init(){
 800306c:	b510      	push	{r4, lr}
  RCC_GetClocksFreq(&RCC_Clocks);
 800306e:	4c0c      	ldr	r4, [pc, #48]	@ (80030a0 <System_Clock_Init+0x34>)
 8003070:	0020      	movs	r0, r4
 8003072:	f7fd fafb 	bl	800066c <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8003076:	21fa      	movs	r1, #250	@ 0xfa
 8003078:	6860      	ldr	r0, [r4, #4]
 800307a:	0089      	lsls	r1, r1, #2
 800307c:	f7fd feaa 	bl	8000dd4 <__udivsi3>
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8003080:	21c0      	movs	r1, #192	@ 0xc0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <System_Clock_Init+0x38>)
 8003084:	3801      	subs	r0, #1
 8003086:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8003088:	4807      	ldr	r0, [pc, #28]	@ (80030a8 <System_Clock_Init+0x3c>)
 800308a:	0609      	lsls	r1, r1, #24
 800308c:	6a03      	ldr	r3, [r0, #32]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	430b      	orrs	r3, r1
 8003094:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8003096:	2300      	movs	r3, #0
 8003098:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	3307      	adds	r3, #7
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	20000018 	.word	0x20000018
 80030a4:	e000e010 	.word	0xe000e010
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 80030ac:	b082      	sub	sp, #8
 80030ae:	9001      	str	r0, [sp, #4]
  TimingDelay = nTime;
 80030b0:	9a01      	ldr	r2, [sp, #4]
 80030b2:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <Delay+0x14>)
 80030b4:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d1fc      	bne.n	80030b6 <Delay+0xa>
}
 80030bc:	b002      	add	sp, #8
 80030be:	4770      	bx	lr
 80030c0:	20000038 	.word	0x20000038

080030c4 <TimingDelay_Decrement>:
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <TimingDelay_Decrement+0x10>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d002      	beq.n	80030d2 <TimingDelay_Decrement+0xe>
  { 
    TimingDelay--;
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	3a01      	subs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
  }
}
 80030d2:	4770      	bx	lr
 80030d4:	20000038 	.word	0x20000038

080030d8 <reverse>:
* @param  i: start index
* @param  j: end index
* @retval pointer to reversed char array
*/
char* reverse(char *buffer, int i, int j)
{
 80030d8:	b510      	push	{r4, lr}
	while (i < j)
 80030da:	4291      	cmp	r1, r2
 80030dc:	db00      	blt.n	80030e0 <reverse+0x8>
		swap(&buffer[i++], &buffer[j--]); 
	return buffer;
}
 80030de:	bd10      	pop	{r4, pc}
void System_Clock_Init();

void display_sensor_reading();
// inline function to swap two numbers
inline void swap(char *x, char *y) {
	char t = *x; *x = *y; *y = t;
 80030e0:	5c43      	ldrb	r3, [r0, r1]
 80030e2:	5c84      	ldrb	r4, [r0, r2]
 80030e4:	5444      	strb	r4, [r0, r1]
 80030e6:	5483      	strb	r3, [r0, r2]
 80030e8:	3101      	adds	r1, #1
 80030ea:	3a01      	subs	r2, #1
}
 80030ec:	e7f5      	b.n	80030da <reverse+0x2>

080030ee <itoa>:
* @param  buffer: buffer to store the result
* @param  base: base of the result
* @retval pointer to converted character array
*/
char* itoa(int value, char* buffer, int base)
{
 80030ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// invalid input
	if (base < 2 || base > 32)
 80030f0:	1e93      	subs	r3, r2, #2
{
 80030f2:	0006      	movs	r6, r0
 80030f4:	000c      	movs	r4, r1
 80030f6:	0015      	movs	r5, r2
	if (base < 2 || base > 32)
 80030f8:	2b1e      	cmp	r3, #30
 80030fa:	d818      	bhi.n	800312e <itoa+0x40>
		return buffer; 

	// Get absolute value of number
	int n = value;
    if (n < 0) n *= -1;
 80030fc:	2700      	movs	r7, #0
 80030fe:	17c3      	asrs	r3, r0, #31
 8003100:	18c0      	adds	r0, r0, r3
 8003102:	4058      	eors	r0, r3

	int i = 0;
	while (n)
 8003104:	2800      	cmp	r0, #0
 8003106:	d114      	bne.n	8003132 <itoa+0x44>
 8003108:	1e3a      	subs	r2, r7, #0

		n = n / base;
	}

	// if number is 0
	if (i == 0)
 800310a:	d102      	bne.n	8003112 <itoa+0x24>
		buffer[i++] = '0';
 800310c:	2330      	movs	r3, #48	@ 0x30
 800310e:	3201      	adds	r2, #1
 8003110:	7023      	strb	r3, [r4, #0]

	// If base is 10 and value is negative, the resulting string 
	// is preceded with a minus sign (-)
	// With any other base, value is always considered unsigned
	if (value < 0 && base == 10)
 8003112:	2e00      	cmp	r6, #0
 8003114:	da04      	bge.n	8003120 <itoa+0x32>
 8003116:	2d0a      	cmp	r5, #10
 8003118:	d102      	bne.n	8003120 <itoa+0x32>
		buffer[i++] = '-';
 800311a:	232d      	movs	r3, #45	@ 0x2d
 800311c:	54a3      	strb	r3, [r4, r2]
 800311e:	3201      	adds	r2, #1

	buffer[i] = '\0'; // null terminate string
 8003120:	2100      	movs	r1, #0

	// reverse the string and return it
	return reverse(buffer, 0, i - 1);
 8003122:	0020      	movs	r0, r4
	buffer[i] = '\0'; // null terminate string
 8003124:	54a1      	strb	r1, [r4, r2]
	return reverse(buffer, 0, i - 1);
 8003126:	3a01      	subs	r2, #1
 8003128:	f7ff ffd6 	bl	80030d8 <reverse>
 800312c:	0004      	movs	r4, r0
}
 800312e:	0020      	movs	r0, r4
 8003130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int r = n % base;
 8003132:	0029      	movs	r1, r5
 8003134:	f7fd ffbe 	bl	80010b4 <__aeabi_idivmod>
			buffer[i++] = 65 + (r - 10);
 8003138:	b2ca      	uxtb	r2, r1
			buffer[i++] = 48 + r;
 800313a:	0013      	movs	r3, r2
 800313c:	3330      	adds	r3, #48	@ 0x30
 800313e:	b2db      	uxtb	r3, r3
		if (r >= 10) 
 8003140:	2909      	cmp	r1, #9
 8003142:	dd01      	ble.n	8003148 <itoa+0x5a>
			buffer[i++] = 65 + (r - 10);
 8003144:	3237      	adds	r2, #55	@ 0x37
 8003146:	b2d3      	uxtb	r3, r2
 8003148:	55e3      	strb	r3, [r4, r7]
		n = n / base;
 800314a:	3701      	adds	r7, #1
 800314c:	e7da      	b.n	8003104 <itoa+0x16>
	...

08003150 <send_string>:
* @brief  Sends a string to over UART 
* @param  string: String to send
* @retval None
*/
void send_string(char *string)
{
 8003150:	b510      	push	{r4, lr}
 8003152:	0004      	movs	r4, r0
    while (*string != 0)
 8003154:	7823      	ldrb	r3, [r4, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <send_string+0x18>
    {
        while (USART_GetFlagStatus(USART2,USART_FLAG_TXE) == 0);
        USART_SendData(USART2, (uint16_t) *string++);
    }
    while (USART_GetFlagStatus(USART2,USART_FLAG_TXE) == 0);
 800315a:	2180      	movs	r1, #128	@ 0x80
 800315c:	4808      	ldr	r0, [pc, #32]	@ (8003180 <send_string+0x30>)
 800315e:	f7fd fe09 	bl	8000d74 <USART_GetFlagStatus>
 8003162:	2800      	cmp	r0, #0
 8003164:	d0f9      	beq.n	800315a <send_string+0xa>
}
 8003166:	bd10      	pop	{r4, pc}
        while (USART_GetFlagStatus(USART2,USART_FLAG_TXE) == 0);
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	4805      	ldr	r0, [pc, #20]	@ (8003180 <send_string+0x30>)
 800316c:	f7fd fe02 	bl	8000d74 <USART_GetFlagStatus>
 8003170:	2800      	cmp	r0, #0
 8003172:	d0f9      	beq.n	8003168 <send_string+0x18>
        USART_SendData(USART2, (uint16_t) *string++);
 8003174:	7821      	ldrb	r1, [r4, #0]
 8003176:	4802      	ldr	r0, [pc, #8]	@ (8003180 <send_string+0x30>)
 8003178:	f7fd fcee 	bl	8000b58 <USART_SendData>
 800317c:	3401      	adds	r4, #1
 800317e:	e7e9      	b.n	8003154 <send_string+0x4>
 8003180:	40004400 	.word	0x40004400

08003184 <send_stringln>:
* @brief  Sends a string to over UART with a newline character
* @param  string: String to send
* @retval None
*/
void send_stringln(char *string)
{
 8003184:	b510      	push	{r4, lr}
  send_string(string);
 8003186:	f7ff ffe3 	bl	8003150 <send_string>
  send_string("\r\n");
 800318a:	4802      	ldr	r0, [pc, #8]	@ (8003194 <send_stringln+0x10>)
 800318c:	f7ff ffe0 	bl	8003150 <send_string>
}
 8003190:	bd10      	pop	{r4, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	08003fa8 	.word	0x08003fa8

08003198 <main>:
{
 8003198:	b510      	push	{r4, lr}
 800319a:	b088      	sub	sp, #32
  System_Clock_Init();
 800319c:	f7ff ff66 	bl	800306c <System_Clock_Init>
  Servo_Peripherals_Init();
 80031a0:	f000 fc82 	bl	8003aa8 <Servo_Peripherals_Init>
  DriveServoControl(DEGREE_45);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f000 fca3 	bl	8003af0 <DriveServoControl>
  HBridge_Peripherals_Init();
 80031aa:	f000 fc59 	bl	8003a60 <HBridge_Peripherals_Init>
  DriveACMotorVoltageController(10000);
 80031ae:	4812      	ldr	r0, [pc, #72]	@ (80031f8 <main+0x60>)
 80031b0:	f000 fcce 	bl	8003b50 <DriveACMotorVoltageController>
  send_stringln("Start");
 80031b4:	4811      	ldr	r0, [pc, #68]	@ (80031fc <main+0x64>)
 80031b6:	f7ff ffe5 	bl	8003184 <send_stringln>
  Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff ff76 	bl	80030ac <Delay>
    Delay(1000);
 80031c0:	24fa      	movs	r4, #250	@ 0xfa
  BlinkSpeed = 0;
 80031c2:	2200      	movs	r2, #0
 80031c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <main+0x68>)
    Delay(1000);
 80031c6:	00a4      	lsls	r4, r4, #2
  BlinkSpeed = 0;
 80031c8:	701a      	strb	r2, [r3, #0]
    STM_EVAL_LEDToggle(LED2);
 80031ca:	2000      	movs	r0, #0
 80031cc:	f000 f874 	bl	80032b8 <STM_EVAL_LEDToggle>
    display_sensor_reading();
 80031d0:	f000 fbf4 	bl	80039bc <display_sensor_reading>
    struct ambient_reading curr_read = return_sensor_reading();
 80031d4:	a804      	add	r0, sp, #16
 80031d6:	f000 fc27 	bl	8003a28 <return_sensor_reading>
    readings_arr[0] = (int)curr_read.temperature;
 80031da:	9b04      	ldr	r3, [sp, #16]
    transmit(readings_arr, sizeof(readings_arr)/(sizeof(unsigned char)), 1); 
 80031dc:	2201      	movs	r2, #1
    readings_arr[0] = (int)curr_read.temperature;
 80031de:	9301      	str	r3, [sp, #4]
    readings_arr[1] = (int)curr_read.pressure; // value is unsigned int
 80031e0:	9b05      	ldr	r3, [sp, #20]
    transmit(readings_arr, sizeof(readings_arr)/(sizeof(unsigned char)), 1); 
 80031e2:	210c      	movs	r1, #12
    readings_arr[1] = (int)curr_read.pressure; // value is unsigned int
 80031e4:	9302      	str	r3, [sp, #8]
    readings_arr[2] = (int)curr_read.humidity; // value is unsigned int
 80031e6:	9b06      	ldr	r3, [sp, #24]
    transmit(readings_arr, sizeof(readings_arr)/(sizeof(unsigned char)), 1); 
 80031e8:	a801      	add	r0, sp, #4
    readings_arr[2] = (int)curr_read.humidity; // value is unsigned int
 80031ea:	9303      	str	r3, [sp, #12]
    transmit(readings_arr, sizeof(readings_arr)/(sizeof(unsigned char)), 1); 
 80031ec:	f000 fe36 	bl	8003e5c <transmit>
    Delay(1000);
 80031f0:	0020      	movs	r0, r4
 80031f2:	f7ff ff5b 	bl	80030ac <Delay>
  while (1)
 80031f6:	e7e8      	b.n	80031ca <main+0x32>
 80031f8:	00002710 	.word	0x00002710
 80031fc:	08003fab 	.word	0x08003fab
 8003200:	20000034 	.word	0x20000034

08003204 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8003204:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003206:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003208:	240f      	movs	r4, #15
  RCC->CR |= (uint32_t)0x00000001;
 800320a:	4b24      	ldr	r3, [pc, #144]	@ (800329c <SystemInit+0x98>)
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 800320c:	4924      	ldr	r1, [pc, #144]	@ (80032a0 <SystemInit+0x9c>)
  RCC->CR |= (uint32_t)0x00000001;
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4302      	orrs	r2, r0
 8003212:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	400a      	ands	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4921      	ldr	r1, [pc, #132]	@ (80032a4 <SystemInit+0xa0>)
 800321e:	400a      	ands	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4920      	ldr	r1, [pc, #128]	@ (80032a8 <SystemInit+0xa4>)
 8003226:	400a      	ands	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	491f      	ldr	r1, [pc, #124]	@ (80032ac <SystemInit+0xa8>)
 800322e:	400a      	ands	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8003232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003234:	43a2      	bics	r2, r4
 8003236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8003238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800323a:	4c1d      	ldr	r4, [pc, #116]	@ (80032b0 <SystemInit+0xac>)
 800323c:	4022      	ands	r2, r4
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8003240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003242:	4382      	bics	r2, r0
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800324a:	9200      	str	r2, [sp, #0]
 800324c:	9201      	str	r2, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800324e:	4a19      	ldr	r2, [pc, #100]	@ (80032b4 <SystemInit+0xb0>)
 8003250:	3010      	adds	r0, #16
 8003252:	6010      	str	r0, [r2, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	605a      	str	r2, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	400a      	ands	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8003262:	22a0      	movs	r2, #160	@ 0xa0
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	0392      	lsls	r2, r2, #14
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800326c:	2280      	movs	r2, #128	@ 0x80
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	0452      	lsls	r2, r2, #17
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	0492      	lsls	r2, r2, #18
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	4211      	tst	r1, r2
 800327e:	d0fc      	beq.n	800327a <SystemInit+0x76>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003280:	2103      	movs	r1, #3
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	438a      	bics	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003288:	2202      	movs	r2, #2
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800328e:	210c      	movs	r1, #12
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003290:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	400a      	ands	r2, r1
 8003296:	2a08      	cmp	r2, #8
 8003298:	d1fb      	bne.n	8003292 <SystemInit+0x8e>
}
 800329a:	bd13      	pop	{r0, r1, r4, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	f8ffb80c 	.word	0xf8ffb80c
 80032a4:	fef6ffff 	.word	0xfef6ffff
 80032a8:	fffbffff 	.word	0xfffbffff
 80032ac:	ffc0ffff 	.word	0xffc0ffff
 80032b0:	fffffeac 	.word	0xfffffeac
 80032b4:	40022000 	.word	0x40022000

080032b8 <STM_EVAL_LEDToggle>:
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80032b8:	4b03      	ldr	r3, [pc, #12]	@ (80032c8 <STM_EVAL_LEDToggle+0x10>)
 80032ba:	0080      	lsls	r0, r0, #2
 80032bc:	58c2      	ldr	r2, [r0, r3]
 80032be:	2320      	movs	r3, #32
 80032c0:	8a91      	ldrh	r1, [r2, #20]
 80032c2:	404b      	eors	r3, r1
 80032c4:	8293      	strh	r3, [r2, #20]
}
 80032c6:	4770      	bx	lr
 80032c8:	20000004 	.word	0x20000004

080032cc <STM_EVAL_PBGetState>:
  *   This parameter must be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80032cc:	2180      	movs	r1, #128	@ 0x80
{
 80032ce:	b510      	push	{r4, lr}
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <STM_EVAL_PBGetState+0x14>)
 80032d2:	0080      	lsls	r0, r0, #2
 80032d4:	58c0      	ldr	r0, [r0, r3]
 80032d6:	0189      	lsls	r1, r1, #6
 80032d8:	f7fd f82a 	bl	8000330 <GPIO_ReadInputDataBit>
}
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	20000000 	.word	0x20000000

080032e4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80032e4:	4770      	bx	lr

080032e6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <HardFault_Handler>

080032e8 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 80032e8:	4770      	bx	lr

080032ea <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80032ec:	b510      	push	{r4, lr}
  TimingDelay_Decrement();
 80032ee:	f7ff fee9 	bl	80030c4 <TimingDelay_Decrement>
}
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <EXTI4_15_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_15_IRQHandler(void)
{
  if ((EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) == SET)&&(STM_EVAL_PBGetState(BUTTON_USER) != RESET))
 80032f4:	2080      	movs	r0, #128	@ 0x80
{
 80032f6:	b510      	push	{r4, lr}
  if ((EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) == SET)&&(STM_EVAL_PBGetState(BUTTON_USER) != RESET))
 80032f8:	0180      	lsls	r0, r0, #6
 80032fa:	f7fc ff45 	bl	8000188 <EXTI_GetITStatus>
 80032fe:	2801      	cmp	r0, #1
 8003300:	d10e      	bne.n	8003320 <EXTI4_15_IRQHandler+0x2c>
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff ffe2 	bl	80032cc <STM_EVAL_PBGetState>
 8003308:	2800      	cmp	r0, #0
 800330a:	d009      	beq.n	8003320 <EXTI4_15_IRQHandler+0x2c>
	{		
  if(BlinkSpeed == 1)
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <EXTI4_15_IRQHandler+0x38>)
 800330e:	7813      	ldrb	r3, [r2, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d106      	bne.n	8003322 <EXTI4_15_IRQHandler+0x2e>
  {
    BlinkSpeed = 0;
 8003314:	2300      	movs	r3, #0
  else
  {
    BlinkSpeed ++;
  }
  /* Clear the EXTI line pending bit */
  EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8003316:	2080      	movs	r0, #128	@ 0x80
 8003318:	0180      	lsls	r0, r0, #6
    BlinkSpeed ++;
 800331a:	7013      	strb	r3, [r2, #0]
  EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 800331c:	f7fc ff42 	bl	80001a4 <EXTI_ClearITPendingBit>
  }	
}
 8003320:	bd10      	pop	{r4, pc}
    BlinkSpeed ++;
 8003322:	7813      	ldrb	r3, [r2, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e7f5      	b.n	8003316 <EXTI4_15_IRQHandler+0x22>
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	20000034 	.word	0x20000034

08003330 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	1e1c      	subs	r4, r3, #0
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003334:	d016      	beq.n	8003364 <bme280_get_regs+0x34>
 8003336:	68dd      	ldr	r5, [r3, #12]
 8003338:	2d00      	cmp	r5, #0
 800333a:	d013      	beq.n	8003364 <bme280_get_regs+0x34>
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <bme280_get_regs+0x34>
 8003342:	6963      	ldr	r3, [r4, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <bme280_get_regs+0x34>
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8003348:	2900      	cmp	r1, #0
 800334a:	d00b      	beq.n	8003364 <bme280_get_regs+0x34>
        if (dev->intf != BME280_I2C_INTF)
 800334c:	7863      	ldrb	r3, [r4, #1]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <bme280_get_regs+0x26>
            reg_addr = reg_addr | 0x80;
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	4318      	orrs	r0, r3
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	47a8      	blx	r5
 800335a:	7220      	strb	r0, [r4, #8]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800335c:	2800      	cmp	r0, #0
 800335e:	d003      	beq.n	8003368 <bme280_get_regs+0x38>
            rslt = BME280_E_COMM_FAIL;
 8003360:	2002      	movs	r0, #2
 8003362:	e000      	b.n	8003366 <bme280_get_regs+0x36>
        rslt = BME280_E_NULL_PTR;
 8003364:	2001      	movs	r0, #1
            rslt = BME280_E_COMM_FAIL;
 8003366:	4240      	negs	r0, r0
}
 8003368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800336c <bme280_compensate_data>:
{
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b08d      	sub	sp, #52	@ 0x34
 8003370:	9008      	str	r0, [sp, #32]
 8003372:	9102      	str	r1, [sp, #8]
 8003374:	9201      	str	r2, [sp, #4]
 8003376:	9300      	str	r3, [sp, #0]
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003378:	2900      	cmp	r1, #0
 800337a:	d100      	bne.n	800337e <bme280_compensate_data+0x12>
 800337c:	e280      	b.n	8003880 <bme280_compensate_data+0x514>
 800337e:	2a00      	cmp	r2, #0
 8003380:	d100      	bne.n	8003384 <bme280_compensate_data+0x18>
 8003382:	e27d      	b.n	8003880 <bme280_compensate_data+0x514>
 8003384:	9b00      	ldr	r3, [sp, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d100      	bne.n	800338c <bme280_compensate_data+0x20>
 800338a:	e279      	b.n	8003880 <bme280_compensate_data+0x514>
        comp_data->temperature = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	2200      	movs	r2, #0
 8003390:	9901      	ldr	r1, [sp, #4]
 8003392:	608a      	str	r2, [r1, #8]
 8003394:	60cb      	str	r3, [r1, #12]
        comp_data->pressure = 0;
 8003396:	600a      	str	r2, [r1, #0]
 8003398:	604b      	str	r3, [r1, #4]
        comp_data->humidity = 0;
 800339a:	610a      	str	r2, [r1, #16]
 800339c:	614b      	str	r3, [r1, #20]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800339e:	0003      	movs	r3, r0
 80033a0:	075b      	lsls	r3, r3, #29
 80033a2:	d100      	bne.n	80033a6 <bme280_compensate_data+0x3a>
 80033a4:	e269      	b.n	800387a <bme280_compensate_data+0x50e>
    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 80033a6:	9b02      	ldr	r3, [sp, #8]
 80033a8:	6858      	ldr	r0, [r3, #4]
 80033aa:	f7ff fd5f 	bl	8002e6c <__aeabi_ui2d>
 80033ae:	9b00      	ldr	r3, [sp, #0]
 80033b0:	0006      	movs	r6, r0
 80033b2:	8818      	ldrh	r0, [r3, #0]
 80033b4:	000f      	movs	r7, r1
 80033b6:	f7ff fd59 	bl	8002e6c <__aeabi_ui2d>
 80033ba:	2200      	movs	r2, #0
 80033bc:	9004      	str	r0, [sp, #16]
 80033be:	9105      	str	r1, [sp, #20]
 80033c0:	4bf7      	ldr	r3, [pc, #988]	@ (80037a0 <bme280_compensate_data+0x434>)
 80033c2:	0030      	movs	r0, r6
 80033c4:	0039      	movs	r1, r7
 80033c6:	f7fe fe93 	bl	80020f0 <__aeabi_dmul>
 80033ca:	2200      	movs	r2, #0
 80033cc:	0004      	movs	r4, r0
 80033ce:	000d      	movs	r5, r1
 80033d0:	9804      	ldr	r0, [sp, #16]
 80033d2:	9905      	ldr	r1, [sp, #20]
 80033d4:	4bf3      	ldr	r3, [pc, #972]	@ (80037a4 <bme280_compensate_data+0x438>)
 80033d6:	f7fe fe8b 	bl	80020f0 <__aeabi_dmul>
 80033da:	0002      	movs	r2, r0
 80033dc:	000b      	movs	r3, r1
 80033de:	0020      	movs	r0, r4
 80033e0:	0029      	movs	r1, r5
 80033e2:	f7ff f951 	bl	8002688 <__aeabi_dsub>
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 80033e6:	2200      	movs	r2, #0
    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 80033e8:	9006      	str	r0, [sp, #24]
 80033ea:	9107      	str	r1, [sp, #28]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 80033ec:	4bee      	ldr	r3, [pc, #952]	@ (80037a8 <bme280_compensate_data+0x43c>)
 80033ee:	0030      	movs	r0, r6
 80033f0:	0039      	movs	r1, r7
 80033f2:	f7fe fe7d 	bl	80020f0 <__aeabi_dmul>
 80033f6:	2200      	movs	r2, #0
 80033f8:	0004      	movs	r4, r0
 80033fa:	000d      	movs	r5, r1
 80033fc:	9804      	ldr	r0, [sp, #16]
 80033fe:	9905      	ldr	r1, [sp, #20]
 8003400:	4bea      	ldr	r3, [pc, #936]	@ (80037ac <bme280_compensate_data+0x440>)
 8003402:	f7fe fe75 	bl	80020f0 <__aeabi_dmul>
 8003406:	0002      	movs	r2, r0
 8003408:	000b      	movs	r3, r1
 800340a:	0020      	movs	r0, r4
 800340c:	0029      	movs	r1, r5
 800340e:	f7ff f93b 	bl	8002688 <__aeabi_dsub>
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8003412:	0002      	movs	r2, r0
 8003414:	000b      	movs	r3, r1
 8003416:	f7fe fe6b 	bl	80020f0 <__aeabi_dmul>
    var1 = var1 * ((double)calib_data->dig_t2);
 800341a:	9b00      	ldr	r3, [sp, #0]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800341c:	0006      	movs	r6, r0
    var1 = var1 * ((double)calib_data->dig_t2);
 800341e:	2002      	movs	r0, #2
 8003420:	5e18      	ldrsh	r0, [r3, r0]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8003422:	000f      	movs	r7, r1
    var1 = var1 * ((double)calib_data->dig_t2);
 8003424:	f7ff fcf4 	bl	8002e10 <__aeabi_i2d>
 8003428:	9a06      	ldr	r2, [sp, #24]
 800342a:	9b07      	ldr	r3, [sp, #28]
 800342c:	f7fe fe60 	bl	80020f0 <__aeabi_dmul>
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8003430:	9b00      	ldr	r3, [sp, #0]
    var1 = var1 * ((double)calib_data->dig_t2);
 8003432:	0004      	movs	r4, r0
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8003434:	2004      	movs	r0, #4
 8003436:	5e18      	ldrsh	r0, [r3, r0]
    var1 = var1 * ((double)calib_data->dig_t2);
 8003438:	000d      	movs	r5, r1
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800343a:	f7ff fce9 	bl	8002e10 <__aeabi_i2d>
 800343e:	0032      	movs	r2, r6
 8003440:	003b      	movs	r3, r7
 8003442:	f7fe fe55 	bl	80020f0 <__aeabi_dmul>
 8003446:	0002      	movs	r2, r0
 8003448:	000b      	movs	r3, r1
    calib_data->t_fine = (int32_t)(var1 + var2);
 800344a:	0020      	movs	r0, r4
 800344c:	0029      	movs	r1, r5
 800344e:	f7fd fe93 	bl	8001178 <__aeabi_dadd>
 8003452:	0004      	movs	r4, r0
 8003454:	000d      	movs	r5, r1
 8003456:	f7ff fc9f 	bl	8002d98 <__aeabi_d2iz>
 800345a:	9b00      	ldr	r3, [sp, #0]
    temperature = (var1 + var2) / 5120.0;
 800345c:	2200      	movs	r2, #0
    calib_data->t_fine = (int32_t)(var1 + var2);
 800345e:	6258      	str	r0, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 8003460:	0029      	movs	r1, r5
 8003462:	4bd3      	ldr	r3, [pc, #844]	@ (80037b0 <bme280_compensate_data+0x444>)
    calib_data->t_fine = (int32_t)(var1 + var2);
 8003464:	9004      	str	r0, [sp, #16]
    temperature = (var1 + var2) / 5120.0;
 8003466:	0020      	movs	r0, r4
 8003468:	f7fe fa1e 	bl	80018a8 <__aeabi_ddiv>
    if (temperature < temperature_min)
 800346c:	2200      	movs	r2, #0
 800346e:	4bd1      	ldr	r3, [pc, #836]	@ (80037b4 <bme280_compensate_data+0x448>)
    temperature = (var1 + var2) / 5120.0;
 8003470:	0004      	movs	r4, r0
 8003472:	000d      	movs	r5, r1
    if (temperature < temperature_min)
 8003474:	f7fd fe3a 	bl	80010ec <__aeabi_dcmplt>
 8003478:	2800      	cmp	r0, #0
 800347a:	d000      	beq.n	800347e <bme280_compensate_data+0x112>
 800347c:	e1ec      	b.n	8003858 <bme280_compensate_data+0x4ec>
    else if (temperature > temperature_max)
 800347e:	2200      	movs	r2, #0
 8003480:	0020      	movs	r0, r4
 8003482:	0029      	movs	r1, r5
 8003484:	4bcc      	ldr	r3, [pc, #816]	@ (80037b8 <bme280_compensate_data+0x44c>)
 8003486:	f7fd fe45 	bl	8001114 <__aeabi_dcmpgt>
 800348a:	2800      	cmp	r0, #0
 800348c:	d000      	beq.n	8003490 <bme280_compensate_data+0x124>
 800348e:	e1e6      	b.n	800385e <bme280_compensate_data+0x4f2>
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003490:	9b01      	ldr	r3, [sp, #4]
 8003492:	609c      	str	r4, [r3, #8]
 8003494:	60dd      	str	r5, [r3, #12]
        if (sensor_comp & BME280_PRESS)
 8003496:	9b08      	ldr	r3, [sp, #32]
 8003498:	07db      	lsls	r3, r3, #31
 800349a:	d400      	bmi.n	800349e <bme280_compensate_data+0x132>
 800349c:	e108      	b.n	80036b0 <bme280_compensate_data+0x344>
    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800349e:	9804      	ldr	r0, [sp, #16]
 80034a0:	f7ff fcb6 	bl	8002e10 <__aeabi_i2d>
 80034a4:	2200      	movs	r2, #0
 80034a6:	4bc5      	ldr	r3, [pc, #788]	@ (80037bc <bme280_compensate_data+0x450>)
 80034a8:	f7fe fe22 	bl	80020f0 <__aeabi_dmul>
 80034ac:	2200      	movs	r2, #0
 80034ae:	4bc4      	ldr	r3, [pc, #784]	@ (80037c0 <bme280_compensate_data+0x454>)
 80034b0:	f7ff f8ea 	bl	8002688 <__aeabi_dsub>
 80034b4:	0006      	movs	r6, r0
 80034b6:	000f      	movs	r7, r1
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 80034b8:	9b00      	ldr	r3, [sp, #0]
 80034ba:	2210      	movs	r2, #16
 80034bc:	5e9b      	ldrsh	r3, [r3, r2]
 80034be:	9309      	str	r3, [sp, #36]	@ 0x24
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80034c0:	9b00      	ldr	r3, [sp, #0]
 80034c2:	220e      	movs	r2, #14
 80034c4:	5e9b      	ldrsh	r3, [r3, r2]
 80034c6:	930a      	str	r3, [sp, #40]	@ 0x28
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80034c8:	9b00      	ldr	r3, [sp, #0]
 80034ca:	220c      	movs	r2, #12
 80034cc:	5e9b      	ldrsh	r3, [r3, r2]
 80034ce:	930b      	str	r3, [sp, #44]	@ 0x2c
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80034d0:	9b00      	ldr	r3, [sp, #0]
 80034d2:	200a      	movs	r0, #10
 80034d4:	5e18      	ldrsh	r0, [r3, r0]
 80034d6:	f7ff fc9b 	bl	8002e10 <__aeabi_i2d>
 80034da:	0032      	movs	r2, r6
 80034dc:	003b      	movs	r3, r7
 80034de:	f7fe fe07 	bl	80020f0 <__aeabi_dmul>
 80034e2:	0032      	movs	r2, r6
 80034e4:	003b      	movs	r3, r7
 80034e6:	f7fe fe03 	bl	80020f0 <__aeabi_dmul>
 80034ea:	23fb      	movs	r3, #251	@ 0xfb
 80034ec:	2200      	movs	r2, #0
 80034ee:	059b      	lsls	r3, r3, #22
 80034f0:	f7fe fdfe 	bl	80020f0 <__aeabi_dmul>
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80034f4:	9b00      	ldr	r3, [sp, #0]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80034f6:	0004      	movs	r4, r0
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80034f8:	2008      	movs	r0, #8
 80034fa:	5e18      	ldrsh	r0, [r3, r0]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80034fc:	000d      	movs	r5, r1
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80034fe:	f7ff fc87 	bl	8002e10 <__aeabi_i2d>
 8003502:	0032      	movs	r2, r6
 8003504:	003b      	movs	r3, r7
 8003506:	f7fe fdf3 	bl	80020f0 <__aeabi_dmul>
 800350a:	0002      	movs	r2, r0
 800350c:	000b      	movs	r3, r1
 800350e:	0020      	movs	r0, r4
 8003510:	0029      	movs	r1, r5
 8003512:	f7fd fe31 	bl	8001178 <__aeabi_dadd>
 8003516:	23fb      	movs	r3, #251	@ 0xfb
 8003518:	2200      	movs	r2, #0
 800351a:	059b      	lsls	r3, r3, #22
 800351c:	f7fe fde8 	bl	80020f0 <__aeabi_dmul>
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8003520:	23fc      	movs	r3, #252	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	059b      	lsls	r3, r3, #22
 8003526:	f7fe fde3 	bl	80020f0 <__aeabi_dmul>
 800352a:	2200      	movs	r2, #0
 800352c:	4ba5      	ldr	r3, [pc, #660]	@ (80037c4 <bme280_compensate_data+0x458>)
 800352e:	f7fd fe23 	bl	8001178 <__aeabi_dadd>
 8003532:	0004      	movs	r4, r0
 8003534:	000d      	movs	r5, r1
 8003536:	9b00      	ldr	r3, [sp, #0]
 8003538:	88d8      	ldrh	r0, [r3, #6]
 800353a:	f7ff fc97 	bl	8002e6c <__aeabi_ui2d>
 800353e:	0022      	movs	r2, r4
 8003540:	002b      	movs	r3, r5
 8003542:	f7fe fdd5 	bl	80020f0 <__aeabi_dmul>
    if (var1 > (0.0))
 8003546:	2200      	movs	r2, #0
 8003548:	2300      	movs	r3, #0
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 800354a:	9006      	str	r0, [sp, #24]
 800354c:	9107      	str	r1, [sp, #28]
    if (var1 > (0.0))
 800354e:	f7fd fde1 	bl	8001114 <__aeabi_dcmpgt>
 8003552:	2800      	cmp	r0, #0
 8003554:	d100      	bne.n	8003558 <bme280_compensate_data+0x1ec>
 8003556:	e185      	b.n	8003864 <bme280_compensate_data+0x4f8>
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8003558:	0032      	movs	r2, r6
 800355a:	003b      	movs	r3, r7
 800355c:	0030      	movs	r0, r6
 800355e:	0039      	movs	r1, r7
 8003560:	f7fe fdc6 	bl	80020f0 <__aeabi_dmul>
 8003564:	0004      	movs	r4, r0
 8003566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003568:	000d      	movs	r5, r1
 800356a:	f7ff fc51 	bl	8002e10 <__aeabi_i2d>
 800356e:	0002      	movs	r2, r0
 8003570:	000b      	movs	r3, r1
 8003572:	0020      	movs	r0, r4
 8003574:	0029      	movs	r1, r5
 8003576:	f7fe fdbb 	bl	80020f0 <__aeabi_dmul>
 800357a:	23fc      	movs	r3, #252	@ 0xfc
 800357c:	2200      	movs	r2, #0
 800357e:	059b      	lsls	r3, r3, #22
 8003580:	f7fe fdb6 	bl	80020f0 <__aeabi_dmul>
 8003584:	0004      	movs	r4, r0
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8003586:	980a      	ldr	r0, [sp, #40]	@ 0x28
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8003588:	000d      	movs	r5, r1
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800358a:	f7ff fc41 	bl	8002e10 <__aeabi_i2d>
 800358e:	0032      	movs	r2, r6
 8003590:	003b      	movs	r3, r7
 8003592:	f7fe fdad 	bl	80020f0 <__aeabi_dmul>
 8003596:	0002      	movs	r2, r0
 8003598:	000b      	movs	r3, r1
 800359a:	f7fd fded 	bl	8001178 <__aeabi_dadd>
 800359e:	0022      	movs	r2, r4
 80035a0:	002b      	movs	r3, r5
 80035a2:	f7fd fde9 	bl	8001178 <__aeabi_dadd>
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	4b87      	ldr	r3, [pc, #540]	@ (80037c8 <bme280_compensate_data+0x45c>)
 80035aa:	f7fe fda1 	bl	80020f0 <__aeabi_dmul>
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80035ae:	9b02      	ldr	r3, [sp, #8]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80035b0:	0004      	movs	r4, r0
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80035b2:	6818      	ldr	r0, [r3, #0]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80035b4:	000d      	movs	r5, r1
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80035b6:	f7ff fc59 	bl	8002e6c <__aeabi_ui2d>
 80035ba:	0002      	movs	r2, r0
 80035bc:	000b      	movs	r3, r1
 80035be:	2000      	movs	r0, #0
 80035c0:	4982      	ldr	r1, [pc, #520]	@ (80037cc <bme280_compensate_data+0x460>)
 80035c2:	f7ff f861 	bl	8002688 <__aeabi_dsub>
 80035c6:	0006      	movs	r6, r0
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80035c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80035ca:	000f      	movs	r7, r1
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80035cc:	f7ff fc20 	bl	8002e10 <__aeabi_i2d>
 80035d0:	2200      	movs	r2, #0
 80035d2:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <bme280_compensate_data+0x464>)
 80035d4:	f7fe fd8c 	bl	80020f0 <__aeabi_dmul>
 80035d8:	0022      	movs	r2, r4
 80035da:	002b      	movs	r3, r5
 80035dc:	f7fd fdcc 	bl	8001178 <__aeabi_dadd>
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80035e0:	2200      	movs	r2, #0
 80035e2:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <bme280_compensate_data+0x468>)
 80035e4:	f7fe fd84 	bl	80020f0 <__aeabi_dmul>
 80035e8:	0002      	movs	r2, r0
 80035ea:	000b      	movs	r3, r1
 80035ec:	0030      	movs	r0, r6
 80035ee:	0039      	movs	r1, r7
 80035f0:	f7ff f84a 	bl	8002688 <__aeabi_dsub>
 80035f4:	2200      	movs	r2, #0
 80035f6:	4b78      	ldr	r3, [pc, #480]	@ (80037d8 <bme280_compensate_data+0x46c>)
 80035f8:	f7fe fd7a 	bl	80020f0 <__aeabi_dmul>
 80035fc:	9a06      	ldr	r2, [sp, #24]
 80035fe:	9b07      	ldr	r3, [sp, #28]
 8003600:	f7fe f952 	bl	80018a8 <__aeabi_ddiv>
 8003604:	0006      	movs	r6, r0
 8003606:	000f      	movs	r7, r1
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8003608:	9b00      	ldr	r3, [sp, #0]
 800360a:	2016      	movs	r0, #22
 800360c:	5e18      	ldrsh	r0, [r3, r0]
 800360e:	f7ff fbff 	bl	8002e10 <__aeabi_i2d>
 8003612:	0032      	movs	r2, r6
 8003614:	003b      	movs	r3, r7
 8003616:	f7fe fd6b 	bl	80020f0 <__aeabi_dmul>
 800361a:	0032      	movs	r2, r6
 800361c:	003b      	movs	r3, r7
 800361e:	f7fe fd67 	bl	80020f0 <__aeabi_dmul>
 8003622:	23f8      	movs	r3, #248	@ 0xf8
 8003624:	2200      	movs	r2, #0
 8003626:	059b      	lsls	r3, r3, #22
 8003628:	f7fe fd62 	bl	80020f0 <__aeabi_dmul>
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 800362c:	9b00      	ldr	r3, [sp, #0]
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800362e:	0004      	movs	r4, r0
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8003630:	2014      	movs	r0, #20
 8003632:	5e18      	ldrsh	r0, [r3, r0]
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8003634:	000d      	movs	r5, r1
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8003636:	f7ff fbeb 	bl	8002e10 <__aeabi_i2d>
 800363a:	0032      	movs	r2, r6
 800363c:	003b      	movs	r3, r7
 800363e:	f7fe fd57 	bl	80020f0 <__aeabi_dmul>
 8003642:	23fc      	movs	r3, #252	@ 0xfc
 8003644:	2200      	movs	r2, #0
 8003646:	059b      	lsls	r3, r3, #22
 8003648:	f7fe fd52 	bl	80020f0 <__aeabi_dmul>
 800364c:	0002      	movs	r2, r0
 800364e:	000b      	movs	r3, r1
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8003650:	0020      	movs	r0, r4
 8003652:	0029      	movs	r1, r5
 8003654:	f7fd fd90 	bl	8001178 <__aeabi_dadd>
 8003658:	9b00      	ldr	r3, [sp, #0]
 800365a:	0004      	movs	r4, r0
 800365c:	2012      	movs	r0, #18
 800365e:	5e18      	ldrsh	r0, [r3, r0]
 8003660:	000d      	movs	r5, r1
 8003662:	f7ff fbd5 	bl	8002e10 <__aeabi_i2d>
 8003666:	0002      	movs	r2, r0
 8003668:	000b      	movs	r3, r1
 800366a:	0020      	movs	r0, r4
 800366c:	0029      	movs	r1, r5
 800366e:	f7fd fd83 	bl	8001178 <__aeabi_dadd>
 8003672:	2200      	movs	r2, #0
 8003674:	4b59      	ldr	r3, [pc, #356]	@ (80037dc <bme280_compensate_data+0x470>)
 8003676:	f7fe fd3b 	bl	80020f0 <__aeabi_dmul>
 800367a:	0002      	movs	r2, r0
 800367c:	000b      	movs	r3, r1
 800367e:	0030      	movs	r0, r6
 8003680:	0039      	movs	r1, r7
 8003682:	f7fd fd79 	bl	8001178 <__aeabi_dadd>
        if (pressure < pressure_min)
 8003686:	2200      	movs	r2, #0
 8003688:	4b55      	ldr	r3, [pc, #340]	@ (80037e0 <bme280_compensate_data+0x474>)
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800368a:	0004      	movs	r4, r0
 800368c:	000d      	movs	r5, r1
        if (pressure < pressure_min)
 800368e:	f7fd fd2d 	bl	80010ec <__aeabi_dcmplt>
 8003692:	2800      	cmp	r0, #0
 8003694:	d000      	beq.n	8003698 <bme280_compensate_data+0x32c>
 8003696:	e0e5      	b.n	8003864 <bme280_compensate_data+0x4f8>
        else if (pressure > pressure_max)
 8003698:	2200      	movs	r2, #0
 800369a:	0020      	movs	r0, r4
 800369c:	0029      	movs	r1, r5
 800369e:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <bme280_compensate_data+0x478>)
 80036a0:	f7fd fd38 	bl	8001114 <__aeabi_dcmpgt>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d000      	beq.n	80036aa <bme280_compensate_data+0x33e>
 80036a8:	e0df      	b.n	800386a <bme280_compensate_data+0x4fe>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80036aa:	9b01      	ldr	r3, [sp, #4]
 80036ac:	601c      	str	r4, [r3, #0]
 80036ae:	605d      	str	r5, [r3, #4]
        if (sensor_comp & BME280_HUM)
 80036b0:	9b08      	ldr	r3, [sp, #32]
 80036b2:	075b      	lsls	r3, r3, #29
 80036b4:	d400      	bmi.n	80036b8 <bme280_compensate_data+0x34c>
 80036b6:	e0e0      	b.n	800387a <bme280_compensate_data+0x50e>
    var1 = ((double)calib_data->t_fine) - 76800.0;
 80036b8:	9804      	ldr	r0, [sp, #16]
 80036ba:	f7ff fba9 	bl	8002e10 <__aeabi_i2d>
 80036be:	2200      	movs	r2, #0
 80036c0:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <bme280_compensate_data+0x47c>)
 80036c2:	f7fe ffe1 	bl	8002688 <__aeabi_dsub>
 80036c6:	0006      	movs	r6, r0
 80036c8:	000f      	movs	r7, r1
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80036ca:	9b00      	ldr	r3, [sp, #0]
 80036cc:	7f18      	ldrb	r0, [r3, #28]
 80036ce:	f7ff fbcd 	bl	8002e6c <__aeabi_ui2d>
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b45      	ldr	r3, [pc, #276]	@ (80037ec <bme280_compensate_data+0x480>)
 80036d6:	f7fe fd0b 	bl	80020f0 <__aeabi_dmul>
 80036da:	0032      	movs	r2, r6
 80036dc:	003b      	movs	r3, r7
 80036de:	f7fe fd07 	bl	80020f0 <__aeabi_dmul>
 80036e2:	2200      	movs	r2, #0
 80036e4:	4b37      	ldr	r3, [pc, #220]	@ (80037c4 <bme280_compensate_data+0x458>)
 80036e6:	f7fd fd47 	bl	8001178 <__aeabi_dadd>
 80036ea:	0004      	movs	r4, r0
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80036ec:	201f      	movs	r0, #31
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80036ee:	000d      	movs	r5, r1
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80036f0:	9b00      	ldr	r3, [sp, #0]
 80036f2:	3303      	adds	r3, #3
 80036f4:	5618      	ldrsb	r0, [r3, r0]
 80036f6:	f7ff fb8b 	bl	8002e10 <__aeabi_i2d>
 80036fa:	2200      	movs	r2, #0
 80036fc:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <bme280_compensate_data+0x480>)
 80036fe:	f7fe fcf7 	bl	80020f0 <__aeabi_dmul>
 8003702:	0032      	movs	r2, r6
 8003704:	003b      	movs	r3, r7
 8003706:	f7fe fcf3 	bl	80020f0 <__aeabi_dmul>
 800370a:	0022      	movs	r2, r4
 800370c:	002b      	movs	r3, r5
 800370e:	f7fe fcef 	bl	80020f0 <__aeabi_dmul>
 8003712:	2200      	movs	r2, #0
 8003714:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <bme280_compensate_data+0x458>)
 8003716:	f7fd fd2f 	bl	8001178 <__aeabi_dadd>
    var6 = var3 * var4 * (var5 * var6);
 800371a:	0022      	movs	r2, r4
 800371c:	002b      	movs	r3, r5
 800371e:	f7fe fce7 	bl	80020f0 <__aeabi_dmul>
    var3 = uncomp_data->humidity - var2;
 8003722:	9b02      	ldr	r3, [sp, #8]
    var6 = var3 * var4 * (var5 * var6);
 8003724:	9004      	str	r0, [sp, #16]
 8003726:	9105      	str	r1, [sp, #20]
    var3 = uncomp_data->humidity - var2;
 8003728:	6898      	ldr	r0, [r3, #8]
 800372a:	f7ff fb9f 	bl	8002e6c <__aeabi_ui2d>
 800372e:	9002      	str	r0, [sp, #8]
 8003730:	9103      	str	r1, [sp, #12]
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8003732:	9b00      	ldr	r3, [sp, #0]
 8003734:	2020      	movs	r0, #32
 8003736:	5e18      	ldrsh	r0, [r3, r0]
 8003738:	f7ff fb6a 	bl	8002e10 <__aeabi_i2d>
 800373c:	2200      	movs	r2, #0
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <bme280_compensate_data+0x434>)
 8003740:	f7fe fcd6 	bl	80020f0 <__aeabi_dmul>
 8003744:	0032      	movs	r2, r6
 8003746:	003b      	movs	r3, r7
 8003748:	f7fe fcd2 	bl	80020f0 <__aeabi_dmul>
 800374c:	9b00      	ldr	r3, [sp, #0]
 800374e:	0004      	movs	r4, r0
 8003750:	201e      	movs	r0, #30
 8003752:	5e18      	ldrsh	r0, [r3, r0]
 8003754:	000d      	movs	r5, r1
 8003756:	f7ff fb5b 	bl	8002e10 <__aeabi_i2d>
 800375a:	2200      	movs	r2, #0
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <bme280_compensate_data+0x484>)
 800375e:	f7fe fcc7 	bl	80020f0 <__aeabi_dmul>
 8003762:	0002      	movs	r2, r0
 8003764:	000b      	movs	r3, r1
 8003766:	0020      	movs	r0, r4
 8003768:	0029      	movs	r1, r5
 800376a:	f7fd fd05 	bl	8001178 <__aeabi_dadd>
 800376e:	0002      	movs	r2, r0
 8003770:	000b      	movs	r3, r1
    var3 = uncomp_data->humidity - var2;
 8003772:	9802      	ldr	r0, [sp, #8]
 8003774:	9903      	ldr	r1, [sp, #12]
 8003776:	f7fe ff87 	bl	8002688 <__aeabi_dsub>
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800377a:	9b00      	ldr	r3, [sp, #0]
    var3 = uncomp_data->humidity - var2;
 800377c:	0004      	movs	r4, r0
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800377e:	201a      	movs	r0, #26
 8003780:	5e18      	ldrsh	r0, [r3, r0]
    var3 = uncomp_data->humidity - var2;
 8003782:	000d      	movs	r5, r1
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8003784:	f7ff fb44 	bl	8002e10 <__aeabi_i2d>
 8003788:	2200      	movs	r2, #0
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <bme280_compensate_data+0x488>)
 800378c:	f7fe fcb0 	bl	80020f0 <__aeabi_dmul>
 8003790:	0002      	movs	r2, r0
 8003792:	000b      	movs	r3, r1
    var6 = var3 * var4 * (var5 * var6);
 8003794:	0020      	movs	r0, r4
 8003796:	0029      	movs	r1, r5
 8003798:	f7fe fcaa 	bl	80020f0 <__aeabi_dmul>
 800379c:	e02c      	b.n	80037f8 <bme280_compensate_data+0x48c>
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	3f100000 	.word	0x3f100000
 80037a4:	3f500000 	.word	0x3f500000
 80037a8:	3ee00000 	.word	0x3ee00000
 80037ac:	3f200000 	.word	0x3f200000
 80037b0:	40b40000 	.word	0x40b40000
 80037b4:	c0440000 	.word	0xc0440000
 80037b8:	40554000 	.word	0x40554000
 80037bc:	3fe00000 	.word	0x3fe00000
 80037c0:	40ef4000 	.word	0x40ef4000
 80037c4:	3ff00000 	.word	0x3ff00000
 80037c8:	3fd00000 	.word	0x3fd00000
 80037cc:	41300000 	.word	0x41300000
 80037d0:	40f00000 	.word	0x40f00000
 80037d4:	3f300000 	.word	0x3f300000
 80037d8:	40b86a00 	.word	0x40b86a00
 80037dc:	3fb00000 	.word	0x3fb00000
 80037e0:	40dd4c00 	.word	0x40dd4c00
 80037e4:	40fadb00 	.word	0x40fadb00
 80037e8:	40f2c000 	.word	0x40f2c000
 80037ec:	3e500000 	.word	0x3e500000
 80037f0:	40500000 	.word	0x40500000
 80037f4:	3ef00000 	.word	0x3ef00000
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	9b05      	ldr	r3, [sp, #20]
 80037fc:	f7fe fc78 	bl	80020f0 <__aeabi_dmul>
 8003800:	0004      	movs	r4, r0
 8003802:	000d      	movs	r5, r1
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8003804:	9b00      	ldr	r3, [sp, #0]
 8003806:	7e18      	ldrb	r0, [r3, #24]
 8003808:	f7ff fb30 	bl	8002e6c <__aeabi_ui2d>
 800380c:	0022      	movs	r2, r4
 800380e:	002b      	movs	r3, r5
 8003810:	f7fe fc6e 	bl	80020f0 <__aeabi_dmul>
 8003814:	23fb      	movs	r3, #251	@ 0xfb
 8003816:	2200      	movs	r2, #0
 8003818:	059b      	lsls	r3, r3, #22
 800381a:	f7fe fc69 	bl	80020f0 <__aeabi_dmul>
 800381e:	0002      	movs	r2, r0
 8003820:	000b      	movs	r3, r1
 8003822:	2000      	movs	r0, #0
 8003824:	4918      	ldr	r1, [pc, #96]	@ (8003888 <bme280_compensate_data+0x51c>)
 8003826:	f7fe ff2f 	bl	8002688 <__aeabi_dsub>
 800382a:	0022      	movs	r2, r4
 800382c:	002b      	movs	r3, r5
 800382e:	f7fe fc5f 	bl	80020f0 <__aeabi_dmul>
    if (humidity > humidity_max)
 8003832:	2200      	movs	r2, #0
 8003834:	4b15      	ldr	r3, [pc, #84]	@ (800388c <bme280_compensate_data+0x520>)
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8003836:	0004      	movs	r4, r0
 8003838:	000d      	movs	r5, r1
    if (humidity > humidity_max)
 800383a:	f7fd fc6b 	bl	8001114 <__aeabi_dcmpgt>
 800383e:	2800      	cmp	r0, #0
 8003840:	d116      	bne.n	8003870 <bme280_compensate_data+0x504>
    else if (humidity < humidity_min)
 8003842:	2200      	movs	r2, #0
 8003844:	2300      	movs	r3, #0
 8003846:	0020      	movs	r0, r4
 8003848:	0029      	movs	r1, r5
 800384a:	f7fd fc4f 	bl	80010ec <__aeabi_dcmplt>
 800384e:	2800      	cmp	r0, #0
 8003850:	d010      	beq.n	8003874 <bme280_compensate_data+0x508>
        humidity = humidity_min;
 8003852:	2400      	movs	r4, #0
 8003854:	2500      	movs	r5, #0
 8003856:	e00d      	b.n	8003874 <bme280_compensate_data+0x508>
        temperature = temperature_min;
 8003858:	2400      	movs	r4, #0
 800385a:	4d0d      	ldr	r5, [pc, #52]	@ (8003890 <bme280_compensate_data+0x524>)
 800385c:	e618      	b.n	8003490 <bme280_compensate_data+0x124>
        temperature = temperature_max;
 800385e:	2400      	movs	r4, #0
 8003860:	4d0c      	ldr	r5, [pc, #48]	@ (8003894 <bme280_compensate_data+0x528>)
 8003862:	e615      	b.n	8003490 <bme280_compensate_data+0x124>
        pressure = pressure_min;
 8003864:	2400      	movs	r4, #0
 8003866:	4d0c      	ldr	r5, [pc, #48]	@ (8003898 <bme280_compensate_data+0x52c>)
 8003868:	e71f      	b.n	80036aa <bme280_compensate_data+0x33e>
            pressure = pressure_max;
 800386a:	2400      	movs	r4, #0
 800386c:	4d0b      	ldr	r5, [pc, #44]	@ (800389c <bme280_compensate_data+0x530>)
 800386e:	e71c      	b.n	80036aa <bme280_compensate_data+0x33e>
        humidity = humidity_max;
 8003870:	2400      	movs	r4, #0
 8003872:	4d06      	ldr	r5, [pc, #24]	@ (800388c <bme280_compensate_data+0x520>)
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003874:	9b01      	ldr	r3, [sp, #4]
 8003876:	611c      	str	r4, [r3, #16]
 8003878:	615d      	str	r5, [r3, #20]
    int8_t rslt = BME280_OK;
 800387a:	2000      	movs	r0, #0
}
 800387c:	b00d      	add	sp, #52	@ 0x34
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR;
 8003880:	2001      	movs	r0, #1
 8003882:	4240      	negs	r0, r0
 8003884:	e7fa      	b.n	800387c <bme280_compensate_data+0x510>
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	3ff00000 	.word	0x3ff00000
 800388c:	40590000 	.word	0x40590000
 8003890:	c0440000 	.word	0xc0440000
 8003894:	40554000 	.word	0x40554000
 8003898:	40dd4c00 	.word	0x40dd4c00
 800389c:	40fadb00 	.word	0x40fadb00

080038a0 <bme280_get_sensor_data>:
{
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b087      	sub	sp, #28
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 80038a4:	ac01      	add	r4, sp, #4
{
 80038a6:	000e      	movs	r6, r1
 80038a8:	0007      	movs	r7, r0
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 80038aa:	2100      	movs	r1, #0
{
 80038ac:	0015      	movs	r5, r2
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 80038ae:	0020      	movs	r0, r4
 80038b0:	2208      	movs	r2, #8
 80038b2:	f7ff fb1d 	bl	8002ef0 <memset>
    struct bme280_uncomp_data uncomp_data = { 0 };
 80038b6:	220c      	movs	r2, #12
 80038b8:	2100      	movs	r1, #0
 80038ba:	a803      	add	r0, sp, #12
 80038bc:	f7ff fb18 	bl	8002ef0 <memset>
    if (comp_data != NULL)
 80038c0:	2e00      	cmp	r6, #0
 80038c2:	d026      	beq.n	8003912 <bme280_get_sensor_data+0x72>
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 80038c4:	002b      	movs	r3, r5
 80038c6:	2208      	movs	r2, #8
 80038c8:	0021      	movs	r1, r4
 80038ca:	20f7      	movs	r0, #247	@ 0xf7
 80038cc:	f7ff fd30 	bl	8003330 <bme280_get_regs>
        if (rslt == BME280_OK)
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d11c      	bne.n	800390e <bme280_get_sensor_data+0x6e>
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 80038d4:	7823      	ldrb	r3, [r4, #0]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 80038d6:	7862      	ldrb	r2, [r4, #1]
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 80038d8:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 80038da:	0112      	lsls	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80038dc:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 80038de:	78a2      	ldrb	r2, [r4, #2]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80038e0:	0038      	movs	r0, r7
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 80038e2:	0912      	lsrs	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80038e4:	4313      	orrs	r3, r2
 80038e6:	9303      	str	r3, [sp, #12]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 80038e8:	7922      	ldrb	r2, [r4, #4]
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 80038ea:	78e3      	ldrb	r3, [r4, #3]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 80038ec:	0112      	lsls	r2, r2, #4
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 80038ee:	031b      	lsls	r3, r3, #12
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80038f0:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 80038f2:	7962      	ldrb	r2, [r4, #5]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80038f4:	a903      	add	r1, sp, #12
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 80038f6:	0912      	lsrs	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80038f8:	4313      	orrs	r3, r2
 80038fa:	9304      	str	r3, [sp, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 80038fc:	88e3      	ldrh	r3, [r4, #6]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80038fe:	0032      	movs	r2, r6
    uncomp_data->humidity = data_msb | data_lsb;
 8003900:	ba5b      	rev16	r3, r3
 8003902:	b29b      	uxth	r3, r3
 8003904:	9305      	str	r3, [sp, #20]
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003906:	002b      	movs	r3, r5
 8003908:	3318      	adds	r3, #24
 800390a:	f7ff fd2f 	bl	800336c <bme280_compensate_data>
}
 800390e:	b007      	add	sp, #28
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BME280_E_NULL_PTR;
 8003912:	2001      	movs	r0, #1
 8003914:	4240      	negs	r0, r0
 8003916:	e7fa      	b.n	800390e <bme280_get_sensor_data+0x6e>

08003918 <delay_microseconds>:
/**
 * @brief  Delay function for BME280 drivers.
 * @param  usec: specifies the delay time length, in 1 microsecond.
 * @retval None
 */
void __attribute__((optimize("O0"))) delay_microseconds(uint32_t usec, void *intf_ptr){
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  for(volatile uint32_t counter = 0; counter < usec; counter++){
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e024      	b.n	8003972 <delay_microseconds+0x5a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003928:	46c0      	nop			@ (mov r8, r8)
}
 800392a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 800392c:	46c0      	nop			@ (mov r8, r8)
}
 800392e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003930:	46c0      	nop			@ (mov r8, r8)
}
 8003932:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003934:	46c0      	nop			@ (mov r8, r8)
}
 8003936:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003938:	46c0      	nop			@ (mov r8, r8)
}
 800393a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 800393c:	46c0      	nop			@ (mov r8, r8)
}
 800393e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003940:	46c0      	nop			@ (mov r8, r8)
}
 8003942:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003944:	46c0      	nop			@ (mov r8, r8)
}
 8003946:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003948:	46c0      	nop			@ (mov r8, r8)
}
 800394a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 800394c:	46c0      	nop			@ (mov r8, r8)
}
 800394e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003950:	46c0      	nop			@ (mov r8, r8)
}
 8003952:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003954:	46c0      	nop			@ (mov r8, r8)
}
 8003956:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003958:	46c0      	nop			@ (mov r8, r8)
}
 800395a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 800395c:	46c0      	nop			@ (mov r8, r8)
}
 800395e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003960:	46c0      	nop			@ (mov r8, r8)
}
 8003962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003964:	46c0      	nop			@ (mov r8, r8)
}
 8003966:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("nop");
 8003968:	46c0      	nop			@ (mov r8, r8)
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d8d6      	bhi.n	8003928 <delay_microseconds+0x10>
    __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
    __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();
    __NOP();__NOP();__NOP();__NOP();__NOP();
    // this is nearly perfect timing
  }
}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}

08003984 <set_nrf24_SPI_CSN.part.0>:
 * @brief  Enables the CSN pin for the NRF24LO1+ module. Active low
 * @retval None
 */
void set_nrf24_SPI_CSN(uint8_t input){
  if(input == 1){
    GPIO_SetBits(GPIOA, GPIO_Pin_15);
 8003984:	2180      	movs	r1, #128	@ 0x80
 8003986:	2090      	movs	r0, #144	@ 0x90
void set_nrf24_SPI_CSN(uint8_t input){
 8003988:	b510      	push	{r4, lr}
    GPIO_SetBits(GPIOA, GPIO_Pin_15);
 800398a:	0209      	lsls	r1, r1, #8
 800398c:	05c0      	lsls	r0, r0, #23
 800398e:	f7fc fce7 	bl	8000360 <GPIO_SetBits>
  }
  else{
    GPIO_ResetBits(GPIOA, GPIO_Pin_15);
  }
}
 8003992:	bd10      	pop	{r4, pc}

08003994 <get_sensor_reading>:
struct bme280_data get_sensor_reading(){
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	0004      	movs	r4, r0
  bme280_get_sensor_data(BME280_ALL, &bme280_datastruct, &bme280_initparam);
 8003998:	4d06      	ldr	r5, [pc, #24]	@ (80039b4 <get_sensor_reading+0x20>)
 800399a:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <get_sensor_reading+0x24>)
 800399c:	0029      	movs	r1, r5
 800399e:	2007      	movs	r0, #7
 80039a0:	f7ff ff7e 	bl	80038a0 <bme280_get_sensor_data>
  return bme280_datastruct;
 80039a4:	0029      	movs	r1, r5
 80039a6:	2218      	movs	r2, #24
 80039a8:	0020      	movs	r0, r4
 80039aa:	f7ff faf5 	bl	8002f98 <memcpy>
}
 80039ae:	0020      	movs	r0, r4
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	20000040 	.word	0x20000040
 80039b8:	20000058 	.word	0x20000058

080039bc <display_sensor_reading>:
void display_sensor_reading(){
 80039bc:	b510      	push	{r4, lr}
 80039be:	b098      	sub	sp, #96	@ 0x60
  struct bme280_data bme280_datastruct = get_sensor_reading();
 80039c0:	4668      	mov	r0, sp
 80039c2:	f7ff ffe7 	bl	8003994 <get_sensor_reading>
  send_string(itoa((int)(bme280_datastruct.temperature), num_buf, 10));
 80039c6:	9802      	ldr	r0, [sp, #8]
 80039c8:	9903      	ldr	r1, [sp, #12]
 80039ca:	f7ff f9e5 	bl	8002d98 <__aeabi_d2iz>
 80039ce:	220a      	movs	r2, #10
 80039d0:	a907      	add	r1, sp, #28
 80039d2:	f7ff fb8c 	bl	80030ee <itoa>
 80039d6:	f7ff fbbb 	bl	8003150 <send_string>
  send_stringln(" C");
 80039da:	4c12      	ldr	r4, [pc, #72]	@ (8003a24 <display_sensor_reading+0x68>)
 80039dc:	0020      	movs	r0, r4
 80039de:	f7ff fbd1 	bl	8003184 <send_stringln>
  send_string(itoa((int)(bme280_datastruct.pressure), num_buf, 10));
 80039e2:	9800      	ldr	r0, [sp, #0]
 80039e4:	9901      	ldr	r1, [sp, #4]
 80039e6:	f7ff f9d7 	bl	8002d98 <__aeabi_d2iz>
 80039ea:	220a      	movs	r2, #10
 80039ec:	a907      	add	r1, sp, #28
 80039ee:	f7ff fb7e 	bl	80030ee <itoa>
 80039f2:	f7ff fbad 	bl	8003150 <send_string>
  send_stringln(" Pa");
 80039f6:	1ce0      	adds	r0, r4, #3
 80039f8:	f7ff fbc4 	bl	8003184 <send_stringln>
  send_string(itoa((int)(bme280_datastruct.humidity), num_buf, 10));
 80039fc:	9804      	ldr	r0, [sp, #16]
 80039fe:	9905      	ldr	r1, [sp, #20]
 8003a00:	f7ff f9ca 	bl	8002d98 <__aeabi_d2iz>
 8003a04:	220a      	movs	r2, #10
 8003a06:	a907      	add	r1, sp, #28
 8003a08:	f7ff fb71 	bl	80030ee <itoa>
 8003a0c:	f7ff fba0 	bl	8003150 <send_string>
  send_stringln(" %");
 8003a10:	1de0      	adds	r0, r4, #7
 8003a12:	f7ff fbb7 	bl	8003184 <send_stringln>
  send_stringln("");
 8003a16:	0020      	movs	r0, r4
 8003a18:	300a      	adds	r0, #10
 8003a1a:	f7ff fbb3 	bl	8003184 <send_stringln>
}
 8003a1e:	b018      	add	sp, #96	@ 0x60
 8003a20:	bd10      	pop	{r4, pc}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	08003f4a 	.word	0x08003f4a

08003a28 <return_sensor_reading>:
struct ambient_reading return_sensor_reading(){
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	0004      	movs	r4, r0
  struct bme280_data bme280_datastruct = get_sensor_reading();
 8003a2e:	4668      	mov	r0, sp
 8003a30:	f7ff ffb0 	bl	8003994 <get_sensor_reading>
  current_readings.pressure = (uint32_t)(bme280_datastruct.pressure);
 8003a34:	9800      	ldr	r0, [sp, #0]
 8003a36:	9901      	ldr	r1, [sp, #4]
 8003a38:	f7fd fb80 	bl	800113c <__aeabi_d2uiz>
 8003a3c:	0006      	movs	r6, r0
  current_readings.humidity = (uint32_t)(bme280_datastruct.humidity);
 8003a3e:	9804      	ldr	r0, [sp, #16]
 8003a40:	9905      	ldr	r1, [sp, #20]
 8003a42:	f7fd fb7b 	bl	800113c <__aeabi_d2uiz>
 8003a46:	0005      	movs	r5, r0
  current_readings.temperature = (uint32_t)(bme280_datastruct.temperature);
 8003a48:	9802      	ldr	r0, [sp, #8]
 8003a4a:	9903      	ldr	r1, [sp, #12]
 8003a4c:	f7fd fb76 	bl	800113c <__aeabi_d2uiz>
  return current_readings;
 8003a50:	2303      	movs	r3, #3
  current_readings.temperature = (uint32_t)(bme280_datastruct.temperature);
 8003a52:	6020      	str	r0, [r4, #0]
}
 8003a54:	0020      	movs	r0, r4
  return current_readings;
 8003a56:	6066      	str	r6, [r4, #4]
 8003a58:	60a5      	str	r5, [r4, #8]
 8003a5a:	7323      	strb	r3, [r4, #12]
}
 8003a5c:	b006      	add	sp, #24
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}

08003a60 <HBridge_Peripherals_Init>:
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_3 | GPIO_Pin_4;
 8003a60:	2378      	movs	r3, #120	@ 0x78
void HBridge_Peripherals_Init(){
 8003a62:	b510      	push	{r4, lr}
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003a64:	4c0c      	ldr	r4, [pc, #48]	@ (8003a98 <HBridge_Peripherals_Init+0x38>)
void HBridge_Peripherals_Init(){
 8003a66:	b086      	sub	sp, #24
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a68:	4669      	mov	r1, sp
 8003a6a:	480c      	ldr	r0, [pc, #48]	@ (8003a9c <HBridge_Peripherals_Init+0x3c>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_3 | GPIO_Pin_4;
 8003a6c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003a6e:	9401      	str	r4, [sp, #4]
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f7fc fbf0 	bl	8000254 <GPIO_Init>
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_11;
 8003a74:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(GPIOC, &GPIO_InitStruct2);
 8003a76:	a902      	add	r1, sp, #8
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_11;
 8003a78:	011b      	lsls	r3, r3, #4
  GPIO_Init(GPIOC, &GPIO_InitStruct2);
 8003a7a:	4809      	ldr	r0, [pc, #36]	@ (8003aa0 <HBridge_Peripherals_Init+0x40>)
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_11;
 8003a7c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct2.GPIO_Mode = GPIO_Mode_OUT;
 8003a7e:	9403      	str	r4, [sp, #12]
  GPIO_Init(GPIOC, &GPIO_InitStruct2);
 8003a80:	f7fc fbe8 	bl	8000254 <GPIO_Init>
  GPIO_InitStruct3.GPIO_Pin = GPIO_Pin_2;
 8003a84:	2304      	movs	r3, #4
  GPIO_Init(GPIOD, &GPIO_InitStruct3);
 8003a86:	4807      	ldr	r0, [pc, #28]	@ (8003aa4 <HBridge_Peripherals_Init+0x44>)
 8003a88:	a904      	add	r1, sp, #16
  GPIO_InitStruct3.GPIO_Pin = GPIO_Pin_2;
 8003a8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct3.GPIO_Mode = GPIO_Mode_OUT;
 8003a8c:	9405      	str	r4, [sp, #20]
  GPIO_Init(GPIOD, &GPIO_InitStruct3);
 8003a8e:	f7fc fbe1 	bl	8000254 <GPIO_Init>
}
 8003a92:	b006      	add	sp, #24
 8003a94:	bd10      	pop	{r4, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	02000301 	.word	0x02000301
 8003a9c:	48000400 	.word	0x48000400
 8003aa0:	48000800 	.word	0x48000800
 8003aa4:	48000c00 	.word	0x48000c00

08003aa8 <Servo_Peripherals_Init>:
void Servo_Peripherals_Init(){
 8003aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE); // enable clocks for GPIO peripheral
 8003aaa:	2080      	movs	r0, #128	@ 0x80
 8003aac:	2101      	movs	r1, #1
 8003aae:	02c0      	lsls	r0, r0, #11
 8003ab0:	f7fc fe7c 	bl	80007ac <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8003ab4:	2080      	movs	r0, #128	@ 0x80
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	0300      	lsls	r0, r0, #12
 8003aba:	f7fc fe77 	bl	80007ac <RCC_AHBPeriphClockCmd>
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8003abe:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003ac0:	4c08      	ldr	r4, [pc, #32]	@ (8003ae4 <Servo_Peripherals_Init+0x3c>)
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac2:	4669      	mov	r1, sp
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8003ac4:	019b      	lsls	r3, r3, #6
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac6:	4808      	ldr	r0, [pc, #32]	@ (8003ae8 <Servo_Peripherals_Init+0x40>)
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8003ac8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8003aca:	9401      	str	r4, [sp, #4]
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003acc:	f7fc fbc2 	bl	8000254 <GPIO_Init>
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_12;
 8003ad0:	2380      	movs	r3, #128	@ 0x80
  GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8003ad2:	4806      	ldr	r0, [pc, #24]	@ (8003aec <Servo_Peripherals_Init+0x44>)
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_12;
 8003ad4:	015b      	lsls	r3, r3, #5
  GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8003ad6:	a902      	add	r1, sp, #8
  GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_12;
 8003ad8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct2.GPIO_Mode = GPIO_Mode_OUT;
 8003ada:	9403      	str	r4, [sp, #12]
  GPIO_Init(GPIOB, &GPIO_InitStruct2);
 8003adc:	f7fc fbba 	bl	8000254 <GPIO_Init>
}
 8003ae0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	02000301 	.word	0x02000301
 8003ae8:	48000800 	.word	0x48000800
 8003aec:	48000400 	.word	0x48000400

08003af0 <DriveServoControl>:
void DriveServoControl(uint8_t angle){ 
 8003af0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_SetBits(GPIOB, GPIO_Pin_12); // Turn on test diode to confirm setup function worked
 8003af2:	2180      	movs	r1, #128	@ 0x80
    time_on = 800 + angle * 500; // in microseconds
 8003af4:	24fa      	movs	r4, #250	@ 0xfa
void DriveServoControl(uint8_t angle){ 
 8003af6:	0005      	movs	r5, r0
  GPIO_SetBits(GPIOB, GPIO_Pin_12); // Turn on test diode to confirm setup function worked
 8003af8:	0149      	lsls	r1, r1, #5
 8003afa:	4811      	ldr	r0, [pc, #68]	@ (8003b40 <DriveServoControl+0x50>)
 8003afc:	f7fc fc30 	bl	8000360 <GPIO_SetBits>
    time_on = 800 + angle * 500; // in microseconds
 8003b00:	23c8      	movs	r3, #200	@ 0xc8
 8003b02:	0064      	lsls	r4, r4, #1
 8003b04:	436c      	muls	r4, r5
    delay_microseconds(20000 - time_on, NULL);
 8003b06:	4e0f      	ldr	r6, [pc, #60]	@ (8003b44 <DriveServoControl+0x54>)
    time_on = 800 + angle * 500; // in microseconds
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	18e4      	adds	r4, r4, r3
    delay_microseconds(20000 - time_on, NULL);
 8003b0c:	1b33      	subs	r3, r6, r4
    GPIO_SetBits(GPIOC, GPIO_Pin_13); // Servo uses PWM to control angle of arm
 8003b0e:	2680      	movs	r6, #128	@ 0x80
    delay_microseconds(20000 - time_on, NULL);
 8003b10:	4d0d      	ldr	r5, [pc, #52]	@ (8003b48 <DriveServoControl+0x58>)
 8003b12:	9301      	str	r3, [sp, #4]
    GPIO_SetBits(GPIOC, GPIO_Pin_13); // Servo uses PWM to control angle of arm
 8003b14:	01b6      	lsls	r6, r6, #6
 8003b16:	0031      	movs	r1, r6
 8003b18:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <DriveServoControl+0x5c>)
 8003b1a:	f7fc fc21 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(time_on, NULL); // exceeds 1000 or 1500 ms (45-90 degree angle for servo arm) as specified to ensure motor operates
 8003b1e:	2100      	movs	r1, #0
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7ff fef9 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8003b26:	0031      	movs	r1, r6
 8003b28:	4808      	ldr	r0, [pc, #32]	@ (8003b4c <DriveServoControl+0x5c>)
 8003b2a:	f7fc fc1b 	bl	8000364 <GPIO_ResetBits>
  for(int i = 0; i < 6000; i++){ // TODO test how fast loaded arm moves, unloaded arm is rated to move at 0.09 s + 0.01 s/60 degrees at 4.8 V so I gave it 150 ms here
 8003b2e:	3d01      	subs	r5, #1
    delay_microseconds(20000 - time_on, NULL);
 8003b30:	2100      	movs	r1, #0
 8003b32:	9801      	ldr	r0, [sp, #4]
 8003b34:	f7ff fef0 	bl	8003918 <delay_microseconds>
  for(int i = 0; i < 6000; i++){ // TODO test how fast loaded arm moves, unloaded arm is rated to move at 0.09 s + 0.01 s/60 degrees at 4.8 V so I gave it 150 ms here
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	d1ec      	bne.n	8003b16 <DriveServoControl+0x26>
}
 8003b3c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	48000400 	.word	0x48000400
 8003b44:	00004e20 	.word	0x00004e20
 8003b48:	00001770 	.word	0x00001770
 8003b4c:	48000800 	.word	0x48000800

08003b50 <DriveACMotorVoltageController>:
void DriveACMotorVoltageController(uint32_t Period){
 8003b50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t halfPeriod = Period/2;
 8003b52:	0843      	lsrs	r3, r0, #1
  uint32_t thirdPeriod = Period/3;
 8003b54:	2103      	movs	r1, #3
void DriveACMotorVoltageController(uint32_t Period){
 8003b56:	0004      	movs	r4, r0
  uint32_t halfPeriod = Period/2;
 8003b58:	9303      	str	r3, [sp, #12]
  uint32_t thirdPeriod = Period/3;
 8003b5a:	f7fd f93b 	bl	8000dd4 <__udivsi3>
  uint32_t sixthPeriod = Period/6;
 8003b5e:	2106      	movs	r1, #6
  uint32_t thirdPeriod = Period/3;
 8003b60:	0006      	movs	r6, r0
  uint32_t sixthPeriod = Period/6;
 8003b62:	0020      	movs	r0, r4
 8003b64:	f7fd f936 	bl	8000dd4 <__udivsi3>
    delay_microseconds(2*thirdPeriod - halfPeriod, NULL); // 2/3 period elapsed
 8003b68:	0073      	lsls	r3, r6, #1
 8003b6a:	0862      	lsrs	r2, r4, #1
    delay_microseconds(Period-(sixthPeriod+2*thirdPeriod), NULL); // Full period elapsed
 8003b6c:	1a24      	subs	r4, r4, r0
    delay_microseconds(2*thirdPeriod - halfPeriod, NULL); // 2/3 period elapsed
 8003b6e:	1a9a      	subs	r2, r3, r2
    delay_microseconds(Period-(sixthPeriod+2*thirdPeriod), NULL); // Full period elapsed
 8003b70:	1ae3      	subs	r3, r4, r3
    GPIO_SetBits(GPIOC, GPIO_Pin_11); // S6 on
 8003b72:	2480      	movs	r4, #128	@ 0x80
  uint32_t sixthPeriod = Period/6;
 8003b74:	0005      	movs	r5, r0
    delay_microseconds(2*thirdPeriod - halfPeriod, NULL); // 2/3 period elapsed
 8003b76:	9201      	str	r2, [sp, #4]
    delay_microseconds(Period-(sixthPeriod+2*thirdPeriod), NULL); // Full period elapsed
 8003b78:	9302      	str	r3, [sp, #8]
    GPIO_SetBits(GPIOC, GPIO_Pin_11); // S6 on
 8003b7a:	0124      	lsls	r4, r4, #4
    GPIO_SetBits(GPIOB, GPIO_Pin_6); // S1 on
 8003b7c:	2140      	movs	r1, #64	@ 0x40
 8003b7e:	4824      	ldr	r0, [pc, #144]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003b80:	f7fc fbee 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(sixthPeriod, NULL); // 1/6 period elapsed 
 8003b84:	0028      	movs	r0, r5
 8003b86:	2100      	movs	r1, #0
 8003b88:	f7ff fec6 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOD, GPIO_Pin_2); // S5 off
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	4821      	ldr	r0, [pc, #132]	@ (8003c14 <DriveACMotorVoltageController+0xc4>)
 8003b90:	f7fc fbe8 	bl	8000364 <GPIO_ResetBits>
    GPIO_SetBits(GPIOC, GPIO_Pin_11); // S6 on
 8003b94:	0021      	movs	r1, r4
 8003b96:	4820      	ldr	r0, [pc, #128]	@ (8003c18 <DriveACMotorVoltageController+0xc8>)
 8003b98:	f7fc fbe2 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(thirdPeriod-sixthPeriod, NULL); // 1/3 period elapsed (delay timings are computed like this to avoid rounding errors from integer division truncations)
 8003b9c:	1b70      	subs	r0, r6, r5
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f7ff feba 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOB, GPIO_Pin_3); // S4 off
 8003ba4:	2108      	movs	r1, #8
 8003ba6:	481a      	ldr	r0, [pc, #104]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003ba8:	f7fc fbdc 	bl	8000364 <GPIO_ResetBits>
    GPIO_SetBits(GPIOB, GPIO_Pin_4); // S3 on
 8003bac:	2110      	movs	r1, #16
 8003bae:	4818      	ldr	r0, [pc, #96]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003bb0:	f7fc fbd6 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(halfPeriod - thirdPeriod, NULL); // 1/2 period elapsed
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	1b98      	subs	r0, r3, r6
 8003bba:	f7ff fead 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOB, GPIO_Pin_6); // S1 off
 8003bbe:	2140      	movs	r1, #64	@ 0x40
 8003bc0:	4813      	ldr	r0, [pc, #76]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003bc2:	f7fc fbcf 	bl	8000364 <GPIO_ResetBits>
    GPIO_SetBits(GPIOB, GPIO_Pin_5); // S2 on
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	4811      	ldr	r0, [pc, #68]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003bca:	f7fc fbc9 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(2*thirdPeriod - halfPeriod, NULL); // 2/3 period elapsed
 8003bce:	9801      	ldr	r0, [sp, #4]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f7ff fea1 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOC, GPIO_Pin_11); // S6 off
 8003bd6:	0021      	movs	r1, r4
 8003bd8:	480f      	ldr	r0, [pc, #60]	@ (8003c18 <DriveACMotorVoltageController+0xc8>)
 8003bda:	f7fc fbc3 	bl	8000364 <GPIO_ResetBits>
    GPIO_SetBits(GPIOD, GPIO_Pin_2); // S5 on
 8003bde:	2104      	movs	r1, #4
 8003be0:	480c      	ldr	r0, [pc, #48]	@ (8003c14 <DriveACMotorVoltageController+0xc4>)
 8003be2:	f7fc fbbd 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(sixthPeriod, NULL); // 5/6 period elapsed
 8003be6:	0028      	movs	r0, r5
 8003be8:	2100      	movs	r1, #0
 8003bea:	f7ff fe95 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOB, GPIO_Pin_4); // S3 off
 8003bee:	2110      	movs	r1, #16
 8003bf0:	4807      	ldr	r0, [pc, #28]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003bf2:	f7fc fbb7 	bl	8000364 <GPIO_ResetBits>
    GPIO_SetBits(GPIOB, GPIO_Pin_3); // S4 on
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	4805      	ldr	r0, [pc, #20]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003bfa:	f7fc fbb1 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(Period-(sixthPeriod+2*thirdPeriod), NULL); // Full period elapsed
 8003bfe:	9802      	ldr	r0, [sp, #8]
 8003c00:	2100      	movs	r1, #0
 8003c02:	f7ff fe89 	bl	8003918 <delay_microseconds>
    GPIO_ResetBits(GPIOB, GPIO_Pin_5); // S2 off
 8003c06:	2120      	movs	r1, #32
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <DriveACMotorVoltageController+0xc0>)
 8003c0a:	f7fc fbab 	bl	8000364 <GPIO_ResetBits>
  while(TRUE){ // TODO test if there should be a time delay between S1 turning off and S2 turning on and vice versa (there should be a GPIO pin voltage rise and fall time of 125 ns max)
 8003c0e:	e7b5      	b.n	8003b7c <DriveACMotorVoltageController+0x2c>
 8003c10:	48000400 	.word	0x48000400
 8003c14:	48000c00 	.word	0x48000c00
 8003c18:	48000800 	.word	0x48000800

08003c1c <set_nrf24_SPI_CSN>:
void set_nrf24_SPI_CSN(uint8_t input){
 8003c1c:	b510      	push	{r4, lr}
  if(input == 1){
 8003c1e:	2801      	cmp	r0, #1
 8003c20:	d102      	bne.n	8003c28 <set_nrf24_SPI_CSN+0xc>
 8003c22:	f7ff feaf 	bl	8003984 <set_nrf24_SPI_CSN.part.0>
}
 8003c26:	bd10      	pop	{r4, pc}
    GPIO_ResetBits(GPIOA, GPIO_Pin_15);
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	2090      	movs	r0, #144	@ 0x90
 8003c2c:	0209      	lsls	r1, r1, #8
 8003c2e:	05c0      	lsls	r0, r0, #23
 8003c30:	f7fc fb98 	bl	8000364 <GPIO_ResetBits>
}
 8003c34:	e7f7      	b.n	8003c26 <set_nrf24_SPI_CSN+0xa>
	...

08003c38 <nrf24_write_register>:
void nrf24_write_register(uint8_t reg, uint8_t value) {
 8003c38:	b570      	push	{r4, r5, r6, lr}
    txData[0] = reg | WRITE_COMMAND; // Write command
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <nrf24_write_register+0x34>)
void nrf24_write_register(uint8_t reg, uint8_t value) {
 8003c3c:	000c      	movs	r4, r1
    txData[0] = reg | WRITE_COMMAND; // Write command
 8003c3e:	781d      	ldrb	r5, [r3, #0]
 8003c40:	4305      	orrs	r5, r0
    set_nrf24_SPI_CSN(0);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7ff ffea 	bl	8003c1c <set_nrf24_SPI_CSN>
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003c48:	2101      	movs	r1, #1
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <nrf24_write_register+0x38>)
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <nrf24_write_register+0x3c>)
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003c4e:	7015      	strb	r5, [r2, #0]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003c50:	8918      	ldrh	r0, [r3, #8]
 8003c52:	4208      	tst	r0, r1
 8003c54:	d0fc      	beq.n	8003c50 <nrf24_write_register+0x18>
        (void)SPI1->DR; 
 8003c56:	8999      	ldrh	r1, [r3, #12]
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003c58:	7014      	strb	r4, [r2, #0]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	8919      	ldrh	r1, [r3, #8]
 8003c5e:	4211      	tst	r1, r2
 8003c60:	d0fc      	beq.n	8003c5c <nrf24_write_register+0x24>
        (void)SPI1->DR; 
 8003c62:	899b      	ldrh	r3, [r3, #12]
  if(input == 1){
 8003c64:	f7ff fe8e 	bl	8003984 <set_nrf24_SPI_CSN.part.0>
}
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	2000000e 	.word	0x2000000e
 8003c70:	4001300c 	.word	0x4001300c
 8003c74:	40013000 	.word	0x40013000

08003c78 <nrf24_multiwrite_register>:
void nrf24_multiwrite_register(uint8_t reg, uint8_t *values, uint8_t num_bytes) {
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t txData[num_bytes+1]; // Transmit data buffer
 8003c7a:	0013      	movs	r3, r2
void nrf24_multiwrite_register(uint8_t reg, uint8_t *values, uint8_t num_bytes) {
 8003c7c:	0014      	movs	r4, r2
    uint8_t txData[num_bytes+1]; // Transmit data buffer
 8003c7e:	466a      	mov	r2, sp
 8003c80:	3308      	adds	r3, #8
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1ad3      	subs	r3, r2, r3
void nrf24_multiwrite_register(uint8_t reg, uint8_t *values, uint8_t num_bytes) {
 8003c88:	af00      	add	r7, sp, #0
    uint8_t txData[num_bytes+1]; // Transmit data buffer
 8003c8a:	469d      	mov	sp, r3
 8003c8c:	466d      	mov	r5, sp
    txData[0] = reg | WRITE_COMMAND; // Write command
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <nrf24_multiwrite_register+0x50>)
    memcpy(&txData[1], values, num_bytes); // Copy data to write into buffer
 8003c90:	0022      	movs	r2, r4
    txData[0] = reg | WRITE_COMMAND; // Write command
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4318      	orrs	r0, r3
 8003c96:	7028      	strb	r0, [r5, #0]
    memcpy(&txData[1], values, num_bytes); // Copy data to write into buffer
 8003c98:	1c68      	adds	r0, r5, #1
 8003c9a:	f7ff f97d 	bl	8002f98 <memcpy>
    set_nrf24_SPI_CSN(0);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7ff ffbc 	bl	8003c1c <set_nrf24_SPI_CSN>
    for (int i = 0; i < num_bytes+1; i++) {
 8003ca4:	2300      	movs	r3, #0
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003ca6:	2001      	movs	r0, #1
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003ca8:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <nrf24_multiwrite_register+0x54>)
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <nrf24_multiwrite_register+0x58>)
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003cac:	5cee      	ldrb	r6, [r5, r3]
 8003cae:	700e      	strb	r6, [r1, #0]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003cb0:	8916      	ldrh	r6, [r2, #8]
 8003cb2:	4206      	tst	r6, r0
 8003cb4:	d0fc      	beq.n	8003cb0 <nrf24_multiwrite_register+0x38>
    for (int i = 0; i < num_bytes+1; i++) {
 8003cb6:	3301      	adds	r3, #1
        (void)SPI1->DR; 
 8003cb8:	8996      	ldrh	r6, [r2, #12]
    for (int i = 0; i < num_bytes+1; i++) {
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	daf6      	bge.n	8003cac <nrf24_multiwrite_register+0x34>
  if(input == 1){
 8003cbe:	f7ff fe61 	bl	8003984 <set_nrf24_SPI_CSN.part.0>
}
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	2000000e 	.word	0x2000000e
 8003ccc:	4001300c 	.word	0x4001300c
 8003cd0:	40013000 	.word	0x40013000

08003cd4 <nrf24_write_TX_payload>:
void nrf24_write_TX_payload(uint8_t * value, int ack, int len) {
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	0003      	movs	r3, r0
    uint8_t txData[len+1]; // Transmit data buffer
 8003cd8:	4668      	mov	r0, sp
void nrf24_write_TX_payload(uint8_t * value, int ack, int len) {
 8003cda:	0014      	movs	r4, r2
    uint8_t txData[len+1]; // Transmit data buffer
 8003cdc:	3208      	adds	r2, #8
 8003cde:	08d2      	lsrs	r2, r2, #3
 8003ce0:	00d2      	lsls	r2, r2, #3
 8003ce2:	1a82      	subs	r2, r0, r2
void nrf24_write_TX_payload(uint8_t * value, int ack, int len) {
 8003ce4:	af00      	add	r7, sp, #0
    uint8_t txData[len+1]; // Transmit data buffer
 8003ce6:	4695      	mov	sp, r2
    txData[0] = ack ?  WRITE_PAYLOAD_COMMAND: WRITE_PAYLOAD_NOACK; // Write command
 8003ce8:	4a13      	ldr	r2, [pc, #76]	@ (8003d38 <nrf24_write_TX_payload+0x64>)
    uint8_t txData[len+1]; // Transmit data buffer
 8003cea:	466d      	mov	r5, sp
    txData[0] = ack ?  WRITE_PAYLOAD_COMMAND: WRITE_PAYLOAD_NOACK; // Write command
 8003cec:	2900      	cmp	r1, #0
 8003cee:	d100      	bne.n	8003cf2 <nrf24_write_TX_payload+0x1e>
 8003cf0:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <nrf24_write_TX_payload+0x68>)
 8003cf2:	7812      	ldrb	r2, [r2, #0]
        txData[i+1] = value[i];
 8003cf4:	0019      	movs	r1, r3
    txData[0] = ack ?  WRITE_PAYLOAD_COMMAND: WRITE_PAYLOAD_NOACK; // Write command
 8003cf6:	702a      	strb	r2, [r5, #0]
        txData[i+1] = value[i];
 8003cf8:	43e2      	mvns	r2, r4
 8003cfa:	17d2      	asrs	r2, r2, #31
 8003cfc:	4022      	ands	r2, r4
 8003cfe:	1c68      	adds	r0, r5, #1
 8003d00:	f7ff f94a 	bl	8002f98 <memcpy>
    set_nrf24_SPI_CSN(0);
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7ff ff89 	bl	8003c1c <set_nrf24_SPI_CSN>
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003d0a:	2601      	movs	r6, #1
    for (int i = 0; i < (len+1); i++) {
 8003d0c:	2300      	movs	r3, #0
        while (!(SPI1->SR & SPI_SR_TXE)); 
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d40 <nrf24_write_TX_payload+0x6c>)
    for (int i = 0; i < (len+1); i++) {
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	dd03      	ble.n	8003d1c <nrf24_write_TX_payload+0x48>
  if(input == 1){
 8003d14:	f7ff fe36 	bl	8003984 <set_nrf24_SPI_CSN.part.0>
}
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        while (!(SPI1->SR & SPI_SR_TXE)); 
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	8911      	ldrh	r1, [r2, #8]
 8003d20:	4201      	tst	r1, r0
 8003d22:	d0fb      	beq.n	8003d1c <nrf24_write_TX_payload+0x48>
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003d24:	5ce9      	ldrb	r1, [r5, r3]
 8003d26:	4807      	ldr	r0, [pc, #28]	@ (8003d44 <nrf24_write_TX_payload+0x70>)
 8003d28:	7001      	strb	r1, [r0, #0]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003d2a:	8911      	ldrh	r1, [r2, #8]
 8003d2c:	4231      	tst	r1, r6
 8003d2e:	d0fc      	beq.n	8003d2a <nrf24_write_TX_payload+0x56>
        (void)SPI1->DR; 
 8003d30:	8991      	ldrh	r1, [r2, #12]
    for (int i = 0; i < (len+1); i++) {
 8003d32:	3301      	adds	r3, #1
 8003d34:	e7ec      	b.n	8003d10 <nrf24_write_TX_payload+0x3c>
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	2000000d 	.word	0x2000000d
 8003d3c:	2000000c 	.word	0x2000000c
 8003d40:	40013000 	.word	0x40013000
 8003d44:	4001300c 	.word	0x4001300c

08003d48 <nrf24_clear_TX>:
void nrf24_clear_TX(){
 8003d48:	b510      	push	{r4, lr}
    txData[0] = FLUSH_TX; // Write command
 8003d4a:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <nrf24_clear_TX+0x24>)
    set_nrf24_SPI_CSN(0);
 8003d4c:	2000      	movs	r0, #0
    txData[0] = FLUSH_TX; // Write command
 8003d4e:	781c      	ldrb	r4, [r3, #0]
    set_nrf24_SPI_CSN(0);
 8003d50:	f7ff ff64 	bl	8003c1c <set_nrf24_SPI_CSN>
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003d54:	2201      	movs	r2, #1
        *(__IO uint8_t*)(&SPI1->DR) = txData[i]; 
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <nrf24_clear_TX+0x28>)
 8003d58:	701c      	strb	r4, [r3, #0]
        while (!(SPI1->SR & SPI_SR_RXNE)); // Wait until receive buffer is not empty
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <nrf24_clear_TX+0x2c>)
 8003d5c:	8919      	ldrh	r1, [r3, #8]
 8003d5e:	4211      	tst	r1, r2
 8003d60:	d0fc      	beq.n	8003d5c <nrf24_clear_TX+0x14>
        (void)SPI1->DR; 
 8003d62:	899b      	ldrh	r3, [r3, #12]
  if(input == 1){
 8003d64:	f7ff fe0e 	bl	8003984 <set_nrf24_SPI_CSN.part.0>
}
 8003d68:	bd10      	pop	{r4, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	2000000a 	.word	0x2000000a
 8003d70:	4001300c 	.word	0x4001300c
 8003d74:	40013000 	.word	0x40013000

08003d78 <set_nrf24_SPI_CE>:
 * @brief  Enables the CE pin for the NRF24LO1+ module. Active low
 * @retval None
 */
void set_nrf24_SPI_CE(uint8_t input){
  if(input == 1){
    GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8003d78:	2102      	movs	r1, #2
void set_nrf24_SPI_CE(uint8_t input){
 8003d7a:	b510      	push	{r4, lr}
  if(input == 1){
 8003d7c:	2801      	cmp	r0, #1
 8003d7e:	d104      	bne.n	8003d8a <set_nrf24_SPI_CE+0x12>
    GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8003d80:	2090      	movs	r0, #144	@ 0x90
 8003d82:	05c0      	lsls	r0, r0, #23
 8003d84:	f7fc faec 	bl	8000360 <GPIO_SetBits>
  }
  else{
    GPIO_ResetBits(GPIOA, GPIO_Pin_1);
  }
}
 8003d88:	bd10      	pop	{r4, pc}
    GPIO_ResetBits(GPIOA, GPIO_Pin_1);
 8003d8a:	2090      	movs	r0, #144	@ 0x90
 8003d8c:	05c0      	lsls	r0, r0, #23
 8003d8e:	f7fc fae9 	bl	8000364 <GPIO_ResetBits>
}
 8003d92:	e7f9      	b.n	8003d88 <set_nrf24_SPI_CE+0x10>

08003d94 <transmitBytesNRF>:
void transmitBytesNRF(uint8_t * data, uint8_t data_len) {
 8003d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d96:	000d      	movs	r5, r1
 8003d98:	0004      	movs	r4, r0
    uint8_t write_address [3] = {0x93, 0xBD, 0x6B};
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	4924      	ldr	r1, [pc, #144]	@ (8003e30 <transmitBytesNRF+0x9c>)
 8003d9e:	a801      	add	r0, sp, #4
 8003da0:	f7ff f8fa 	bl	8002f98 <memcpy>
    nrf24_clear_TX();
 8003da4:	f7ff ffd0 	bl	8003d48 <nrf24_clear_TX>
    nrf24_write_register(STATUS_REG, 0x30); //Clear MAX_RT and TX Data Sent bit from status register
 8003da8:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <transmitBytesNRF+0xa0>)
 8003daa:	2130      	movs	r1, #48	@ 0x30
 8003dac:	7818      	ldrb	r0, [r3, #0]
 8003dae:	f7ff ff43 	bl	8003c38 <nrf24_write_register>
    nrf24_write_register(ENAA, 0x01); //enable auto ack for pipe 0 //ALL PIPES 0x3F
 8003db2:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <transmitBytesNRF+0xa4>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	7818      	ldrb	r0, [r3, #0]
 8003db8:	f7ff ff3e 	bl	8003c38 <nrf24_write_register>
    nrf24_write_register(SETUP_AW, 0x01); //set to 3 byte address width
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <transmitBytesNRF+0xa8>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	7818      	ldrb	r0, [r3, #0]
 8003dc2:	f7ff ff39 	bl	8003c38 <nrf24_write_register>
    nrf24_multiwrite_register(TX_ADDR, write_address, ADDRESS_LEN); //set write address
 8003dc6:	4e1e      	ldr	r6, [pc, #120]	@ (8003e40 <transmitBytesNRF+0xac>)
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <transmitBytesNRF+0xb0>)
 8003dca:	7832      	ldrb	r2, [r6, #0]
 8003dcc:	7818      	ldrb	r0, [r3, #0]
 8003dce:	a901      	add	r1, sp, #4
 8003dd0:	f7ff ff52 	bl	8003c78 <nrf24_multiwrite_register>
    nrf24_multiwrite_register(RX_ADDR_P0, write_address, ADDRESS_LEN); //set read address
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <transmitBytesNRF+0xb4>)
 8003dd6:	7832      	ldrb	r2, [r6, #0]
 8003dd8:	7818      	ldrb	r0, [r3, #0]
 8003dda:	a901      	add	r1, sp, #4
 8003ddc:	f7ff ff4c 	bl	8003c78 <nrf24_multiwrite_register>
    nrf24_write_register(RF_SETUP, 0x00); //set RF Data Rate to 1Mbps, RF output power to -18dBm
 8003de0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <transmitBytesNRF+0xb8>)
 8003de2:	2100      	movs	r1, #0
 8003de4:	7818      	ldrb	r0, [r3, #0]
 8003de6:	f7ff ff27 	bl	8003c38 <nrf24_write_register>
    nrf24_write_register(RX_PW_P0, 0x01); //set payload size to 1 byte
 8003dea:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <transmitBytesNRF+0xbc>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	7818      	ldrb	r0, [r3, #0]
 8003df0:	f7ff ff22 	bl	8003c38 <nrf24_write_register>
    nrf24_write_register(FEATURE, 0x01); //enable W_TX_PAYLOAD_NOACK command
 8003df4:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <transmitBytesNRF+0xc0>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	7818      	ldrb	r0, [r3, #0]
 8003dfa:	f7ff ff1d 	bl	8003c38 <nrf24_write_register>
    nrf24_write_TX_payload(data, ACK, data_len);            //write data to be transmitted into TX FIFO
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <transmitBytesNRF+0xc4>)
 8003e00:	002a      	movs	r2, r5
 8003e02:	7819      	ldrb	r1, [r3, #0]
 8003e04:	0020      	movs	r0, r4
 8003e06:	f7ff ff65 	bl	8003cd4 <nrf24_write_TX_payload>
    GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8003e0a:	2090      	movs	r0, #144	@ 0x90
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	05c0      	lsls	r0, r0, #23
 8003e10:	f7fc faa6 	bl	8000360 <GPIO_SetBits>
    delay_microseconds(130, NULL); //wait for chip to go into TX mode
 8003e14:	2100      	movs	r1, #0
 8003e16:	2082      	movs	r0, #130	@ 0x82
 8003e18:	f7ff fd7e 	bl	8003918 <delay_microseconds>
    Delay(1);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7ff f945 	bl	80030ac <Delay>
    Delay(50);   // Not sure how long this delay needs to be
 8003e22:	2032      	movs	r0, #50	@ 0x32
 8003e24:	f7ff f942 	bl	80030ac <Delay>
    set_nrf24_SPI_CE(0);                  //disable chip after transmission
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7ff ffa5 	bl	8003d78 <set_nrf24_SPI_CE>
}
 8003e2e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8003e30:	08003f55 	.word	0x08003f55
 8003e34:	2000000b 	.word	0x2000000b
 8003e38:	20000015 	.word	0x20000015
 8003e3c:	20000014 	.word	0x20000014
 8003e40:	20000008 	.word	0x20000008
 8003e44:	20000010 	.word	0x20000010
 8003e48:	20000012 	.word	0x20000012
 8003e4c:	20000013 	.word	0x20000013
 8003e50:	20000011 	.word	0x20000011
 8003e54:	2000000f 	.word	0x2000000f
 8003e58:	20000009 	.word	0x20000009

08003e5c <transmit>:
void transmit(void * data, uint8_t data_len, uint8_t data_size){ 
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	000c      	movs	r4, r1
 8003e60:	b08a      	sub	sp, #40	@ 0x28
 8003e62:	9001      	str	r0, [sp, #4]
  if (data_len % data_size != 0 || 32 % data_size != 0 || data_size < 1){
 8003e64:	0011      	movs	r1, r2
 8003e66:	0020      	movs	r0, r4
void transmit(void * data, uint8_t data_len, uint8_t data_size){ 
 8003e68:	0015      	movs	r5, r2
  if (data_len % data_size != 0 || 32 % data_size != 0 || data_size < 1){
 8003e6a:	f7fd f839 	bl	8000ee0 <__aeabi_uidivmod>
 8003e6e:	b2c9      	uxtb	r1, r1
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d118      	bne.n	8003ea6 <transmit+0x4a>
 8003e74:	0029      	movs	r1, r5
 8003e76:	2020      	movs	r0, #32
 8003e78:	f7fd f91c 	bl	80010b4 <__aeabi_idivmod>
 8003e7c:	1e0e      	subs	r6, r1, #0
 8003e7e:	d112      	bne.n	8003ea6 <transmit+0x4a>
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	d010      	beq.n	8003ea6 <transmit+0x4a>
  nrf24_write_register(CONFIG, 0x0A);         //set to PTX mode and turn on power bit 0x0A
 8003e84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <transmit+0x98>)
 8003e86:	210a      	movs	r1, #10
 8003e88:	7818      	ldrb	r0, [r3, #0]
 8003e8a:	f7ff fed5 	bl	8003c38 <nrf24_write_register>
  delay_microseconds(2*1000, NULL);  //wait for chip to go into Standby-I mode
 8003e8e:	20fa      	movs	r0, #250	@ 0xfa
 8003e90:	0031      	movs	r1, r6
 8003e92:	00c0      	lsls	r0, r0, #3
 8003e94:	f7ff fd40 	bl	8003918 <delay_microseconds>
  while(data_len > 0){
 8003e98:	2c00      	cmp	r4, #0
 8003e9a:	d106      	bne.n	8003eaa <transmit+0x4e>
  nrf24_write_register(CONFIG, 0x08);   //power down by setting PWR_UP bit to 0
 8003e9c:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <transmit+0x98>)
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	7818      	ldrb	r0, [r3, #0]
 8003ea2:	f7ff fec9 	bl	8003c38 <nrf24_write_register>
}
 8003ea6:	b00a      	add	sp, #40	@ 0x28
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
    len_left = data_len > 32 ? 32 : (data_len*data_size)%32; 
 8003eaa:	002b      	movs	r3, r5
 8003eac:	2220      	movs	r2, #32
 8003eae:	4363      	muls	r3, r4
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4294      	cmp	r4, r2
 8003eb4:	d802      	bhi.n	8003ebc <transmit+0x60>
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	231f      	movs	r3, #31
 8003eba:	401a      	ands	r2, r3
    memcpy(&data_seg[0], &data[i], len_left); //mini array of length 32 for buffering transmitted data
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	a802      	add	r0, sp, #8
 8003ec0:	1999      	adds	r1, r3, r6
 8003ec2:	f7ff f869 	bl	8002f98 <memcpy>
    transmitBytesNRF(data_seg, len_transmit);
 8003ec6:	2120      	movs	r1, #32
 8003ec8:	a802      	add	r0, sp, #8
 8003eca:	f7ff ff63 	bl	8003d94 <transmitBytesNRF>
    data_len = data_len*data_size > 32 ? data_len-=32/data_size : 0; 
 8003ece:	9b00      	ldr	r3, [sp, #0]
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	dd0c      	ble.n	8003eee <transmit+0x92>
 8003ed4:	2020      	movs	r0, #32
 8003ed6:	0029      	movs	r1, r5
 8003ed8:	4240      	negs	r0, r0
 8003eda:	f7fd f805 	bl	8000ee8 <__divsi3>
 8003ede:	1824      	adds	r4, r4, r0
 8003ee0:	b2e4      	uxtb	r4, r4
    i+=32/data_size;
 8003ee2:	0029      	movs	r1, r5
 8003ee4:	2020      	movs	r0, #32
 8003ee6:	f7fc ffff 	bl	8000ee8 <__divsi3>
 8003eea:	1836      	adds	r6, r6, r0
 8003eec:	e7d4      	b.n	8003e98 <transmit+0x3c>
    data_len = data_len*data_size > 32 ? data_len-=32/data_size : 0; 
 8003eee:	2400      	movs	r4, #0
 8003ef0:	e7f7      	b.n	8003ee2 <transmit+0x86>
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	2000003c 	.word	0x2000003c

08003ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ef8:	480d      	ldr	r0, [pc, #52]	@ (8003f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003efa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003efc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003efe:	e003      	b.n	8003f08 <LoopCopyDataInit>

08003f00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003f02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f06:	3104      	adds	r1, #4

08003f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f08:	480b      	ldr	r0, [pc, #44]	@ (8003f38 <LoopForever+0xa>)
  ldr r3, =_edata
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <LoopForever+0xe>)
  adds r2, r0, r1
 8003f0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f10:	d3f6      	bcc.n	8003f00 <CopyDataInit>
  ldr r2, =_sbss
 8003f12:	4a0b      	ldr	r2, [pc, #44]	@ (8003f40 <LoopForever+0x12>)
  b LoopFillZerobss
 8003f14:	e002      	b.n	8003f1c <LoopFillZerobss>

08003f16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f16:	2300      	movs	r3, #0
  str  r3, [r2]
 8003f18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f1a:	3204      	adds	r2, #4

08003f1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003f1c:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <LoopForever+0x16>)
  cmp r2, r3
 8003f1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f20:	d3f9      	bcc.n	8003f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f22:	f7ff f96f 	bl	8003204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f26:	f7ff f87d 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f2a:	f7ff f935 	bl	8003198 <main>

08003f2e <LoopForever>:
  
LoopForever:
    b LoopForever
 8003f2e:	e7fe      	b.n	8003f2e <LoopForever>
  ldr   r0, =_estack
 8003f30:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8003f34:	08003fcc 	.word	0x08003fcc
  ldr r0, =_sdata
 8003f38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f3c:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8003f40:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8003f44:	20000098 	.word	0x20000098

08003f48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f48:	e7fe      	b.n	8003f48 <ADC1_COMP_IRQHandler>
 8003f4a:	4320      	.short	0x4320
 8003f4c:	61502000 	.word	0x61502000
 8003f50:	00252000 	.word	0x00252000
 8003f54:	6bbd9300 	.word	0x6bbd9300

08003f58 <APBAHBPrescTable>:
 8003f58:	00000000 04030201 04030201 09080706     ................
 8003f68:	08001b20 08001960 08001982 08001994      ...`...........
 8003f78:	08001982 08001abe 08001982 08001994     ................
 8003f88:	08001960 08001960 08001abe 08001994     `...`...........
 8003f98:	0800198c 0800198c 0800198c 08001acc     ................
 8003fa8:	53000a0d 74726174 00000000              ...Start....

08003fb4 <_init>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr

08003fc0 <_fini>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr
